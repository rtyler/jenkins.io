<?xml version="1.0" encoding="utf-8" ?>
<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://rtyler.github.io/jenkins.io/</id>
<title>Jenkins Blog</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<link rel="self" type="application/atom+xml" href="https://rtyler.github.io/jenkins.io/rss.xml" />
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/" />
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/24/jenkins-community-survey/</id>
<title>The State of Jenkins - 2016 Community Survey</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/24/jenkins-community-survey/" />
<author>
<name>brao</name>
</author>
<category term="community"></category>
<category term="survey"></category>
<category term="continuous delivery"></category>
<summary>
This is a guest post by Bhavani Rao, Marketing Manager at CloudBees






Last fall, prior to Jenkins World, CloudBees conducted a
Community Survey.
We received over 1200 responses, and thanks to this input, we have some
interesting insights into how Jenkins users and their use of Jenkins are
evolving.


Based on the survey&#8217;s results, Jenkins is increasingly being used to support
continuous delivery (CD). Adoption of Jenkins 2, which featured "Pipeline as code" and
encouraged users to adopt Jenkins Pipeline, has
skyrocketed to more than half of all Jenkins installations.  Other data
remained consistent with findings year-to-year, for example, the number of
Jenkins users continues to increase and 90% of...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by Bhavani Rao, Marketing Manager at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last fall, prior to Jenkins World, CloudBees conducted a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/09/take-the-2016-jenkins-survey-blog/&quot;&gt;Community Survey&lt;/a&gt;.
We received over &lt;strong&gt;1200&lt;/strong&gt; responses, and thanks to this input, we have some
interesting insights into how Jenkins users and their use of Jenkins are
evolving.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Based on the survey’s results, Jenkins is increasingly being used to support
continuous delivery (CD). Adoption of Jenkins 2, which featured &quot;Pipeline as code&quot; and
encouraged users to adopt &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;, has
skyrocketed to more than half of all Jenkins installations.  Other data
remained consistent with findings year-to-year, for example, the number of
Jenkins users continues to increase and 90% of survey respondents still
consider Jenkins mission-critical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://rtyler.github.io/jenkins.io/files/2016-jenkins-community-survey.pdf&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-community-survey/2016-survey-mission-critical.png&quot; alt=&quot;90% consider Jenkins mission-critical&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016-jenkins-community-survey.pdf&quot;&gt;Get the survey infographic PDF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016-jenkins-community-survey-responses.pdf&quot;&gt;Get the complete survey results in PDF&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some of the key findings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;85% of respondants indicated that Jenkins usage had increased&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30% of organizations with more than 50 software projects used Jenkins in 2016 as compared to 16% in 2015&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An impressive 46% of respondents were running Jenkins 2.x, eight months after
its release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adoption of &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt; for continuous delivery
(CD) is accelerating, 54% of respondents who have adopted CD are using Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;61% of respondents are deploying changes to production at least once per week&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux is the platform of choice for builds, favored by 85% of respondents&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;85% of respondants use Git as the source code repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Half of respondents are deploying applications directly to the cloud, with Amazon Web Services as the favored platform&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to thank everyone for completing the survey, and congratulations to
Iker Garcia for winning a free pass to
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2017&lt;/a&gt; and to
Dave Leifer for winning the Amazon gift card.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re looking forward to creating a 2017 Community Survey later this year and
hearing more from users at Jenkins World 2017 in San Francisco, we hope to
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;see you there!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/21/toulousejam-pipeline-workshop/</id>
<title>Pipeline Workshop &amp; Hackergarten @ ToulouseJAM Feedback</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/21/toulousejam-pipeline-workshop/" />
<author>
<name>batmat</name>
</author>
<category term="hackergarten"></category>
<category term="jam"></category>
<category term="meetup"></category>
<category term="feedback"></category>
<summary>
Earlier this month, a full-day event about Jenkins Pipeline was organized in Toulouse, France with the Toulouse JAM.


After a warm-up on the previous Tuesday where Michaël Pailloncy had given a talk at the local Toulouse Devops user group about Jenkins Pipeline ecosystem, we were ready for more digging :-).







The agenda


We had planned the day in two parts:




Morning would be a more driven workshop with slides &amp; exercises to be completed


Pizzas &amp; beverages to split the day :-)


Afternoon would be somehow like an Unconference, where people basically decide by themselves what they want to work on.




We planned to have 30 attendees....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Earlier this month, a full-day event about Jenkins Pipeline was organized in &lt;a href=&quot;https://www.google.fr/maps/place/Toulouse/@43.6006786,1.3628012,12z/data=!3m1!4b1!4m5!3m4!1s0x12aebb6fec7552ff:0x406f69c2f411030!8m2!3d43.604652!4d1.444209&quot;&gt;Toulouse, France&lt;/a&gt; with the &lt;a href=&quot;https://www.meetup.com/fr-FR/Toulouse-Jenkins-Area-Meetup/events/237089783/&quot;&gt;Toulouse JAM&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a warm-up on the previous Tuesday where Michaël Pailloncy had given a talk at the local &lt;a href=&quot;https://www.meetup.com/fr-FR/Toulouse-DevOps/events/237859268/&quot;&gt;Toulouse Devops user group about Jenkins Pipeline ecosystem&lt;/a&gt;, we were ready for more digging :-).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/workshop-overview-1.jpg&quot; alt=&quot;workshop overview 1&quot; width=&quot;30%&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/workshop-overview-2.jpg&quot; alt=&quot;workshop overview 2&quot; width=&quot;30%&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/workshop-overview-3.jpg&quot; alt=&quot;workshop overview 3&quot; width=&quot;30%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-agenda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-agenda&quot;&gt;&lt;/a&gt;The agenda&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had planned the day in two parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Morning would be a more driven workshop with slides &amp;amp; exercises to be completed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pizzas &amp;amp; beverages to split the day :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Afternoon would be somehow like an &lt;a href=&quot;https://en.wikipedia.org/wiki/Unconference&quot;&gt;Unconference&lt;/a&gt;, where people basically decide by themselves what they want to work on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We planned to have 30 attendees. We ended up having 25.
We considered having more people, but finally decided that for a first time it would be better to start not too big.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infrastructure&quot;&gt;&lt;/a&gt;Infrastructure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Infrastructure was sponsored by &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For each attendee, &lt;a href=&quot;https://github.com/ToulouseJAM/jam-workshop-infra&quot;&gt;we provisioned&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One Master, preconfigured to be able to dynamically provision agents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One staging &lt;em&gt;environment&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One production &lt;em&gt;environment&lt;/em&gt;
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One SonarQube instance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;workshop-content-infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#workshop-content-infrastructure&quot;&gt;&lt;/a&gt;Workshop content &amp;amp; infrastructure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After an initial quick &lt;a href=&quot;https://docs.google.com/presentation/d/1FKkraQdr4oxRephVnItUmOUe9pBeC0dRfZXCxqoubg0/edit&quot;&gt;presentation to settle context and remind some general things about Continuous Delivery and Jenkins&lt;/a&gt;, we started the workshop per se.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is composed of 3 parts, &lt;a href=&quot;https://github.com/ToulouseJAM/workshop-resources&quot;&gt;which are readable here&lt;/a&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;, but very few people were able to start the part 3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hackergarten-unconference&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hackergarten-unconference&quot;&gt;&lt;/a&gt;Hackergarten / Unconference&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we let people decide what they wanted to work on during the afternoon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/subdividing-per-interest.jpg&quot; alt=&quot;subdividing per interest&quot; width=&quot;50%&quot; /&gt;&lt;/span&gt; We decided to use post-its: each attendee would write down what they wanted to work on, one idea per post-it (max 2 per person).
Then, we dropped those onto a white-board and tried grouping those by theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, overall, the following themes went out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hack on Jenkins development &amp;amp; Contribute to Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Complete the workshops&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work on use-case oriented things&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work on Docker &amp;amp; Pipeline join usages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hackergarten&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hackergarten&quot;&gt;&lt;/a&gt;Hackergarten&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/hackergarten.jpg&quot; alt=&quot;hackergarten&quot; width=&quot;40%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many &lt;a href=&quot;https://accounts.jenkins.io/&quot;&gt;Jenkins accounts&lt;/a&gt; were created, and many JIRA and pull requests were filed.
It was nice to see people asking questions like: &quot;so, should I create a JIRA issue for this?&quot; or &quot;how do I interact with people&quot;.
Pretty generic &quot;how do I work on open source software&quot; questions sometimes, but important because you felt like people were genuinely interested and needed not much to start contributing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the pull requests filed during this afternoon:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/blueocean-pipeline-editor-plugin/pull/30&quot;&gt;blueocean-pipeline-editor-plugin#30&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/2785/&quot;&gt;jenkins#2785&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/2786/&quot;&gt;jenkins#2786&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/2787/&quot;&gt;jenkins#2787&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/jenkins/pull/2788/&quot;&gt;jenkins#2788&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that though most of the PRs were typo-related, the one that got merged first was the one about code :-).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-03-toulousejam-workshop/bobblehead.jpg&quot; alt=&quot;bobblehead&quot; width=&quot;30%&quot; /&gt;&lt;/span&gt; So, &lt;a href=&quot;https://github.com/jviolas&quot;&gt;Jeremie Violas&lt;/a&gt; wins the Bobble Head as &lt;a href=&quot;https://twitter.com/toulousejam/status/839606221338464256&quot;&gt;promised&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;why-so-many-typo-related-prs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-so-many-typo-related-prs&quot;&gt;&lt;/a&gt;Why so many typo-related PRs?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simply because people were somehow encouraged to find some to get used to the
round trip of: fixing an issue and filing the associated pull request, rinse &amp;amp;
repeat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do think this is also a pretty nice and simple first step to understand how
to build Jenkins and start interacting with the community.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-result&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-result&quot;&gt;&lt;/a&gt;The result&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;People seemed pretty happy and we got some nice comments like &quot;now I have a clearer vision of what this Pipeline thing is about&quot;.
Some attendees also dropped nice comments on the meetup page.
So it’s cool because when you’re doing such things on your free time, it’s the main reward you can get.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re an attendee to such events, don’t forget to thank people organizing
those, and more importantly to provide constructive feedback.  We are generally
eager to know what could be done better for next time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall we are very happy with the energy of that day, and we definitely plan to set up a new session in the next few months, probably with a bit more people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some thoughts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure: when you plan to have many VM per attendee, double-check the limits your Cloud Provider may have by default. I had bumped it to 250 the day before the workshop, and asked for another one to 500 &lt;strong&gt;during&lt;/strong&gt; the workshop (though in the end, 250 was probably enough, but this’ll give room for the next time with more people :-)).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logistics: warning, secret ahead: this is very time consuming.
Not necessarily the amount of work itself, more that it implies very big latency.
For instance, give it 2 to 3 weeks minimum to have answers about sponsoring in general. Pinging again in case of no answer after 2 days would probably be seen as rude, and possibly lead to make things worse for obvious reasons, so plan ahead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;thank-you&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thank-you&quot;&gt;&lt;/a&gt;Thank you&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt; for sponsoring the Infrastructure&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We got way more than 100 VMs running at the same time during the day thanks to their help!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.harrycow.com/&quot;&gt;HarryCow Coworking&lt;/a&gt; for hosting the event&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To &lt;a href=&quot;https://www.cloudbees.com/&quot;&gt;CloudBees&lt;/a&gt; for sponsoring the food for all the participants&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Also for providing a bunch of goodies: stickers and T-Shirts for everybody&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; for providing stickers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. For the sake of the simplicity of the workshop, those &lt;em&gt;environments&lt;/em&gt; were actually a single VM: the goal was here to illustrate what we could do using Jenkins Pipeline, discussing scalability or more involved deployment techniques was obviously out of scope.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. in French only for now, but translating it into English to make it possibly shared and reusable among JAMs is being discussed
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/20/security-updates/</id>
<title>Security updates for multiple Jenkins plugins</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-20T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/20/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="plugins"></category>
<category term="security"></category>
<summary>
Multiple Jenkins plugins received updates today that fix several security vulnerabilities:




Active Directory


Distributed Fork


Email Extension (Email-ext)


Mailer


SSH Slaves




For an overview of what was fixed, see the security advisory.


Additionally, we also published a security notice for the following plugin and recommend that users disable and uninstall it:




Pipeline: Classpath Step




This plugin is not part of the Pipeline suite of plugins, despite its name. It&#8217;s installed on just several hundred instances.


Subscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiple Jenkins plugins received updates today that fix several security vulnerabilities:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/active-directory&quot;&gt;Active Directory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/distfork&quot;&gt;Distributed Fork&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/email-ext&quot;&gt;Email Extension (Email-ext)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/mailer&quot;&gt;Mailer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/ssh-slaves&quot;&gt;SSH Slaves&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://jenkins.io/security/advisory/2017-03-20&quot;&gt;security advisory&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we also published a security notice for the following plugin and recommend that users disable and uninstall it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Classpath+Step+Plugin&quot;&gt;Pipeline: Classpath Step&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is not part of the Pipeline suite of plugins, despite its name. It’s installed on just several hundred instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Subscribe to the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/mailing-lists&quot;&gt;jenkinsci-advisories mailing list&lt;/a&gt; to receive important notifications related to Jenkins security.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/17/blueocean-devlog-mar3/</id>
<title>Blue Ocean Dev Log: March Week #3</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/17/blueocean-devlog-mar3/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
We&#8217;re counting down the weeks until Blue Ocean 1.0,
and we&#8217;re getting close!  In this past week, the first release candidate
has gone out to the Update Center, along with a new
Pipeline Editor plugin. The Blue Ocean
Pipeline Editor is its own plugin which integrates into Blue Ocean, so this was
a coordinated release with Blue Ocean 1.0 rc1.





Noteworthy this week:




RC1 includes the Blue Ocean Pipeline Editor, which is integrates support for
branch editing and saving the Pipeline back to GitHub (also referred to as
"round-tripping").


Many dependencies have been upgraded


Per-stage raw logs can be downloaded, this will be included in the next
release.


Editor design improvements


Fixes for...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re counting down the weeks until &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; 1.0,
and we’re getting close!  In this past week, the first &lt;strong&gt;release candidate&lt;/strong&gt;
has gone out to the Update Center, along with a new
&lt;a href=&quot;https://plugins.jenkins.io/blueocean-pipeline-editor&quot;&gt;Pipeline Editor plugin&lt;/a&gt;. The Blue Ocean
Pipeline Editor is its own plugin which integrates into Blue Ocean, so this was
a coordinated release with Blue Ocean 1.0 rc1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/editor-mar-1.png&quot; alt=&quot;Editing a Pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Noteworthy this week:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RC1 includes the Blue Ocean Pipeline Editor, which is integrates support for
branch editing and saving the Pipeline back to GitHub (also referred to as
&quot;round-tripping&quot;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many dependencies have been upgraded&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Per-stage raw logs can be downloaded, this will be included in the next
release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editor design improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixes for overflowing text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new sleeker favorite card design has been released, so you can fit
more favorites on your screen!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/favorites-mar-1.png&quot; alt=&quot;Pipeline Favorites&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Blue Ocean Pipeline Editor is better integrated into a few different
screens in Blue Ocean. For example, you can open the editor from the results
screen (top right):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/editor-topbar-link.png&quot; alt=&quot;Editing a Pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or open the editor from branch listings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/editor-run-listing-link.png&quot; alt=&quot;Editing a Pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More bug-bashing! Please join us in testing the release candidate.
Instructions for trying Blue Ocean can be found on
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;our project page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another release candidate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/16/fosdem-event-report/</id>
<title>FOSDEM 2017 Wrap-up</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/16/fosdem-event-report/" />
<author>
<name>rtyler</name>
</author>
<category term="fosdem"></category>
<category term="event"></category>
<summary>
In early February numerous free and open source developers from around the
world traveled to Brussels, Belgium, for arguably the largest event of its
kind:
FOSDEM. Among the thousands of hackers in attendance
were a dozen or so Jenkins contributors. We have attended the event in the
past, but this year we had a blizzard of activity spanning four days around the FOSDEM
weekend.





Figure 1. City Hall, photo by Kohsuke Kawaguchi


One of our "accidental traditions" has become a
happy hour
the Friday night before FOSDEM truly begins at Cafe Le Roy d&#8217;Espagne on Grand
Place right in the middle of Brussels. Conveniently located a few hundred meters away from...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In early February numerous free and open source developers from around the
world traveled to Brussels, Belgium, for arguably the largest event of its
kind:
&lt;a href=&quot;https://fosdem.org&quot;&gt;FOSDEM&lt;/a&gt;. Among the thousands of hackers in attendance
were a dozen or so Jenkins contributors. We have attended the event in the
past, but this year we had a blizzard of activity spanning four days around the FOSDEM
weekend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.flickr.com/photos/12508267@N00/32449169840/in/album-72157680098353926/&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/3/2328/32449169840_f8fec9c11a_z.jpg&quot; alt=&quot;Brussels City Hall&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. City Hall, photo by Kohsuke Kawaguchi&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of our &quot;accidental traditions&quot; has become a
&lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/236370435/&quot;&gt;happy hour&lt;/a&gt;
the Friday night before FOSDEM truly begins at Cafe Le Roy d’Espagne on Grand
Place right in the middle of Brussels. Conveniently located a few hundred meters away from the
&lt;a href=&quot;https://fosdem.org/2017/beerevent/&quot;&gt;FOSDEM Beer Event&lt;/a&gt;
at Delirium Cafe, each year we are inevitably joined by friends from other open
source projects who know they’re welcome to join us for a few drinks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.flickr.com/photos/12508267@N00/31987111834/in/album-72157680098353926/&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/1/497/31987111834_39773bc5ab_z.jpg&quot; alt=&quot;Happy hour at Cafe Le Roy&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Cafe Le Roy, photo by Kohsuke Kawaguchi&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After dinner and drinks, a few of us decided it would be a good idea (it
wasn’t) to walk over to check out the FOSDEM Beer Event and &lt;em&gt;maybe&lt;/em&gt; have just
one more beer. For the uninitiated, Belgian beers tend to be strong, as the FOSDEM organizers warn:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unlike some other beers, Belgian beer is not just coloured water. Some beers
contain significant quantities of alcohol and will give you a pounding
hangover.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, some of us seem to re-learn this lesson each year at FOSDEM!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bright and early the following day, FOSDEM really kicked off with keynotes and
the project tables lining a number of corridors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.flickr.com/photos/12508267@N00/32706234821/in/album-72157680098353926/&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/3/2035/32706234821_2997a98b52_z.jpg&quot; alt=&quot;Busy FOSDEM hall&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. A busy hall at FOSDEM, photo by Kohsuke Kawaguchi&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the Jenkins project’s table we typically spend two full days answering questions,
showing off the latest and greatest Jenkins features, and of course handing out
Jenkins stickers. The table is where many contributors, myself included, have
a rare opportunity to talk with dozens of enthusiastic Jenkins users from
across the broader open source community. This year we were very fortunate to have a
tremendous number of contributors available at the table to answer hundreds of
questions throughout the two days of FOSDEM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to thank everybody by name, but the entire weekend was such a blur
that I’m not sure I would be able to remember everybody who helped! We couldn’t have
had a successful event without their support, so many thanks to all the
contributors who helped!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the Jenkins project table, we had two contributors present in
the
&lt;a href=&quot;https://fosdem.org/2017/schedule/track/testing_and_automation/&quot;&gt;Testing and Automation&lt;/a&gt;
devroom, which I helped organize in between answering Jenkins questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;declarative-pipelines-in-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declarative-pipelines-in-jenkins&quot;&gt;&lt;/a&gt;Declarative Pipelines in Jenkins&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first presentation was a stellar introduction to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline&quot;&gt;Declarative Pipelines&lt;/a&gt;
in Jenkins, by long-time contributor and primary developer of Declarative
Pipeline support,
&lt;a href=&quot;https://github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/utztUGvZ_EA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;using-containers-for-building-and-testing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#using-containers-for-building-and-testing&quot;&gt;&lt;/a&gt;Using Containers for Building and Testing&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Later in the day,
&lt;a href=&quot;https://github.com/carlossg&quot;&gt;Carlos Sanchez&lt;/a&gt;,
another long-time contributor, maintainer of the
&lt;a href=&quot;https://plugins.jenkins.io/kubernetes&quot;&gt;Kubernetes plugin&lt;/a&gt; and a number of Jenkins- and Maven-related
Docker containers, provided a great overview of the current state of using
containers for building and testing in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/YjTG9imfbOU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a very busy two days at FOSDEM, a few contributors remained in Brussels
for a day-long
&lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/236370750/&quot;&gt;Post-FOSDEM Contributor Hackathon&lt;/a&gt;
sponsored by CloudBees, Inc. and
&lt;a href=&quot;http://www.betacowork.com/&quot;&gt;Betacowork Brussels&lt;/a&gt;. Trying to cram lots of
hacking into a single day is challenging, so the day was mostly filled with
discussions, some light prototyping, and a bit of recovery from the hectic
weekend at FOSDEM. :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.flickr.com/photos/12508267@N00/32015233063/in/album-72157680098353926/&quot;&gt;&lt;img src=&quot;https://c1.staticflickr.com/3/2087/32015233063_47128bac1c_z.jpg&quot; alt=&quot;Daniel presented at the hackathon&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Daniel Beck presenting on CLI prototyping, photo by Kohsuke Kawaguchi&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;thanks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course I would like to extend many thanks to all the contributors who
participated in the various FOSDEM related events, but I would call special
attention to the logistics and planning work done by contributors Alyssa Tong,
Damien Duportal, and Olivier Vernin. Thanks to their work coordinating all the
plans, reservations, and schedules, we had a flawless weekend
of high-intensity Jenkins discussion, advocacy, and hacking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope to see everybody back in Brussels next year for FOSDEM 2018!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/10/blueocean-devlog-mar2/</id>
<title>Blue Ocean Dev Log: March Week #2</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/10/blueocean-devlog-mar2/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
We&#8217;re counting down the weeks until Blue Ocean 1.0.
This week was one of continuing consolidation and polish. We also released b25
(beta #25), a collectors edition. The next version we will likely release will
be a release candidate (RC). The b25 release however contained a number of
fixes and features, such as branch filtering.







Some other updates of note from this past week:




Updated a bunch of dependencies around Pipeline and fixed a whole lot
of long standing bugs.


Some work went on to make acceptance tests run on varied browsers via
Sauce Labs thanks to
@halkeye!


The Blue Ocean Pipeline Editor had its
Save to SCM/GitHub functionality
merged to master branch....
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re counting down the weeks until &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; 1.0.
This week was one of continuing consolidation and polish. We also released b25
(beta #25), a collectors edition. The next version we will likely release will
be a release candidate (RC). The b25 release however contained a number of
fixes and features, such as branch filtering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/edit-action-items.png&quot; alt=&quot;Editing a Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some other updates of note from this past week:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated a bunch of dependencies around Pipeline and fixed a whole lot
of long standing bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some work went on to make acceptance tests run on varied browsers via
&lt;a href=&quot;https://saucelabs.com&quot;&gt;Sauce Labs&lt;/a&gt; thanks to
&lt;a href=&quot;https://github.com/halkeye&quot;&gt;@halkeye&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Blue Ocean Pipeline Editor had its
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-pipeline-editor-plugin/pull/29&quot;&gt;Save to SCM/GitHub functionality&lt;/a&gt;
merged to master branch.  It won’t be released to the Update Center until the
next Blue Ocean release, there are a few more things to iron out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As the Blue Ocean Pipeline Editor is now considered to be part of Blue Ocean
now, more people are kicking the tires, and starting to
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-pipeline-editor-plugin/pull/30&quot;&gt;contribute
fixes to improve it&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The swishy &quot;Blue Ocean&quot; logo is gone, Jenkins branding is back (mixed feelings!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixes for concurrent users of input&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixes for handling errors around favoriting of Pipelines and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speeding up creation of Multibranch Pipelines via the new &quot;Creation&quot; flow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And of course, a nice pretty screenshot of editing and saving a Multibranch
Pipeline with the Blue Ocean Pipeline Editor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/editor-save-dialog.png&quot; alt=&quot;Editing and saving a Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up next for the Blue Ocean project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More consolidation and polish.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A first release candidate out the door (!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New, sleeker, favorite card design, possibly a table design too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also note that there are changelogs maintained and visible on the
&lt;a href=&quot;https://plugins.jenkins.io/blueocean&quot;&gt;Blue Ocean plugin page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/03/03/blueocean-devlog-mar1/</id>
<title>Blue Ocean Dev Log: March Week #1</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-03-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/03/03/blueocean-devlog-mar1/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
We&#8217;re counting down the weeks until Blue Ocean 1.0.
This week was relatively quiet with a few people away for a few days, and
mostly about consolidation. There was a beta late last week, so this week we
thought we would let people have a rest from the upgrade treadmill for once.


One notable feature that has recently landed is "escaping to Classic" When you
see the exit symbol (door with arrow) it will take you to an equivalent page in
classic Jenkins (if one exists). You will notice this in a few places in the
app now.







Some other things that made it to master branch which...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re counting down the weeks until &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; 1.0.
This week was relatively quiet with a few people away for a few days, and
mostly about consolidation. There was a beta late last week, so this week we
thought we would let people have a rest from the upgrade treadmill for once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One notable feature that has recently landed is &quot;escaping to Classic&quot; When you
see the exit symbol (door with arrow) it will take you to an equivalent page in
classic Jenkins (if one exists). You will notice this in a few places in the
app now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/escape.png&quot; alt=&quot;Escaping to Classic&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some other things that made it to &lt;code&gt;master&lt;/code&gt; branch which have not yet been
released in a beta:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An API to save/branch to GitHub was finished, and tested with &quot;round
tripping&quot; with the Editor in some form&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New compact form of duration reporting (old style was too verbose for
most screens)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed a bug with input submissions with concurrent browser sessions which was
quite a tricky bug to chase down!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only show Admin link when appropriate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many many bug fixes and polishing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There has also been an uptick in activity on the
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter channel&lt;/a&gt; with an
increased number of questions about usage and Pipelines. But also questions
from people starting to extend, or add features, to Blue Ocean, which is very
nice to see.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/halkeye&quot;&gt;Gavin Mogan&lt;/a&gt; has been looking at integrating
the &lt;a href=&quot;https://plugins.jenkins.io/sauce-ondemand&quot;&gt;Sauce OnDemand&lt;/a&gt; plugin into Blue Ocean for better
browser-test reporting. Tangentially related, we also are planning to improve
browser-testing in Blue Ocean as well. What is perhaps more exciting is that
more people, like &lt;a href=&quot;https://github.com/dragoonis&quot;&gt;Paul Dragoonis&lt;/a&gt; and
&lt;a href=&quot;https://github.com/m4dc4p&quot;&gt;other folks&lt;/a&gt;, are starting to contribute some
fixes which have been lingering around for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up Next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Round trip Blue Ocean Pipeline Editor changes with load/save&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bundling the Blue Ocean Pipeline Editor with the &quot;aggregator&quot; Blue Ocean
plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some release candidates!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/24/blueocean-devlog-feb4/</id>
<title>Blue Ocean Dev Log: February Week #4</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/24/blueocean-devlog-feb4/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
We&#8217;re counting down the weeks until Blue Ocean 1.0.
In all the excitement I forgot to post
a dev log last week, so I will make up for it this week.


In the last 10 days, 2 betas went out: b22 and b23, and a preview release of
the editor. We expect the next release will be named a release candidate (we
know there is still more to go in, but want to signal that things are getting
into the final stages!). The
Gitter chat room is
getting busier, so join in!


Also last week, the Blue Ocean Pipeline Editor was presented at the
Jenkins Online Meetup,
embedded below.





Feature Highlights



You can...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re counting down the weeks until &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; 1.0.
&lt;a href=&quot;https://lh3.googleusercontent.com/-bjL2WHXNstg/WK9nTFR2ydI/AAAAAAAABtI/L01g534dxcM_Ya3jYgvyxcipmTerRoqYwCLcB/s1600/clint.jpg&quot;&gt;In all the excitement I forgot to post&lt;/a&gt;
a dev log last week, so I will make up for it this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the last 10 days, 2 betas went out: b22 and b23, and a preview release of
the editor. We expect the next release will be named a release candidate (we
know there is still more to go in, but want to signal that things are getting
into the final stages!). The
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter chat room&lt;/a&gt; is
getting busier, so join in!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also last week, the Blue Ocean Pipeline Editor was presented at the
&lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;Jenkins Online Meetup&lt;/a&gt;,
embedded below.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/0suw2NaBFus?start=1960&amp;amp;rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;feature-highlights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#feature-highlights&quot;&gt;&lt;/a&gt;Feature Highlights&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can now create Pipelines from GitHub in Blue Ocean. Either one
Pipeline at a time, or let it discover all your Pipelines for a GitHub Organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/creating-pipeline-from-github.png&quot; alt=&quot;Creating a Pipeline from GitHub&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When you press the &quot;Create&quot; button, it will open the new creation flow
by default now; the feature was previously hidden behind a feature switch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can filter the activity screen by branch! That way you can see a
history of Pipeline runs for just one branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/branch-filtering.png&quot; alt=&quot;Filtering a branch&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you like long names for stages - it now won’t pollute the screen
when space is at a premium (truncated names on screen).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blue Ocean events (&lt;a href=&quot;https://github.com/jenkinsci/sse-gateway-plugin&quot;&gt;SSE&lt;/a&gt;) should now work on Microsoft Edge again&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can see durations when you hover the mouse over indicators&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A release candidate is expected soon&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration work with the Editor to save to branches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some updates to the design around tables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bundling of the Editor with Blue Ocean&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t forget, there is also a Blue Ocean Docker image published weekly with
usually the latest released version. If you have Docker installed, this can
be as simple as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker run -p 8080:8080 jenkinsci/blueocean*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then browse to &lt;a href=&quot;http://localhost:8080/blue&quot;&gt;localhost:8080/blue&lt;/a&gt; - possibly
the quickest way to try things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/23/declarative-saucelabs-xunit/</id>
<title>Browser testing and conditional logic in Declarative Pipeline</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-23T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/23/declarative-saucelabs-xunit/" />
<author>
<name>lnewman</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="xunit"></category>
<category term="nightwatch"></category>
<category term="saucelabs"></category>
<category term="selenium"></category>
<category term="declarative"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Declare Your Pipelines!
Declarative Pipeline 1.0 is here!
This is the fourth post in a series showing some of the cool features of
Declarative Pipeline.


In the
previous post,
we integrated several notification services into a Declarative Pipeline.
We kept our Pipeline clean and easy to understand
by using a shared library to make a custom step called sendNotifications
that we called at the start and end of our Pipeline.


In this blog post, we&#8217;ll start by translating the Scripted Pipeline in the sample project I worked with
in
"Browser-testing with Sauce OnDemand and Pipeline"
and
"xUnit and Pipeline"
to Declarative.
We&#8217;ll make our Pipeline clearer...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Declare Your Pipelines!&lt;/strong&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline 1.0 is here&lt;/a&gt;!
This is the fourth post in a series showing some of the cool features of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/15/declarative-notifications/&quot;&gt;previous post&lt;/a&gt;,
we integrated several notification services into a Declarative Pipeline.
We kept our Pipeline clean and easy to understand
by using a shared library to make a custom step called &lt;code&gt;sendNotifications&lt;/code&gt;
that we called at the start and end of our Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we’ll start by translating the Scripted Pipeline in the sample project I worked with
in
&quot;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/2016/08/29/sauce-pipeline/&quot;&gt;Browser-testing with Sauce OnDemand and Pipeline&lt;/a&gt;&quot;
and
&quot;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/2016/10/31/xunit-reporting/&quot;&gt;xUnit and Pipeline&lt;/a&gt;&quot;
to Declarative.
We’ll make our Pipeline clearer by adding an &lt;code&gt;environment&lt;/code&gt; directive
to define some environment variables, and then moving some code to a shared library.
Finally, we’ll look at using the &lt;code&gt;when&lt;/code&gt; directive to add simple conditional behavior to our Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The setup for this post uses the same repository as the two posts above,
&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;my fork&lt;/a&gt;
of the
&lt;a href=&quot;https://github.com/saucelabs-sample-test-frameworks/JS-Nightwatch.js&quot;&gt;JS-Nightwatch.js sample project&lt;/a&gt;.
I’ve once again created a branch specifically for this blog post,
this time called
&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/declarative/sauce&quot;&gt;&lt;code&gt;blog/declarative/sauce&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like the two posts above, this Pipeline will use the
&lt;a href=&quot;https://plugins.jenkins.io/xunit&quot;&gt;xUnit&lt;/a&gt; and
&lt;a href=&quot;https://plugins.jenkins.io/sauce-ondemand&quot;&gt;Sauce OnDemand&lt;/a&gt; plugins.
The xUnit plugin only needs to be installed, the Sauce OnDemand needs additional configuration.
Follow
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins&quot;&gt;Sauce Labs' configuration instructions&lt;/a&gt;
to create an account with Sauce Labs and add your Sauce Labs credentials to Jenkins.
The Sauce OnDemand plugin will automatically install
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy&quot;&gt;Sauce Connect&lt;/a&gt;
for us when we call it from our Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Be sure to you have the latest version of the
&lt;a href=&quot;https://plugins.jenkins.io/sauce-ondemand&quot;&gt;Sauce OnDemand&lt;/a&gt; plugin (1.160 or newer).
It has several fixes required for this post.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a shared library, I’ve still got the one from the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/15/declarative-notifications/&quot;&gt;previous post&lt;/a&gt;.
To set up this &quot;Global Pipeline Library,&quot; navigate to &quot;Manage Jenkins&quot; → &quot;Configure System&quot;
in the Jenkins web UI.
Once there, under &quot;Global Pipeline Libraries&quot;, add a new library.
Then set the name to &lt;code&gt;bitwiseman-shared&lt;/code&gt;, point it at my repository,
and set the default branch for the library to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/shared-library.png&quot; alt=&quot;Global Pipeline Library&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reducing-complexity-with-declarative&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reducing-complexity-with-declarative&quot;&gt;&lt;/a&gt;Reducing Complexity with Declarative&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’ve been following along through this series,
this first step will be quite familiar by now.
We’ll start from the Pipeline we had at the end of the xUnit post
and translate it to Declarative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
    agent any
    options {
        &lt;span style=&quot;color:#777&quot;&gt;// Nightwatch.js supports color ouput, so wrap add his option&lt;/span&gt;
        ansiColor &lt;span style=&quot;color:#606&quot;&gt;colorMapName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XTerm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stages {
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            steps {
                &lt;span style=&quot;color:#777&quot;&gt;// Install dependencies&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }
        }
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            steps {
                &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
                sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
                    &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
                    sauceconnect() {
                        &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                        &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e chrome,firefox,ie,edge --test tests/guineaPig.js || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                    }
                }
            }
            post {
                always {
                    step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                        &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
                            [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
                            &lt;span style=&quot;color:#777&quot;&gt;// Allow for a significant number of failures&lt;/span&gt;
                            &lt;span style=&quot;color:#777&quot;&gt;// Keeping this threshold so that overwhelming failures are guaranteed&lt;/span&gt;
                            &lt;span style=&quot;color:#777&quot;&gt;//     to still fail the build&lt;/span&gt;
                            [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
                        &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])

                    saucePublisher()
                }
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    checkout scm

    &lt;span style=&quot;color:#777&quot;&gt;// Install dependencies&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect() {

            &lt;span style=&quot;color:#777&quot;&gt;// List of browser configs we'll be testing against.&lt;/span&gt;
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; platform_configs = [
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ].join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

            &lt;span style=&quot;color:#777&quot;&gt;// Nightwatch.js supports color ouput, so wrap this step for ansi color&lt;/span&gt;
            wrap([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AnsiColorBuildWrapper&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;colorMapName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XTerm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) {
                &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;platform_configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; --test tests/guineaPig.js || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }

            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
                    [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
                    &lt;span style=&quot;color:#777&quot;&gt;// Allow for a significant number of failures&lt;/span&gt;
                    &lt;span style=&quot;color:#777&quot;&gt;// Keeping this threshold so that overwhelming failures are guaranteed&lt;/span&gt;
                    &lt;span style=&quot;color:#777&quot;&gt;//     to still fail the build&lt;/span&gt;
                    [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
                &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])

            saucePublisher()
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-23/blue-ocean.png&quot; alt=&quot;Blue Ocean Run&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-23/sauce-report.png&quot; alt=&quot;SauceLabs Test Report&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Blue Ocean doesn’t support displaying SauceLabs test reports yet
(see &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-42242&quot;&gt;JENKINS-42242&lt;/a&gt;).
To view the report above, I had to switch back to the stage view of this run.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;elevating-settings-using-code-environment-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#elevating-settings-using-code-environment-code&quot;&gt;&lt;/a&gt;Elevating Settings using &lt;code&gt;environment&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each time we’ve moved a project from Scripted Pipeline to Declarative,
we’ve found the cleaner format of Declarative Pipeline highlights the less
clear parts of the existing Pipeline.
In this case, the first thing that jumps out at me is that the parameters of the
Saucelabs and Nightwatch execution are hardcoded and buried down in the middle of our Pipeline.
This is a relatively short Pipeline, so it isn’t terribly hard to find them,
but as this pipeline grows and changes it would be better if those values were kept separate.
In Scripted, we’d have defined some variables,
but Declarative doesn’t allow us to define variables in the usual Groovy sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;environment&lt;/code&gt; directive let’s us set some environment variables
and use them later in our pipeline.
As you’d expect, the &lt;code&gt;environment&lt;/code&gt; directive is just a set of name-value pairs.
Environment variables are accessible in Pipeline via &lt;code&gt;env.variableName&lt;/code&gt; (or just &lt;code&gt;variableName&lt;/code&gt;)
and in shell scripts as standard environment variables, typically &lt;code&gt;$variableName&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s move the list of browsers, the test filter, and the sauce credential string to environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;    environment {
        saucelabsCredentialId = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        sauceTestFilter = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;tests/guineaPig.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        platformConfigs = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome,firefox,ie,edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stages {
        &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            steps {
                &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
                sauce(saucelabsCredentialId) {
                    &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
                    sauceconnect() {
                        &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                        &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.platformConfigs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; --test &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.sauceTestFilter&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                    }
                }
            }
            post { &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt; }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This double-quoted string causes Groovy to replace the variables with their
literal values before passing to &lt;code&gt;sh&lt;/code&gt;.
This could also be written using singe-quotes:
&lt;code&gt;sh './node_modules/.bin/nightwatch -e $platformConfigs --test $sauceTestFilter || true'&lt;/code&gt;.
With a single quoted string, the string is passed as written to the shell,
and then &lt;strong&gt;the shell&lt;/strong&gt; does the variable substitution.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;moving-complex-code-to-shared-libraries&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moving-complex-code-to-shared-libraries&quot;&gt;&lt;/a&gt;Moving Complex Code to Shared Libraries&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have settings separated from the code, we can do some code clean up.
Unlike the previous post, we don’t have any repeating code,
but we do have some distractions.
The nesting of &lt;code&gt;sauce&lt;/code&gt;, &lt;code&gt;sauceconnect&lt;/code&gt;, and &lt;code&gt;sh nightwatch&lt;/code&gt; seems excessive,
and that xUnit &lt;code&gt;step&lt;/code&gt; is a bit ugly as well.
Let’s move those into our shared library as custom steps with parameters.
We’ll change the &lt;code&gt;Jenkinsfile&lt;/code&gt; in our main project,
and add the custom steps to a branch named
&lt;code&gt;blog/declarative/sauce&lt;/code&gt; in our library repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bitwiseman-shared@blog/declarative/sauce&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _

&lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;

stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
    steps {
        sauceNightwatch saucelabsCredentialId,
            platformConfigs,
            sauceTestFilter
    }
    post {
        always {
            xUnitPublishResults &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#777&quot;&gt;/* failWhenSkippedExceeds */&lt;/span&gt; &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;,
                &lt;span style=&quot;color:#777&quot;&gt;/* failWhenFailedExceeds */&lt;/span&gt; &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;

            saucePublisher()
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;vars/sauceNightwatch.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; sauceCredential, &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; platforms = &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;, &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; testFilter = &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;) {
    platforms = platforms ? &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-e '&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + platforms + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    testFilter = testFilter ? &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;--test '&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + testFilter + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(sauceCredential) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect() {
            &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;platforms&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;testFilter&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In this form, this could not be written using a literal single-quoted string.
Here, &lt;code&gt;platforms&lt;/code&gt; and &lt;code&gt;testFilter&lt;/code&gt; are groovy variables, not environment variables.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;vars/xUnitPublishResults.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; pattern, &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Integer&lt;/span&gt; failWhenSkippedExceeds,
        &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;Integer&lt;/span&gt; failWhenFailedExceeds) {
    step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
            [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: failWhenSkippedExceeds.toString()],
            &lt;span style=&quot;color:#777&quot;&gt;// Allow for a significant number of failures&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// Keeping this threshold so that overwhelming failures are guaranteed&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;//     to still fail the build&lt;/span&gt;
            [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: failWhenFailedExceeds.toString()]],
        &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: pattern]]])
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-conditional-stages-using-code-when-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-conditional-stages-using-code-when-code&quot;&gt;&lt;/a&gt;Running Conditional Stages using &lt;code&gt;when&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a sample web testing project.
We probably wouldn’t deploy it like we would production code,
but we might still want to deploy somewhere,
by publishing it to an artifact repository, for example.
This project is hosted on GitHub and uses feature branches and pull requests to make changes.
I’d like to use the same Pipeline for feature branches, pull requests, and the master branch,
but I only want to deploy from master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Scripted, we’d wrap a &lt;code&gt;stage&lt;/code&gt; in an &lt;code&gt;if-then&lt;/code&gt; and check if the branch for
the current run is named &quot;master&quot;.
Declarative doesn’t support that kind of general conditional behavior.
Instead, it provides a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#when&quot;&gt;&lt;code&gt;when&lt;/code&gt; directive&lt;/a&gt;
that can be added to &lt;code&gt;stage&lt;/code&gt; sections.
The &lt;code&gt;when&lt;/code&gt; directive supports several types of conditions, including a &lt;code&gt;branch&lt;/code&gt; condition,
where the stage will run when the branch name matches the specified pattern.
That is exactly what we need here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stages {
    &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        when {
            branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
        steps {
             echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Placeholder for deploy steps.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we run our Pipeline with this new stage, we get the following outputs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Log output for &lt;em&gt;feature/test&lt;/em&gt; branch&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;...
Finished Sauce Labs test publisher
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy)
Stage 'Deploy' skipped due to when conditional
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Log output for &lt;em&gt;master&lt;/em&gt; branch&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;...
Finished Sauce Labs test publisher
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Deploy)
[Pipeline] echo
Placeholder for deploy steps.
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say, our latest Declarative Pipeline turned out extremely well.
I think someone coming from Freestyle jobs, with little to no experience with Pipeline or Groovy,
would still be able to look at this Declarative Pipeline and make sense of what it is doing.
We’ve added new functionality to our Pipeline while making it easier to understand
and maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope you’ve learned as much as I have during this blog series.
I’m excited to see that even in the the short time since Declarative 1.0 was released,
teams are already using it in make improvements similar to what those we’ve covered in this series.
Thanks for reading!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/xunit&quot;&gt;xUnit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/sauce-ondemand&quot;&gt;Sauce OnDemand&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline Syntax Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/declarative/sauce&quot;&gt;Pipeline source for this post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/jenkins-pipeline-shared/tree/blog/declarative/sauce&quot;&gt;Pipeline Shared Library source for this post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/15/pipeline-editor-preview/</id>
<title>Say Hello to the Blue Ocean Pipeline Editor</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-15T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/15/pipeline-editor-preview/" />
<author>
<name>jamesdumay</name>
</author>
<category term="blueocean"></category>
<category term="editor"></category>
<category term="declarative"></category>
<category term="pipeline"></category>
<summary>
Back in September 2016 we announced the availability of the Blue Ocean beta
and the forthcoming Visual Pipeline Editor. We are happy to announce that you can try
the Pipeline Editor preview release today.


What is it?

The Visual Pipeline Editor is the simplest way for anyone wanting to get started with
creating Pipelines in Jenkins. It&#8217;s also a great way for advanced Jenkins users
to start adopting pipeline. It allows developers to break up their pipeline into different
 stages and parallelize tasks that can occur at the same time - graphically.
 The rest is up to you.


A pipeline you create visually will produce a Declarative...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/&quot;&gt;Back in September 2016 we announced the availability of the Blue Ocean beta&lt;/a&gt;
and the forthcoming Visual Pipeline Editor. We are happy to announce that you can try
the Pipeline Editor preview release today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-is-it&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-it&quot;&gt;&lt;/a&gt;What is it?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Visual Pipeline Editor is the simplest way for anyone wanting to get started with
creating Pipelines in Jenkins. It’s also a great way for advanced Jenkins users
to start adopting pipeline. It allows developers to break up their pipeline into different
 stages and parallelize tasks that can occur at the same time - graphically.
 The rest is up to you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A pipeline you create visually will produce a &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline&lt;/a&gt; Jenkinsfile for you and
 the Jenkinsfile is stored within a Git repository where it is versioned with your application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not sure what a Jenkins Pipeline or a Jenkinsfile is, why not check out the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/&quot;&gt;new guided tour&lt;/a&gt; to learn more about it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/blueocean/editor-1.png&quot; alt=&quot;The Editor&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-are-we-doing-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-are-we-doing-next&quot;&gt;&lt;/a&gt;What are we doing next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are working hard to provide feature parity between the Declarative Pipeline syntax and the visual editor. The next phase is to integrate the editor into Blue Ocean so that you don’t have to leave the UI and commit the Jenkinsfile to your repository to complete authoring your pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Blue Ocean, you will be able to edit a &lt;code&gt;Jenkinsfile&lt;/code&gt;
for a branch directly from within the user interface using the Visual Pipeline Editor. When you are done authoring your pipeline, the pipeline definition will be saved back to your repository as a &lt;code&gt;Jenkinsfile&lt;/code&gt;. You can edit the Pipeline again using the Visual Editor or from your favorite text editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are hoping to deliver this level of integration into Blue Ocean and the
Visual Pipeline Editor over the next few months, so be sure to check regularly for updates in
the Jenkins plugin manager.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;get-the-preview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-the-preview&quot;&gt;&lt;/a&gt;Get the Preview&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Visual Pipeline Editor is available in preview today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try it out today:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;code&gt;Blue Ocean beta&lt;/code&gt; and &lt;code&gt;Blue Ocean Pipeline Editor&lt;/code&gt; from the Jenkins plugin manager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;code&gt;Open Blue Ocean&lt;/code&gt; button and then the &lt;code&gt;Pipeline Editor&lt;/code&gt; in the main navigation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking forward to your feedback to help make the Visual Pipeline Editor
the easiest way to get started with Jenkins Pipeline. To report bugs or to
request features &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean#join-the-community&quot;&gt;please follow the instructions on the project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And don’t forget to join us on our Gitter community chat &lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://gitter.im/jenkinsci/blueocean-plugin?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/jenkinsci/blueocean-plugin.svg&quot; alt=&quot;blueocean plugin&quot; /&gt;&lt;/a&gt;&lt;/span&gt;
- drop by and say hello!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/15/declarative-notifications/</id>
<title>Declarative Pipeline: Notifications and Shared Libraries</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-15T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/15/declarative-notifications/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="declarative"></category>
<category term="plugins"></category>
<category term="notifications"></category>
<category term="slack"></category>
<category term="hipchat"></category>
<category term="emailext"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Declare Your Pipelines!
Declarative Pipeline 1.0 is here!
This is the third post in a series showing some of the cool features of
Declarative Pipeline.


In the
previous post,
we converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages
and post sections.  In one of those post blocks, we included a placeholder for
sending notifications.


In this blog post, we&#8217;ll repeat what I did in
"Sending Notifications in Pipeline
but this time in Declarative Pipeline.
First we&#8217;ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.
Then we&#8217;ll refactor those calls into a single Step in a...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Declare Your Pipelines!&lt;/strong&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline 1.0 is here&lt;/a&gt;!
This is the third post in a series showing some of the cool features of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/10/declarative-html-publisher/&quot;&gt;previous post&lt;/a&gt;,
we converted a Scripted Pipeline to a Declarative Pipeline, adding descriptive stages
and &lt;code&gt;post&lt;/code&gt; sections.  In one of those &lt;code&gt;post&lt;/code&gt; blocks, we included a placeholder for
sending notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, we’ll repeat what I did in
&quot;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/&quot;&gt;Sending Notifications in Pipeline&lt;/a&gt;
but this time in Declarative Pipeline.
First we’ll integrate calls to notification services Slack, HipChat, and Email into our Pipeline.
Then we’ll refactor those calls into a single Step in a Shared Library, which
we’ll reuse as needed, keeping our &lt;code&gt;Jenkinsfile&lt;/code&gt; concise and understandable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The setup for this post is almost the same as
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/10/declarative-html-publisher/&quot;&gt;my previous Declarative Pipeline post&lt;/a&gt;.
I’ve used a new branch in
&lt;a href=&quot;https://github.com/bitwiseman/hermann&quot;&gt;my fork&lt;/a&gt; of the
&lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;Hermann project&lt;/a&gt;:
&lt;a href=&quot;https://github.com/bitwiseman/hermann/tree/blog/declarative/notifications&quot;&gt;&lt;code&gt;blog/declarative/notifications&lt;/code&gt;&lt;/a&gt;.
I’d already set up a Multibranch Pipeline and pointed it at my repository,
so the new branch will be picked up and built automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I still have my notification targets (where we’ll send notifications) that I created for the
&quot;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/&quot;&gt;Sending Notifications in Pipeline&lt;/a&gt;&quot; blog post.
Take a look at that post to review how I setup the
&lt;a href=&quot;https://plugins.jenkins.io/slack&quot;&gt;Slack&lt;/a&gt;,
&lt;a href=&quot;https://plugins.jenkins.io/hipchat&quot;&gt;HipChat&lt;/a&gt;,
and &lt;a href=&quot;https://plugins.jenkins.io/email-ext&quot;&gt;Email-ext&lt;/a&gt;
plugins to use those channels.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-notifications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-notifications&quot;&gt;&lt;/a&gt;Adding Notifications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ll start from the same Pipeline we had at the end of the previous post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This Pipeline works quite well, except it doesn’t print anything at the start of
the run, and that final &lt;code&gt;always&lt;/code&gt; directive only prints a message to the console log.
Let’s start by getting the notifications working like we did in the original post.
We’ll just copy-and-paste the three notification steps (with different parameters)
to get the notifications working for started, success, and failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
  &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;
  stages {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Start&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// send build started notifications&lt;/span&gt;
        slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FFFF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

        &lt;span style=&quot;color:#777&quot;&gt;// send to HipChat&lt;/span&gt;
        hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YELLOW&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          )

        &lt;span style=&quot;color:#777&quot;&gt;// send to email&lt;/span&gt;
        emailext (
            &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
          )
      }
    }
    &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;
  }
  &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;post&lt;/span&gt; {
    success {
      slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#00FF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

      hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GREEN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        )

      emailext (
          &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
        )
    }

    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failure&lt;/span&gt; {
      slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

      hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        )

      emailext (
          &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
          &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
        )
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/blueocean-notifications.png&quot; alt=&quot;Blue Ocean Run with Notifications&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;moving-notifications-to-shared-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moving-notifications-to-shared-library&quot;&gt;&lt;/a&gt;Moving Notifications to Shared Library&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new Pipeline works and our Declarative Pipeline sends notifications; however,
it is extremely ugly. In the original post using Scripted Pipeline,
I defined a single method that I called at both the start and end of the pipeline.
I’d like to do that here as well, but Declarative doesn’t support creating methods
that are accessible to multiple stages.
For this, we’ll need to turn to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;Shared Libraries&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Shared Libraries, as the name suggests,
let Jenkins Pipelines share code instead of copying it to each new project.
Shared Libraries are not specific to Declarative; they were released in their
current form several months ago and were useful in Scripted Pipeline.
Due to Declarative Pipeline’s lack of support for defining methods,
Shared Libraries take on a vital role.  They are the only supported way within
Declarative Pipeline to define methods or classes that we want to use in more than one stage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lack of support for defining methods that are accessible in multiple stages,
is a known issue, with at least two JIRA tickets:
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41335&quot;&gt;JENKINS-41335&lt;/a&gt; and
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41396&quot;&gt;JENKINS-41396&lt;/a&gt;.
For this series, I chose to stick to using features that are fully supported
in Declarative Pipeline at this time.
The internet has plenty of hacked together solutions that &lt;strong&gt;happen to work today&lt;/strong&gt;,
but I wanted to highlight current best practices and dependable solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-up-a-shared-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-up-a-shared-library&quot;&gt;&lt;/a&gt;Setting up a Shared Library&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve created a simple shared library repository for this series of posts, called
&lt;a href=&quot;https://github.com/bitwiseman/jenkins-pipeline-shared&quot;&gt;jenkins-pipeline-shared&lt;/a&gt;.
The shared library functionality has too many configuration options to cover in one post.
I’ve chosen to configure this library as a &quot;Global Pipeline Library,&quot;
accessible from any project on my Jenkins master.
To setup a &quot;Global Pipeline Library,&quot; I navigated to &quot;Manage Jenkins&quot; → &quot;Configure System&quot;
in the Jenkins web UI.
Once there, under &quot;Global Pipeline Libraries&quot;, I added a new library.
I then set the name to &lt;code&gt;bitwiseman-shared&lt;/code&gt;, pointed it at my repository,
and set the default branch for the library to &lt;code&gt;master&lt;/code&gt;,
but I’ll override that in my &lt;code&gt;Jenkinsfile&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/shared-library.png&quot; alt=&quot;Global Pipeline Library&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;moving-the-code-to-the-library&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moving-the-code-to-the-library&quot;&gt;&lt;/a&gt;Moving the Code to the Library&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding a Step to a library involves creating a file with the name of our Step,
adding our code to a &lt;code&gt;call()&lt;/code&gt; method inside that file,
and replacing the appropriate code in our &lt;code&gt;Jenkinsfile&lt;/code&gt; with the new Step calls.
Libraries can be set to load &quot;implicitly,&quot;
making their default branch automatically available to all Pipelines,
or they can be loaded manually using a &lt;code&gt;@Library&lt;/code&gt; annotation.
The branch for implicitly loaded libraries can also be overridden using the &lt;code&gt;@Library&lt;/code&gt; annotation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The minimal set of dependencies for &lt;code&gt;sendNotifications&lt;/code&gt; means we can
basically copy-and-paste the code from the original blog post.
We’ll check this change into a branch in the library named
&lt;code&gt;blog/declarative/notifications&lt;/code&gt;, the same as my branch in the &lt;code&gt;hermann&lt;/code&gt; repository.
This will let us make changes on the master branch later without breaking this example.
We’ll then use the &lt;code&gt;@Library&lt;/code&gt; directive to tell Jenkins to use that branch’s version
of the library with this Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#34b&quot;&gt;#!groovy&lt;/span&gt;
&lt;span style=&quot;color:#007&quot;&gt;@Library&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bitwiseman-shared@blog/declarative/notifications&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) _ &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/span&gt;

pipeline {
  agent {
    &lt;span style=&quot;color:#777&quot;&gt;// Use docker container&lt;/span&gt;
    docker {
      image &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ruby:2.3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
  options {
    &lt;span style=&quot;color:#777&quot;&gt;// Only keep the 10 most recent builds&lt;/span&gt;
    buildDiscarder(logRotator(&lt;span style=&quot;color:#606&quot;&gt;numToKeepStr&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
  }
  stages {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Start&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// send build started notifications&lt;/span&gt;
        sendNotifications &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// install required bundles&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// build&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }

      post {
        success {
          &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
          archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// run tests with coverage&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }

      post {
        success {
          &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
          publishHTML &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
              &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ]
        }
      }
    }
  }
  post {
    always {
      sendNotifications currentBuild.result
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;_&lt;/code&gt; here is intentional.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_annotation&quot;&gt;Java/Groovy Annotations&lt;/a&gt;
such as &lt;code&gt;@Library&lt;/code&gt; must be applied to an element.
That is often a &lt;code&gt;using&lt;/code&gt; statement, but that isn’t needed here so by convention we use an &lt;code&gt;_&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;vars/sendNotifications.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#34b&quot;&gt;#!/usr/bin/env groovy&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;/**
 * Send notifications based on build status string
 */&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;call&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; buildStatus = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  &lt;span style=&quot;color:#777&quot;&gt;// build status of null means successful&lt;/span&gt;
  buildStatus = buildStatus ?: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Default values&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; colorName = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; subject = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;buildStatus&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; summary = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;subject&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; details = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;buildStatus&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Override default values based on build status&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (buildStatus == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YELLOW&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FFFF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (buildStatus == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GREEN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#00FF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }

  &lt;span style=&quot;color:#777&quot;&gt;// Send notifications&lt;/span&gt;
  slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: colorCode, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: summary)

  hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: color, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: summary)

  emailext (
      &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bitwiseman@bitwiseman.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: subject,
      &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: details,
      &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/blueocean-notifications-finished.png&quot; alt=&quot;Global Pipeline Library&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/popups.png&quot; alt=&quot;HipChat and Slack Popups&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-15/mailcatcher.png&quot; alt=&quot;MailCatcher List&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we added notifications to our Declarative Pipeline.
We wanted to move our repetitive notification code into a method;
however, Declarative Pipeline prevented us from defining a method in our &lt;code&gt;Jenkinsfile&lt;/code&gt;.
Instead, with the help of the Shared Library feature,
we were able to define a &lt;code&gt;sendNotifications&lt;/code&gt; Step that we could call from our &lt;code&gt;Jenkinsfile&lt;/code&gt;.
This maintained the clarity of our Pipeline and will let us easily reuse this Step in other projects.
I was pleased to see how little the resulting Pipeline differed from where we started.
The changes were restricted to the start and end of the file with no reformatting elsewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next post, we’ll cover more about shared libraries and how to
run Sauce OnDemand with xUnit Reporting in Declarative Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline Syntax Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;Shared Library reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/hermann/tree/blog/declarative/notifications&quot;&gt;Pipeline source for this post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/jenkins-pipeline-shared/tree/blog/declarative/notifications&quot;&gt;Pipeline Shared Library source for this post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/10/declarative-html-publisher/</id>
<title>Declarative Pipeline: Publishing HTML Reports</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/10/declarative-html-publisher/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="declarative"></category>
<category term="plugins"></category>
<category term="ruby"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Declare Your Pipelines!
Declarative Pipeline 1.0 is here!
This is the second post in a series showing some of the cool features of
Declarative Pipeline.


In the
previous blog post,
we created a simple Declarative Pipeline.
In this blog post, we&#8217;ll go back and look at the Scripted Pipeline for the
Publishing HTML Reports in Pipeline blog post.
We&#8217;ll convert that Pipeline to Declarative syntax (including properties), go
into more detail on the post section, and then we&#8217;ll use the agent
directive to switch our Pipeline to run in Docker.


Setup


For this post, I&#8217;m going to use the
blog/add-declarative/html
branch of
my fork of the
hermann...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Declare Your Pipelines!&lt;/strong&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline 1.0 is here&lt;/a&gt;!
This is the second post in a series showing some of the cool features of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/07/declarative-maven-project/&quot;&gt;previous blog post&lt;/a&gt;,
we created a simple Declarative Pipeline.
In this blog post, we’ll go back and look at the Scripted Pipeline for the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/01/html-publisher-plugin/&quot;&gt;Publishing HTML Reports in Pipeline&lt;/a&gt; blog post.
We’ll convert that Pipeline to Declarative syntax (including &lt;code&gt;properties&lt;/code&gt;), go
into more detail on the &lt;code&gt;post&lt;/code&gt; section, and then we’ll use the &lt;code&gt;agent&lt;/code&gt;
directive to switch our Pipeline to run in Docker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup&quot;&gt;&lt;/a&gt;Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this post, I’m going to use the
&lt;a href=&quot;https://github.com/bitwiseman/hermann/tree/blog/declarative/html&quot;&gt;&lt;code&gt;blog/add-declarative/html&lt;/code&gt;&lt;/a&gt;
branch of
&lt;a href=&quot;https://github.com/bitwiseman/hermann&quot;&gt;my fork&lt;/a&gt; of the
&lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;hermann project&lt;/a&gt;.
I’ve set up a Multibranch Pipeline and pointed it at my repository
the same as did it previous post.
Also the same as before, I’ve set this Pipeline’s Git configuration to
automatically &quot;Clean after checkout&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time we already have a Pipeline checked in.
I’ll run it a few times to get a baseline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-10/scripted-build.png&quot; alt=&quot;Stage view&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-10/scripted-rcov.png&quot; alt=&quot;RCov Report&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;converting-to-declarative&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#converting-to-declarative&quot;&gt;&lt;/a&gt;Converting to Declarative&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s start by converting the Scripted Pipeline straight to Declarative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent any &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;
  options {
    &lt;span style=&quot;color:#777&quot;&gt;// Keep the 10 most recent builds&lt;/span&gt;
    buildDiscarder(logRotator(&lt;span style=&quot;color:#606&quot;&gt;numToKeepStr&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)) &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/span&gt;
  }
  stages {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/span&gt;
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// install required gems&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// build and run tests with coverage&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
        archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
        publishHTML &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
            &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
          ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;properties([[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BuildDiscarderProperty&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;strategy&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;LogRotator&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;numToKeepStr&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]]) &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/span&gt;

node { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/span&gt;
  stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// Checkout&lt;/span&gt;
    checkout scm &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// install required gems&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// build and run tests with coverage&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
    archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
    publishHTML [
        &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      ]

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Select where to run this Pipeline, in this case &quot;any&quot; agent, regardless of label.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declarative automatically performs a checkout of source code on the agent,
whereas Scripted Pipeline users must explicitly call &lt;code&gt;checkout scm&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Set the Pipeline option to preserve the ten most recent runs.
This overrides the default behavior from the Multibranch parent of this Pipeline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the &quot;Build&quot; stage.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-10/declarative-build.png&quot; alt=&quot;Stage view&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have this Pipeline in Declarative form, let’s take a minute to do a
little clean up.  We’ll split out the &lt;code&gt;bundle&lt;/code&gt; actions a little more and move
steps into logically grouped stages.  Rather than having one monolithic &quot;Build&quot;
stage, we’ll have details for each stage.  As long as we’re prettying things
up, let’s switch to using &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean/&quot;&gt;Blue Ocean&lt;/a&gt; to view our
builds, as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent any
  options {
    &lt;span style=&quot;color:#777&quot;&gt;// Keep the 10 most recent builds&lt;/span&gt;
    buildDiscarder(logRotator(&lt;span style=&quot;color:#606&quot;&gt;numToKeepStr&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
  }
  stages {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// install required gems&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// build&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
        archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// run tests with coverage&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
        publishHTML &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
            &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
          ]
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-10/declarative-stages.png&quot; alt=&quot;Blue Ocean View&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using-code-post-code-sections&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#using-code-post-code-sections&quot;&gt;&lt;/a&gt;Using &lt;code&gt;post&lt;/code&gt; sections&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This looks pretty good, but if we think about it
the &lt;code&gt;archive&lt;/code&gt; and &lt;code&gt;publishHTML&lt;/code&gt; steps are really post-stage actions.
They should only occur when the rest of their stage succeeds.
As our Pipeline gets more complex we might need to add actions that always happen
even if a stage or the Pipeline as a whole fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Scripted Pipeline, we would use &lt;code&gt;try-catch-finally&lt;/code&gt;,
but we cannot do that in Declarative.
One of the defining features of the Declarative Pipeline
is that it does not allow script-based control structures
such as &lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;if-then-else&lt;/code&gt; blocks, or &lt;code&gt;try-catch-finally&lt;/code&gt; blocks.
Of course, internally Step implementations can still contain whatever conditional logic they want,
but the Declarative Pipeline cannot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of free-form conditional logic,
Declarative Pipeline provides a set of Pipeline-specific controls:
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#when&quot;&gt;&lt;code&gt;when&lt;/code&gt; directives&lt;/a&gt;, which we’ll look at in
a later blog post in this series, control whether to execute the steps in a stage,
and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#post&quot;&gt;&lt;code&gt;post&lt;/code&gt; sections&lt;/a&gt;
control which actions to take based on result of a single stage
or a whole Pipeline.  &lt;code&gt;post&lt;/code&gt; supports a number of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#post-conditions&quot;&gt;run conditions&lt;/a&gt;,
including &lt;code&gt;always&lt;/code&gt; (execute no matter what) and &lt;code&gt;changed&lt;/code&gt;
(execute when the result differs from previous run).
We’ll use &lt;code&gt;success&lt;/code&gt; to run &lt;code&gt;archive&lt;/code&gt; and &lt;code&gt;publishHTML&lt;/code&gt; when their respective stages complete.
We’ll also use an &lt;code&gt;always&lt;/code&gt; block with a placeholder for sending notifications,
which I’ll implement in the next blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent any
  options {
    &lt;span style=&quot;color:#777&quot;&gt;// Only keep the 10 most recent builds&lt;/span&gt;
    buildDiscarder(logRotator(&lt;span style=&quot;color:#606&quot;&gt;numToKeepStr&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
  }
  stages {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// install required gems&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// build&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }

      post {
        success {
          &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
          archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
      }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      steps {
        &lt;span style=&quot;color:#777&quot;&gt;// run tests with coverage&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }

      post {
        success {
          &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
          publishHTML &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
              &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
              &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ]
        }
      }
    }
  }
  post {
    always {
      echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Send notifications for result: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.result&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;switching-code-agent-code-to-run-in-docker&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#switching-code-agent-code-to-run-in-docker&quot;&gt;&lt;/a&gt;Switching &lt;code&gt;agent&lt;/code&gt; to run in Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;agent&lt;/code&gt; can actually accept
&lt;a href=&quot;link:/doc/book/pipeline/syntax/#agent-parameters&quot;&gt;several other parameters&lt;/a&gt; instead of &lt;code&gt;any&lt;/code&gt;.
We could filter on &lt;code&gt;label &quot;some-label&quot;&lt;/code&gt;, for example,
which would be the equivalent of &lt;code&gt;node ('some-label')&lt;/code&gt; in Scripted Pipeline.
However, &lt;code&gt;agent&lt;/code&gt; also lets us just as easily switch to using a Docker container,
which replaces a more complicated set of changes in Scripted Pipeline:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
  agent {
    &lt;span style=&quot;color:#777&quot;&gt;// Use docker container&lt;/span&gt;
    docker {
      image &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ruby:2.3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
  &lt;span style=&quot;color:#777&quot;&gt;/* ... unchanged ... */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I needed to, I could add a &lt;code&gt;label&lt;/code&gt; filter under &lt;code&gt;docker&lt;/code&gt;
to select a node to host the Docker container.
I already have Docker available on all my agents, so I don’t need &lt;code&gt;label&lt;/code&gt; -
this works as is.
As you can see below, the Docker container spins up at the start of the run
and the pipeline runs inside it.  Simple!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-10/declarative-docker.png&quot; alt=&quot;Docker Container Started&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first glance, the Declarative Pipeline’s removal of control structures seems
like it would be too constrictive.  However, it replaces those structures with
facilities like the &lt;code&gt;post&lt;/code&gt; section, that give us reasonable control over the
flow our our Pipeline while still improving readability and maintainability.
In the next blog post, we’ll add notifications to this pipeline
and look at how to use Shared Libraries with Declarative
Pipeline to share code and keep Pipelines easy to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline Syntax Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/hermann/tree/blog/declarative/html&quot;&gt;Pipeline source for this post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/10/blueocean-devlog-feb2/</id>
<title>Blue Ocean Dev Log: February Week #2</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/10/blueocean-devlog-feb2/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
We&#8217;re counting down the weeks until
Blue Ocean
1.0, which is planned for the end of March. If you hadn&#8217;t picked up on the hint
in my
previous post,
most of the Blue Ocean development team is in Australia, where it is currently
the middle of summer. As I write this it is about 1000 degrees outside.
Emergency measures such as air-conditioning and beer have been deployed in
order to continue Blue Ocean development.


This week featured a new beta with the
SCM API
changes; many bug fixes, and some version bumps went out in beta 22. We also
got some fresh new designs coming soon, though not in time for beta...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’re counting down the weeks until
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
1.0, which is planned for the end of March. If you hadn’t picked up on the hint
in my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/blueocean-devlog-feb/&quot;&gt;previous post&lt;/a&gt;,
most of the Blue Ocean development team is in Australia, where it is currently
the middle of summer. As I write this it is about 1000 degrees outside.
Emergency measures such as air-conditioning and beer have been deployed in
order to continue Blue Ocean development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week featured a new beta with the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/06/scm-api-2-take2/&quot;&gt;SCM API&lt;/a&gt;
changes; many bug fixes, and some version bumps went out in beta 22. We also
got some fresh new designs coming soon, though not in time for beta 22.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/new-design-overview.png&quot; alt=&quot;Overview&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some development highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Beta 22 went out featuring the new
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-plugin/commit/b8c8fb1080117f1c0448b0cfdb831543a109f4f8&quot;&gt;SCM API&lt;/a&gt;
with better use of GitHub API rate limits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A fix for publishing of
&lt;a href=&quot;https://plugins.jenkins.io/pubsub-light&quot;&gt;Server Side Events&lt;/a&gt;
that made one CPU spin up to 100% was fixed (not good unless you want to heat up
your room)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some new refinements to the design merged to the master branch (see images below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beta 22 featured the 1.0 version of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-plugin/commit/99524c36afedfb11150ac20d26c6b1d4e01b714a&quot;&gt;Australian translation&lt;/a&gt;
was added; really critical stuff, I know..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Acceptance Test Harness (ATH) was stabilised a bit and it now covers
creating Pipelines from Git, which we talked about in
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/27/blueocean-dev-log-jan4/&quot;&gt;late January&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://plugins.jenkins.io/blueocean-pipeline-editor&quot;&gt;Visual Pipeline Editor&lt;/a&gt; was released to the main Update Center
as a preview release, ready to play with!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some small performance improvements&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m looking forward to those fancy new designs making their way into an
upcoming release too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/new-design-success.png&quot; alt=&quot;Successful Pipeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/new-design-failure.png&quot; alt=&quot;Failing Pioeline&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lovely! Hopefully you see more green than I do…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyways, up next for Blue Ocean:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creation of Pipelines from GitHub, including auto-discovery of new Pipelines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Closer to a &quot;release candidate&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working on filtering the activity view for &quot;per branch&quot; views&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better reporting of durations of stages, steps, and runs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/08/jenkins-datadog-plugin/</id>
<title>Monitor Jenkins jobs with the Datadog plugin</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/08/jenkins-datadog-plugin/" />
<author>
<name>echang26</name>
</author>
<category term="plugins"></category>
<category term="monitoring"></category>
<summary>
This is a guest post by Emily Chang, Technical Author at Datadog. A modified version of this article was originally posted on the
Datadog blog.






If you&#8217;re using Jenkins to continuously integrate changes into your projects, it&#8217;s helpful to be able to quickly identify build failures and assess their impact on other components of your stack.


Datadog&#8217;s plugin helps users monitor and alert on the performance of their Jenkins builds, right alongside the rest of their infrastructure and applications.


As shown in the out-of-the-box dashboard below, the Datadog plugin provides a bird&#8217;s-eye view of job history and trends. You can use Datadog to:




Set alerts...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by Emily Chang, Technical Author at Datadog. A modified version of this article was originally posted on the
&lt;a href=&quot;https://datadoghq.com/blog/monitor-jenkins-datadog&quot;&gt;Datadog blog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re using Jenkins to continuously integrate changes into your projects, it’s helpful to be able to quickly identify build failures and assess their impact on other components of your stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Datadog’s plugin helps users monitor and alert on the performance of their Jenkins builds, right alongside the rest of their infrastructure and applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As shown in the out-of-the-box dashboard below, &lt;a href=&quot;https://plugins.jenkins.io/datadog&quot;&gt;the Datadog plugin&lt;/a&gt; provides a bird’s-eye view of job history and trends. You can use Datadog to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set alerts for important build failures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify trends in build durations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correlate Jenkins events with performance metrics from other parts of your infrastructure in order to identify and resolve issues&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins-screenboard.png&quot; alt=&quot;Jenkins default dashboard in Datadog&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;track-jenkins-build-status-in-real-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#track-jenkins-build-status-in-real-time&quot;&gt;&lt;/a&gt;Track Jenkins build status in real-time&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you install the &lt;a href=&quot;https://plugins.jenkins.io/datadog&quot;&gt;Datadog plugin&lt;/a&gt;, Jenkins activities (when a build starts, fails, or succeeds) will start appearing in your &lt;a href=&quot;https://www.datadoghq.com/blog/filter-datadog-events-stream-pinpoint-events-infrastructure&quot;&gt;Datadog event stream&lt;/a&gt;. You will also see what percentage of builds failed within the same job, so that you can quickly spot which jobs are experiencing a higher rate of failure than others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins-event-stream.png&quot; alt=&quot;Jenkins events in Datadog event stream&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember to blacklist any jobs you don’t want to track by indicating them in your plugin configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Datadog’s out-of-the-box Jenkins dashboard includes a status widget that displays the count of all jobs that have run in the past day, grouped by success or failure. To explore further, you can also click on the widget to view the individual jobs that have failed or succeeded in the past day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/check-status-widget.png&quot; alt=&quot;Jenkins jobs tagged by result success or failure&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The dashboard also displays the proportion of successful vs. failed builds, along with the total number of job runs completed over the past four hours.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Datadog enables you to &lt;a href=&quot;http://docs.datadoghq.com/guides/eventcorrelation/&quot;&gt;correlate Jenkins events&lt;/a&gt; with application performance metrics to investigate the root cause of an issue. For example, the screenshot below shows that average CPU on the app servers increased sharply after a Jenkins build was completed and deployed (indicated by the pink bar). Your team can use this information as a starting point to investigate if code changes in the corresponding release may be causing issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/avgcpu_image.png&quot; alt=&quot;Jenkins build affects CPU graph&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;visualize-job-duration-metrics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#visualize-job-duration-metrics&quot;&gt;&lt;/a&gt;Visualize job duration metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every time a build is completed, the plugin collects the build duration as a metric that you can aggregate by job name or any other tag, and graph over time. In the screenshot below, we can view the average job durations in the past four hours, sorted in decreasing order:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins-job-durations-toplist.png&quot; alt=&quot;Jenkins job durations ranked in Datadog&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also graph and visualize trends in build durations for each job by using Datadog’s &lt;a href=&quot;https://www.datadoghq.com/blog/visualizing-trends-regression-lines&quot;&gt;&lt;code&gt;robust_trend()&lt;/code&gt; linear regression function&lt;/a&gt;, as shown in the screenshot below. This graph indicates which jobs' durations are trending longer over time, so that you can investigate if there appears to be a problem. If you’re experimenting with changes to your CI pipeline, consulting this graph can help you track the effects of those changes over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins-job-duration-trends.png&quot; alt=&quot;Jenkins build duration trends graph&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-tags-to-monitor-your-jenkins-jobs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-tags-to-monitor-your-jenkins-jobs&quot;&gt;&lt;/a&gt;Use tags to monitor your Jenkins jobs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tags add custom dimensions to your monitoring, so you can focus on what’s important to you right now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every Jenkins event, metric, and service check is auto-tagged with &lt;code&gt;job&lt;/code&gt;, &lt;code&gt;result&lt;/code&gt;, and &lt;code&gt;branch&lt;/code&gt; (if applicable). You can also enable the optional &lt;code&gt;node&lt;/code&gt; tag in the plugin settings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As of version 0.5.0, the &lt;a href=&quot;https://github.com/DataDog/jenkins-datadog-plugin/blob/master/CHANGELOG.md&quot;&gt;plugin supports custom tags&lt;/a&gt;. This update was developed by one of our open source contributors, &lt;a href=&quot;https://github.com/MadsNielsen&quot;&gt;Mads Nielsen&lt;/a&gt;. Many thanks to Mads for helping us implement this feature!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can create custom tags for the name of the application you’re building, your particular team name (e.g. &lt;code&gt;team=licorice&lt;/code&gt;), or any other info that matters to you. For example, if you have multiple jobs that perform nightly builds, you might want to create a descriptive tag that distinguishes them from other types of jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/tagging.png&quot; alt=&quot;add tags to jenkins datadog plugin&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As shown in the configuration settings above, you can add custom tags, formatted as &lt;code&gt;key=value&lt;/code&gt;, in two ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in a text file (saved in the workspace for the job)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in a list of properties in the text box&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;set-up-the-datadog-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set-up-the-datadog-plugin&quot;&gt;&lt;/a&gt;Set up the Datadog plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Datadog plugin requires Jenkins 1.580.1 or newer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jenkins, navigate to &lt;strong&gt;Manage Jenkins &amp;gt; Manage Plugins.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins_signup1.png&quot; alt=&quot;signup step 1&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Search for &lt;strong&gt;Datadog Plugin&lt;/strong&gt; and check the box to install it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins_signup2b.png&quot; alt=&quot;signup step 2&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jenkins, go to &lt;strong&gt;Manage Jenkins &amp;gt; Configure System.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins_signup3.png&quot; alt=&quot;signup step 3&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Scroll down to the &lt;strong&gt;Datadog Plugin&lt;/strong&gt; section, and paste your API key in the text box. You can copy this from the &lt;a href=&quot;https://app.datadoghq.com/account/login?next=%2Faccount%2Fsettings#api&quot;&gt;API Keys&lt;/a&gt; page of your Datadog account. Click &lt;strong&gt;Test Key&lt;/strong&gt; to confirm that the plugin recognizes your API key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-datadog-plugin/jenkins_signup4.png&quot; alt=&quot;signup step 4&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save your changes, and you’re all set!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-started&quot;&gt;&lt;/a&gt;Get started&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re already using Datadog, you can start monitoring Jenkins jobs by following the &lt;a href=&quot;https://app.datadoghq.com/account/settings#integrations/jenkins&quot;&gt;instructions here&lt;/a&gt; to download the Datadog plugin. If you’re not using Datadog yet, here’s a &lt;a href=&quot;https://app.datadoghq.com/signup&quot;&gt;14-day free trial&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/07/gsoc2017-announcement/</id>
<title>Google Summer Of Code 2017: Call for mentors</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/07/gsoc2017-announcement/" />
<author>
<name>oleg-nenashev</name>
</author>
<category term="gsoc"></category>
<category term="events"></category>
<category term="general"></category>
<category term="gsoc2017"></category>
<summary>
On behalf of the GSoC Org Admin team I am happy to announce that we are going to apply to
Google Summer of Code (GSoC) again this year.
In GSoC high-profile students work in open-source projects for several months under mentorship of organization members.


We are looking for mentors and project ideas.
So yes, we are looking for you :)


Conditions


As a mentor, you will be asked to:




lead the project in the area of their interest


actively participate in the project during student selection, community bonding and coding phases (March - August)


work in teams of 2+ mentors per 1 each student


dedicate a consistent and significant amount...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On behalf of the GSoC Org Admin team I am happy to announce that we are going to apply to
&lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code (GSoC) again this year&lt;/a&gt;.
In GSoC high-profile students work in open-source projects for several months under mentorship of organization members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for mentors and project ideas.
So yes, we are looking for you :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conditions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conditions&quot;&gt;&lt;/a&gt;Conditions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a mentor, you will be asked to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lead the project in the area of their interest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;actively participate in the project during student selection, community bonding and coding phases (March - August)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;work in teams of 2+ mentors per 1 each student&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dedicate a consistent and significant amount of time, especially during the coding phase (&lt;em&gt;~5 hours&lt;/em&gt; per week in the team of two mentors)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mentorship does not require strong expertise in Jenkins plugin development.
The main objective is to guide students and to get them involved into the Jenkins community.
If your mentor team requires any specific expertise, GSoC org admins will do their best in order to find advisors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-do-you-get&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-do-you-get&quot;&gt;&lt;/a&gt;What do you get?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A student, who works within the area of your interest on full-time for several months&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Joint projects with Jenkins experts, lots of fun and ability to study something together&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limited edition of swags from Google and Jenkins project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maybe: Participation in GSoC Mentor Summit in California with expense coverage (depends on project results and per-project quotas)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#requirements&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;passionate about Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interested in being a mentor or advisor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ready to dedicate time &amp;amp;&amp;amp; have no major unavailability periods planned to this summer&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We expect mentors to be available by email during 75% of working days in the May-August timeframe&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your project idea is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;about code (though it may and likely should include some documentation and testing work)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;about Jenkins (plugins, core, infrastructure, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;potentially doable by a student in 3-4 months&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-to-apply&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-to-apply&quot;&gt;&lt;/a&gt;How to apply&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested, drop the Email to the Jenkins Developer mailing list with the &lt;em&gt;GSoC2017&lt;/em&gt; prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Briefly describe your project idea (a couple of sentences) and required qualifications from students. Examples: &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Google+Summer+Of+Code+2016#GoogleSummerOfCode2016-Projectideas&quot;&gt;GSoC2016&lt;/a&gt;, &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;GSoC2017 - current project ideas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you already have a co-mentor(s), please mention them&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having several project ideas is fine. Having no specific ideas is also fine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Disclaimer: We cannot guarantee that all projects happen, it depends on student application results and the number of project slots.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Jenkins GSoC Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Google+Summer+Of+Code+2016#GoogleSummerOfCode2016-Projectideas&quot;&gt;GSoC2016 project ideas&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc/gsoc2016&quot;&gt;GSoC2016 page&lt;/a&gt; (project results and more info)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/07/declarative-maven-project/</id>
<title>Declarative Pipeline for Maven Projects</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/07/declarative-maven-project/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="declarative"></category>
<category term="maven"></category>
<category term="java"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Declare Your Pipelines!
Declarative Pipeline 1.0 is here!
This is first in a series of blog posts that will show some of the cool features of
Declarative Pipeline.
For several of these posts, I&#8217;ll be revisiting some of my
previous posts
on using various plugins with (Scripted) Pipeline,
and seeing how those are implemented in Declarative Pipeline.


To start though, let&#8217;s get familiar with the basic structure of a Declarative Pipeline
by creating a simple Pipeline for a Maven-based Java project - the
Jenkins JUnit plugin.
We&#8217;ll create a minimal Declarative Pipeline,
add the settings needed to install Maven and the JDK,
and...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Declare Your Pipelines!&lt;/strong&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/&quot;&gt;Declarative Pipeline 1.0 is here&lt;/a&gt;!
This is first in a series of blog posts that will show some of the cool features of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline&lt;/a&gt;.
For several of these posts, I’ll be revisiting some of my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipeline-notifications/&quot;&gt;previous posts&lt;/a&gt;
on using various plugins with (Scripted) Pipeline,
and seeing how those are implemented in Declarative Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start though, let’s get familiar with the basic structure of a Declarative Pipeline
by creating a simple Pipeline for a Maven-based Java project - the
&lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;Jenkins JUnit plugin&lt;/a&gt;.
We’ll create a minimal Declarative Pipeline,
add the settings needed to install Maven and the JDK,
and finally we’ll actually run Maven to build the plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;set-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set-up&quot;&gt;&lt;/a&gt;Set up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Declarative, it is still possible to run Pipelines edited directly in the
Jenkins web UI, but one of the key features of &quot;Pipeline as Code&quot; is
checking-in and being able to track changes.  For this post, I’m going to use
the
&lt;a href=&quot;https://github.com/bitwiseman/junit-plugin/tree/blog/add-declarative-pipeline&quot;&gt;&lt;code&gt;blog/add-declarative-pipeline&lt;/code&gt;&lt;/a&gt;
branch of
&lt;a href=&quot;https://github.com/bitwiseman/junit-plugin&quot;&gt;my fork&lt;/a&gt; of the JUnit plugin.
I’m going to set up a Multi-branch Pipeline and point it at my repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-07/junit-config.png&quot; alt=&quot;JUnit Multi-branch Pipeline Configuration&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve also set this Pipeline’s Git configuration to automatically &quot;clean after
checkout&quot; and to only keep the ten most recent runs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;writing-a-minimal-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#writing-a-minimal-pipeline&quot;&gt;&lt;/a&gt;Writing a Minimal Pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As has been said before, Declarative Pipeline provides a more structured,
&quot;opinionated&quot; way to create Pipelines. I’m going to start by creating a minimal
Declarative Pipeline and adding it to my branch.  Below is a minimal Pipeline
(with annotations) that just prints a message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/span&gt;
    agent any &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/span&gt;
    stages { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/span&gt;
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/span&gt;
            steps { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/span&gt;
               echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;This is a minimal pipeline.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;&lt;/span&gt;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;
    checkout scm &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/span&gt;
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;&lt;/span&gt;
        echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;This is a minimal pipeline.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;All Declarative Pipelines start with a &lt;code&gt;pipeline&lt;/code&gt; section.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Select where to run this Pipeline, in this case &quot;any&quot; agent, regardless of label.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Declarative automatically performs a checkout of source code on the agent,
whereas Scripted Pipeline users must explicitly call &lt;code&gt;checkout scm&lt;/code&gt;,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;A Declarative Pipeline is defined as a series of stages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the &quot;Build&quot; stage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Each stage in a Declarative Pipeline runs a series of steps.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the &lt;code&gt;echo&lt;/code&gt; step to print a message in the Console Output.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are familiar with Scripted Pipeline, you can toggle the above
Declarative code sample to show the Scripted equivalent.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once I add the Pipeline above to my &lt;code&gt;Jenkinsfile&lt;/code&gt; and run &quot;Branch Indexing&quot;, my
Jenkins will pick it up and run run it.  We see that the Declarative Pipeline
has added stage called &quot;Declarative: Checkout SCM&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-07/junit-minimal.png&quot; alt=&quot;Minimal Declarative Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This a &quot;dynamic stage&quot;, one of several the kinds that Declarative Pipeline adds
as needed for clearer reporting.  In this case, it is a stage in which the
Declarative Pipeline automatically checkouts out source code on the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see above, we didn’t have to tell it do any of this,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Console Output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[Pipeline] node
Running on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/blog_add-declarative-pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Cloning the remote Git repository
{ ... truncated 20 lines ... }
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build)
[Pipeline] echo
This is a minimal pipeline
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline syntax is a little more verbose than the equivalent Scripted Pipeline,
but the added detail gives a clearer, more consistent view of what the Pipeline is supposed to do.
It also gives us a structure into which we can add more configuration details about this Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-tools-to-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-tools-to-pipeline&quot;&gt;&lt;/a&gt;Adding Tools to Pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next thing we’ll add in this Pipeline is a &lt;code&gt;tools&lt;/code&gt; section to let us use
Maven.  The &lt;code&gt;tools&lt;/code&gt; section is one of several sections we can add under
&lt;code&gt;pipeline&lt;/code&gt;, which affect the configuration of the rest of the Pipeline.  (We’ll
look at the others, including &lt;code&gt;agent&lt;/code&gt;, in later posts.) Each tool entry will
make whatever settings changes, such as updating &lt;code&gt;PATH&lt;/code&gt; or other environment
variables, to make the named tool available in the current pipeline.  It will
also automatically install the named tool if that tool is configured to do so
under &quot;Managing Jenkins&quot; → &quot;Global Tool Configuration&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
    agent any
    tools { &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/span&gt;
        maven &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Maven 3.3.9&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;
        jdk &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/span&gt;
    }
    stages {
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Initialize&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            steps {
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
                    echo &quot;PATH = ${PATH}&quot;
                    echo &quot;M2_HOME = ${M2_HOME}&quot;
                &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/span&gt;
            }
        }

        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            steps {
                echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;This is a minimal pipeline.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tools&lt;/code&gt; section for adding tool settings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure this Pipeline to use the Maven version matching &quot;Maven 3.3.9&quot;
(configured in &quot;Managing Jenkins&quot; → &quot;Global Tool Configuration&quot;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Configure this Pipeline to use the Maven version matching &quot;jdk8&quot;
(configured in &quot;Managing Jenkins&quot; → &quot;Global Tool Configuration&quot;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;These will show the values of &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;M2_HOME&lt;/code&gt; environment variables.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we run this updated Pipeline the same way we ran the first, we see that
the Declarative Pipeline has added another stage called &quot;Declarative: Tool
Install&quot;: In the console output, we see that during this particular stage &quot;Maven 3.3.9&quot; gets installed,
and the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;M2_HOME&lt;/code&gt; environment variables are set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-02-07/junit-tools.png&quot; alt=&quot;Declarative Pipeline with Tools Section&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Console Output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;{ ... truncated lines ... }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Tool Install)
[Pipeline] tool
Unpacking https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.3.9/apache-maven-3.3.9-bin.zip
to /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9
on osx_mbp
[Pipeline] envVarsForTool
[Pipeline] tool
[Pipeline] envVarsForTool
[Pipeline] }
[Pipeline] // stage
{ ... }
PATH = /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin:/Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9/bin:...
M2_HOME = /Users/bitwiseman/jenkins/agents/osx_mbp/tools/hudson.tasks.Maven_MavenInstallation/Maven_3.3.9
{ ... }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-a-maven-build&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-a-maven-build&quot;&gt;&lt;/a&gt;Running a Maven Build&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, running a Maven build is trivial.  The &lt;code&gt;tools&lt;/code&gt; section already added
Maven and JDK8 to the &lt;code&gt;PATH&lt;/code&gt;, all we need to do is call &lt;code&gt;mvn install&lt;/code&gt;.  It
would be nice if I could split the build and the tests into separate stages,
but Maven is famous for not liking when people do that, so I’ll leave it alone
for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, let’s load up the results of the build using the JUnit plugin,
however the version that was just built, sorry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
    agent any
    tools {
        maven &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Maven 3.3.9&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        jdk &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stages {
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Initialize&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            steps {
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
                    echo &quot;PATH = ${PATH}&quot;
                    echo &quot;M2_HOME = ${M2_HOME}&quot;
                &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;/span&gt;
            }
        }

        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            steps {
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn -Dmaven.test.failure.ignore=true install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;&lt;/span&gt;
            }
            post {
                success {
                    junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/surefire-reports/**/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;
                }
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node {
    checkout scm

    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; jdktool = tool &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;type&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;hudson.model.JDK&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; mvnHome = tool &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;/* Set JAVA_HOME, and special PATH variables. */&lt;/span&gt;
    &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;List&lt;/span&gt; javaEnv = [
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+MVN=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;jdktool&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin:&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;mvnHome&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;M2_HOME=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;mvnHome&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JAVA_HOME=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;jdktool&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    ]

    withEnv(javaEnv) {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Initialize&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
            echo &quot;PATH = ${PATH}&quot;
            echo &quot;M2_HOME = ${M2_HOME}&quot;
        &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;/span&gt;
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn -Dmaven.test.failure.ignore=true install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (e) {
            currentBuild.result = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Post&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt; || currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/surefire-reports/**/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;  &lt;span style=&quot;color:#777&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Call &lt;code&gt;mvn&lt;/code&gt;, the version configured by the &lt;code&gt;tools&lt;/code&gt; section will be first on the path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the maven build succeeded, archive the JUnit test reports for display in the Jenkins web UI.
We’ll discuss the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#post&quot;&gt;&lt;code&gt;post&lt;/code&gt; section&lt;/a&gt; in detail in the next blog post.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are familiar with Scripted Pipeline, you can toggle the above
Declarative code sample to show the Scripted equivalent.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is the console output for this last revision:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Console Output&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;{ ... truncated lines ... }
+ mvn install
[INFO] Scanning for projects...
[WARNING] The POM for org.jenkins-ci.tools:maven-hpi-plugin:jar:1.119 is missing, no dependency information available
[WARNING] Failed to build parent project for org.jenkins-ci.plugins:junit:hpi:1.20-SNAPSHOT
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building JUnit Plugin 1.20-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-hpi-plugin:1.119:validate (default-validate) @ junit ---
[INFO]
[INFO] --- maven-enforcer-plugin:1.3.1:display-info (display-info) @ junit ---
[INFO] Maven Version: 3.3.9
[INFO] JDK Version: 1.8.0_92 normalized as: 1.8.0-92
[INFO] OS Info: Arch: x86_64 Family: mac Name: mac os x Version: 10.12.3
[INFO]
{ ... }
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 03:25 min
[INFO] Finished at: 2017-02-06T22:43:41-08:00
[INFO] Final Memory: 84M/1265M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new Declarative syntax is a significant step forward for Jenkins Pipeline.
It trades some verbosity and constraints for much greater clarity and
maintainability.  In the coming weeks, I’ll be adding new blog posts
demonstrating various features of the Declarative syntax along with some recent
Jenkins Pipeline improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline&quot;&gt;Declarative Pipeline Syntax Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/junit&quot;&gt;Jenkins JUnit plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/06/scm-api-2-take2/</id>
<title>SCM API 2.0 Release Take 2</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-06T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/06/scm-api-2-take2/" />
<author>
<name>stephenc</name>
</author>
<category term="development"></category>
<category term="plugins"></category>
<summary>
In January we
announced the release of SCM API 2.0.
After the original release was published we identified four new high-impact
issues.  We decided to remove the new versions of the plugins from the update
center until those issues could be resolved. The issues have now been resolved
and the plugins are now available from the update center.


Summary for busy Jenkins Administrators


Upgrading should make multi-branch projects much better.  When you are ready to
upgrade you must ensure that you upgrade all the required plugins.  If you miss
some, just upgrade them and restart to fix the issue. And of course, it&#8217;s
always a good idea...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In January we
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/17/scm-api-2/&quot;&gt;announced the release of SCM API 2.0&lt;/a&gt;.
After the original release was published we identified four new high-impact
issues.  We decided to remove the new versions of the plugins from the update
center until those issues could be resolved. The issues have now been resolved
and the plugins are now available from the update center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-for-busy-jenkins-administrators&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary-for-busy-jenkins-administrators&quot;&gt;&lt;/a&gt;Summary for busy Jenkins Administrators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrading should make multi-branch projects much better.  When you are ready to
upgrade you must ensure that you upgrade all the required plugins.  If you miss
some, just upgrade them and restart to fix the issue. And of course, it’s
always a good idea to take a backup of your &lt;code&gt;JENKINS_HOME&lt;/code&gt; before upgrading any
plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the list below, version numbers in &lt;strong&gt;bold&lt;/strong&gt; indicate a change from the
original version in the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/17/scm-api-2/&quot;&gt;original announcement&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Folders Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;5.17&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;SCM API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Branch API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Git Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This depends on the exact release line of the Git plugin that you are using.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Following the 2.6.x release line: &lt;strong&gt;2.6.4&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following the 3.0.x release line (&lt;em&gt;recommended&lt;/em&gt;): &lt;strong&gt;3.0.4&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Mercurial Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.58 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;2.0.1&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;BitBucket Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Organization Folders Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.6&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Pipeline Multibranch Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;2.12&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the &lt;a href=&quot;https://plugins.jenkins.io/blueocean&quot;&gt;Blue Ocean plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Blue Ocean Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;1.0.0-b22&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other plugins that may require updating:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.84 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.25.0 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins &lt;strong&gt;and&lt;/strong&gt; you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After an upgrade you will see the data migration warning (see the screenshot in
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41608&quot;&gt;JENKINS-41608&lt;/a&gt; for an
example) this is normal and expected.  The unreadable data will be removed by
the next scan / index or can be removed manually using the &lt;em&gt;Discard Unreadable
Data&lt;/em&gt; button.  The warning will disappear on the next restart after the
unreadable data has been removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please update to the versions listed above. If you want to know more about the
issues and how they were resolved, see the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;analysis-of-the-issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#analysis-of-the-issues&quot;&gt;&lt;/a&gt;Analysis of the issues&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issues described below are resolved with these plugin releases:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Folders Plugin: &lt;strong&gt;5.17&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCM API Plugin: &lt;strong&gt;2.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branch API Plugin: &lt;strong&gt;2.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git Plugin: &lt;strong&gt;Either&lt;/strong&gt; &lt;strong&gt;2.6.4&lt;/strong&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;strong&gt;3.0.4&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Branch Source Plugin: &lt;strong&gt;2.0.1&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BitBucket Branch Source Plugin: &lt;strong&gt;2.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline Multibranch Plugin: &lt;strong&gt;2.12&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41121&quot;&gt;JENKINS-41121: GitHub Branch Source upgrade can cause a lot of rebuilds&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Migration of GitHub branches from 1.x to 2.x resulted in a change of the
implementation class used to identify branches.  Some other other bugs in
Branch API had been fixed and the combined effect resulted in a rebuild of all
GitHub Branches (not PRs) after an upgrade to GitHub Branch Source Plugin
2.0.0.  This rebuild was referred to as a &quot;build storm&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The SCM API plugin was enhanced to add an extension point that allows for a second round of data migration when upgrading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second round of data migration allows plugins implementing the SCM API contract to fix implementation class issues in context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Branch API plugin was enhanced to use this new extension point.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The GitHub Branch Source plugin was enhanced to provide an implementation of this extension point.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41255&quot;&gt;JENKINS-41255: Upgrading from a navigator that did not assign consistent source ids to a version that does assign consistent source ids causes a build storm on first scan&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The GitHub Branch Source and BitBucket Branch Source plugins in 1.x were not
assigning consistent IDs to multi-branch projects discovered in an Organization
Folder.  Both plugins were fixed in 2.0.0 to assign consistent IDs as a change
of ID would result in a rebuild of all projects.  What was missed is that the
very first scan of an Organization Folder after an upgrade will change the
randomly assigned ID assigned by the 1.x plugins into the consistent ID
assigned by the 2.0.0 plugins and consequently trigger a rebuild of all
branches. This rebuild was referred to as a &quot;build storm&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Branch API plugin was enhanced to detect the case where a branch source has
been changed but the change is only changing the ID.  When such changes are
identified, the downstream references of the ID are all updated which will
prevent a build storm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41313&quot;&gt;JENKINS-41313: On first index after upgrade to 2.0.0 all open PRs are rebuilt&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The BitBucket Branch Source 1.x did not store all the information about PRs
that is required by the SCM API 2.0.x model.  This could well have resulted in
subtle effects when manually triggering a rebuild of a merge PR if the PR’s
target branch has been modified after the PR branch was first detected by
Jenkins. Consequently, as the information is required, BitBucket Branch Source
plugin 2.0.0 populated the information with dummy values which would force the
correct information to be retrieved.  The side-effect is that all PR branches
would be rebuilt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The changes in SCM API 2.0.2 introduced to resolve JENKINS-41121 provided a path to resolve this issue without causing a rebuild of all PR branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The BitBucket Branch Source plugin was enhanced to provide an implementation of the new SCM API extension point that connects to BitBucket and retrieves the missing information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41124&quot;&gt;JENKINS-41124: Can’t get a human readable job name anymore&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During initial testing of the Branch API 2.0.0 release an issue was identified
with how Organization Folders handled unusual names.  None of the existing
implementations of the &lt;code&gt;SCMNavigator&lt;/code&gt; API could generate such unusual names due
to form validation on GitHub / BitBucket replacing unusual characters with &lt;code&gt;-&lt;/code&gt;
when creating a repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It would be irresponsible to rely on external services sanitizing their input
data for the correct operation of Organization Folders.  Consequently, in
Branch API 2.0.0 the names were all transformed into URL safe names, with the
original URLs still resolving to the original projects so that any existing
saved links would remain functional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quite a number of people objected to this change of URL scheme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Resolution:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There has been a convention in Jenkins that the on-disk storage structure for
jobs mirrors the URL structure. This is only a convention and there is nothing specific in the code that
mandates following the convention.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Folders Plugin was enhanced to allow for computed folders (where the item
names are provided by an external source) to provide a strategy to use when
generating the on-disk storage names as well as the URL component names for
the folder’s child items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Branch API plugin was enhanced to use this new strategy for name transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The net effect of this change is that the URLs remain the same as for 1.x but
the on-disk storage uses transformed names that are future proofed against
any new SCMNavigator implementations where the backing service allows names
that are problematic to use as filesystem directory names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Side-effect:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Branch API 2.0.0 approach handled the transformation of names by renaming the items using the Jenkins Item rename API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Branch API 2.0.2 approach does not rename the child items as it is only the on-disk storage location that is moved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that the Jenkins Item rename API cannot be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this time, the only known side-effect is in the  &lt;a href=&quot;https://plugins.jenkins.io/jobConfigHistory&quot;&gt;Job Configuration History&lt;/a&gt; plugin.
The configuration history of each child item will still be tracked going
forward after the upgrade.  The pre-upgrade configuration history is also
retained.  Because the Jenkins Item rename API cannot be used to flag the
configuration file location change, there is no association between the
pre-upgrade history chain and the post-upgrade history chain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/</id>
<title>Declarative Pipeline Syntax 1.0 is now available</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/03/declarative-pipeline-ga/" />
<author>
<name>hrmpw</name>
</author>
<category term="pipeline"></category>
<category term="blueocean"></category>
<summary>
This is a guest post by
Patrick Wolf,
Director of Product Management at
CloudBees
and contributor to
the Jenkins project.






I am very excited to announce the addition of
Declarative Pipeline syntax
1.0 to
Jenkins Pipeline.
We think this new syntax will enable everyone involved in DevOps, regardless of expertise,
to participate in the continuous delivery process. Whether creating, editing or reviewing
a pipeline, having a straightforward structure helps to understand and predict the
flow of the pipeline and provides a common foundation across all pipelines.


Pipeline as Code


Pipeline as Code was one of the pillars of the Jenkins 2.0 release and an
essential part of implementing continuous delivery (CD). Defining all of the
stages of...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by
&lt;a href=&quot;https://github.com/HRMPW&quot;&gt;Patrick Wolf&lt;/a&gt;,
Director of Product Management at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;
and contributor to
the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am very excited to announce the addition of
&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline syntax&lt;/a&gt;
1.0 to
&lt;a href=&quot;https://plugins.jenkins.io/workflow-aggregator&quot;&gt;Jenkins Pipeline.&lt;/a&gt;
We think this new syntax will enable everyone involved in DevOps, regardless of expertise,
to participate in the continuous delivery process. Whether creating, editing or reviewing
a pipeline, having a straightforward structure helps to understand and predict the
flow of the pipeline and provides a common foundation across all pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-as-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-as-code&quot;&gt;&lt;/a&gt;Pipeline as Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline as Code was one of the pillars of the Jenkins 2.0 release and an
essential part of implementing continuous delivery (CD). Defining all of the
stages of an application’s CD pipeline within a &lt;code&gt;Jenkinsfile&lt;/code&gt; and checking it
into the repository with the application code provides all of the benefits
inherent in source control management (SCM):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retain history of all changes to Pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rollback to a previous Pipeline version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View diffs and merge changes to the Pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test new Pipeline steps in branches&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the same Pipeline on a different Jenkins server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;getting-started-with-declarative-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#getting-started-with-declarative-pipeline&quot;&gt;&lt;/a&gt;Getting Started with Declarative Pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We recommend people begin using it for all their Pipeline definitions in Jenkins.
The plugin has been available for use and testing starting with the 0.1 release that was debuted at
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;Jenkins World&lt;/a&gt;
in September. Since then, it has already been installed in over 5,000 Jenkins
environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven’t tried Pipeline or have considered Pipeline in the past, I
believe this new syntax is much more approachable with an easier adoption curve
to quickly realize all of the benefits of Pipeline as Code. In addition, the
pre-defined structure of Declarative makes it possible to create and edit
Pipelines with a graphical user interface (GUI). The Blue Ocean team is
actively working on a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/20/blueocean-dev-log-jan2/#editor&quot;&gt;Visual Pipeline Editor&lt;/a&gt;
which will be included in an upcoming release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have already begun using Pipelines in Jenkins, I believe that this new
alternative syntax can help expand that usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The original syntax for defining Pipelines in Jenkins is a Groovy DSL that
allows most of the features of full
&lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;imperative programming&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This syntax is still fully supported and is now
referred to as &quot;Scripted Pipeline Syntax&quot; to distinguish it from &quot;Declarative
Pipeline Syntax.&quot; Both use the same underlying execution engine in Jenkins and
both will generate the same results in
&lt;a href=&quot;https://plugins.jenkins.io/pipeline-stage-view&quot;&gt;Pipeline Stage View&lt;/a&gt;
or Blue Ocean visualizations. All existing
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline/steps&quot;&gt;Pipeline steps&lt;/a&gt;,
Global Variables, and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/shared-libraries&quot;&gt;Shared Libraries&lt;/a&gt;
can be used in either. You can now create more cookie-cutter Pipelines and
extend the power of Pipeline to all users regardless of Groovy expertise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;declarative-pipeline-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declarative-pipeline-features&quot;&gt;&lt;/a&gt;Declarative Pipeline Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lint_%28software%29&quot;&gt;Syntax Checking&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Immediate runtime syntax checking with explicit error messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API endpoint for linting a &lt;code&gt;Jenkinsfile&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLI command to lint a &lt;code&gt;Jenkinsfile&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/docker-workflow&quot;&gt;Docker Pipeline integration&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run all stages in a single container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run each stage in a different container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy configuration&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quickly define parameters for your Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quickly define environment variables and credentials for your Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quickly define options (such as timeout, retry, build discarding) for your Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Round trip editing with the Visual Pipeline Editor (watch for preview release shortly).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conditional actions&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Send notifications or take actions depending upon success or failure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Skip stages based on branches, environment, or other Boolean expression.
release shortly)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-can-i-learn-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-can-i-learn-more&quot;&gt;&lt;/a&gt;Where Can I Learn More?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Be on the lookout for future blog posts detailing specific examples of
scenarios or features in Declarative Pipeline. Andrew Bayer, one of the primary
developers behind Declarative Pipeline, will be presenting at
&lt;a href=&quot;https://fosdem.org/2017/schedule/event/declarative_pipeline/&quot;&gt;FOSDEM&lt;/a&gt;
in Brussels, Belgium this weekend. We have also scheduled an online
&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/237317346/&quot;&gt;Jenkins Meetup (JAM)&lt;/a&gt;
later this month to demo the features of Declarative Pipeline and give a sneak
peek at the upcoming Blue Ocean Pipeline Editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the meantime, all the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/&quot;&gt;Pipeline documentation&lt;/a&gt;
has been updated to incorporate a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline/tour/hello-world&quot;&gt;Guided Tour&lt;/a&gt;,
and a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/syntax&quot;&gt;Syntax Reference&lt;/a&gt;
with numerous examples to help you get on your way to using Pipeline.  Simply
upgrade to the latest version, 2.5 or later of the Pipeline in Jenkins to
enable all of these great features.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/03/blueocean-devlog-feb/</id>
<title>Blue Ocean Dev Log: February Week #1</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/03/blueocean-devlog-feb/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
With only a couple of months left before
Blue Ocean
1.0, which is planned for the end of March, I have
been
highlighting
some of the good work being finished up by the developers hacking on Blue
Ocean.


This week was a grab bag of important behind-the-scenes features and finalising
the preview of the editor. The merge of the SCM API changes also made it in.
The editor has the new sheets style of editing (there will be blogs and more on
this in the next few weeks):





Some highlights:




Fix to async loading of resources like translations, so screens don&#8217;t
"flash" when they are loaded (i18n improvement)


Links in notifications can be configured...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With only a couple of months left before
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
1.0, which is planned for the end of March, I have
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/13/blueocean-dev-log-jan/&quot;&gt;been&lt;/a&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/20/blueocean-dev-log-jan2/&quot;&gt;highlighting&lt;/a&gt;
some of the good work being finished up by the developers hacking on Blue
Ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week was a grab bag of important behind-the-scenes features and finalising
the preview of the editor. The merge of the SCM API changes also made it in.
The editor has the new sheets style of editing (there will be blogs and more on
this in the next few weeks):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/editor-feb-1.png&quot; alt=&quot;Blue Ocean Editor&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix to async loading of resources like translations, so screens don’t
&quot;flash&quot; when they are loaded (i18n improvement)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Links in notifications can be configured to point to classic or
Blue Ocean screens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time reporting works better when browser clock is out of sync with
server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SECURITY-380 was backported into a small fix for those that aren’t
running the latest LTS (but you should ideally be running it)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCM API changes finally landed - this will be in beta 22 which should
hit the update centers soon. This should make things work better with
GitHub rate limits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beta 21 was released&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The editor reached &quot;preview&quot; release state ready for use with the newly
announced &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline/tour/hello-world&quot;&gt;Declarative Pipeline&lt;/a&gt; stuff.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/serenity.jpg&quot; alt=&quot;Serenity&quot; width=&quot;200&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, a reference to Australian pop culture had to be removed, sadly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up Next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some cosmetic changes around headers to make it much nicer and clearer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Favorite improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub Org-based Pipeline creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Editor available in the general update center&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beta 22 with SCM improvements and no more GitHub rate limit hassles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many fixes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements to the Acceptance Test Harness to reduce the number of false-positives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/01/security-updates/</id>
<title>Security updates for Jenkins core</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/01/security-updates/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
We just released security updates to Jenkins, versions 2.44 and 2.32.2, that fix a high severity and several medium and low severity issues.

For an overview of what was fixed, see the security advisory.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our LTS upgrade guide.
I strongly recommend you read these documents, as there are a few possible side effects of these fixes.

Subscribe to the jenkinsci-advisories mailing list to receive important notifications related to Jenkins security....
</summary>
<content type="html">
&lt;p&gt;We just released security updates to Jenkins, versions 2.44 and 2.32.2, that fix a high severity and several medium and low severity issues.&lt;/p&gt;

&lt;p&gt;For an overview of what was fixed, see the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2017-02-01&quot;&gt;security advisory&lt;/a&gt;.
For an overview on the possible impact of these changes on upgrading Jenkins LTS, see our &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/upgrade-guide/2.32/#upgrading-to-jenkins-lts-2-32-2&quot;&gt;LTS upgrade guide&lt;/a&gt;.
I strongly recommend you read these documents, as there are a few possible side effects of these fixes.&lt;/p&gt;

&lt;p&gt;Subscribe to the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/content/mailing-lists&quot;&gt;jenkinsci-advisories mailing list&lt;/a&gt; to receive important notifications related to Jenkins security.&lt;/p&gt;

</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/</id>
<title>Best Practices for Scalable Pipeline Code</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-02-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/02/01/pipeline-scalability-best-practice/" />
<author>
<name>svanoort</name>
</author>
<category term="pipeline"></category>
<category term="performance"></category>
<category term="scalability"></category>
<summary>
This is a guest post by Sam Van Oort,
Software Engineer at CloudBees and contributor to
the Jenkins project.






Today I&#8217;m going to show you best practices to write scalable and robust Jenkins Pipelines. This is drawn from a
combination of work with the internals of Pipeline and observations with large-scale users.


Pipeline code works beautifully for its intended role of automating
build/test/deploy/administer tasks.  As it is pressed into more complex roles
and unanticipated uses, some users hit issues.  In these cases, applying the
best practices can make the difference between:




A single master running
hundreds
of concurrent builds on low end hardware (4 CPU cores and 4 GB...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/svanoort&quot;&gt;Sam Van Oort&lt;/a&gt;,
Software Engineer at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; and contributor to
the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today I’m going to show you best practices to write scalable and robust Jenkins Pipelines. This is drawn from a
combination of work with the internals of Pipeline and observations with large-scale users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline code works beautifully for its intended role of automating
build/test/deploy/administer tasks.  As it is pressed into more complex roles
and unanticipated uses, some users hit issues.  In these cases, applying the
best practices can make the difference between:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A single master running
&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;hundreds
of concurrent builds&lt;/a&gt; on low end hardware (4 CPU cores and 4 GB of
heap)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running a couple dozen builds and bringing a master to its knees or
crashing it…​even with 16+ CPU cores and 20+ GB of heap!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been seen in the wild.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fundamentals&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fundamentals&quot;&gt;&lt;/a&gt;Fundamentals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand Pipeline behavior you must understand a few points about
how it executes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Except for the steps themselves, all of the Pipeline logic, the Groovy conditionals, loops, etc execute on the master. Whether simple &lt;em&gt;or&lt;/em&gt; complex! Even inside a &lt;code&gt;node&lt;/code&gt; block!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Steps&lt;/em&gt; may use executors to do work where appropriate, but each
step has a small on-master overhead too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipeline code is written as Groovy but the execution model is
radically transformed at compile-time to Continuation Passing Style
(CPS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This transformation provides valuable safety and durability
guarantees for Pipelines, but it comes with trade-offs:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Steps can invoke Java and execute fast and efficiently, but Groovy
is &lt;em&gt;much&lt;/em&gt; slower to run than normal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy logic requires far more memory, because an object-based
syntax/block tree is kept in memory.&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pipelines persist the program and its state frequently to be able to
survive failure of the master.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From these we arrive at a set of best practices to make pipelines more
effective.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;best-practices-for-Pipeline-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#best-practices-for-Pipeline-code&quot;&gt;&lt;/a&gt;Best Practices For Pipeline Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Think of Pipeline code as glue:&lt;/strong&gt; just enough Groovy code to connect
together the Pipeline steps and integrate tools, and no more.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;This makes code easier to maintain, more robust against bugs, and
reduces load on masters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep it simple:&lt;/strong&gt; limit the amount of complex logic embedded in the
Pipeline itself (similarly to a shell script) and avoid treating it as a
general-purpose programming language.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Pipeline restricts all variables to &lt;code&gt;Serializable&lt;/code&gt; types, so keeping
Pipeline logic simple helps avoid a &lt;code&gt;NotSerializableException&lt;/code&gt; - see
appendix at the bottom.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use trusted global libraries or &lt;code&gt;@NonCPS&lt;/code&gt;-annotated functions for slightly more complex work.&lt;/strong&gt;
This means more involved processing, logic, and transformations. This
lets you leverage additional Groovy &amp;amp; functional features for more
powerful, concise, and performant code.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;This still runs on masters so be mindful of complexity, but is much
faster than native Pipeline code because it doesn’t provide durability
and uses a faster execution model. Still, be mindful of the CPU cost and
offload to executors for complex work (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@NonCPS&lt;/code&gt; functions can use a much broader subset of the Groovy
language, such as iterators and functional features, which makes them
more terse and fast to write.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@NonCPS&lt;/code&gt; functions should not use Pipeline steps internally, however
you can store the result of a Pipeline step to a variable and use it
that as the input to a &lt;code&gt;@NonCPS&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gotcha:&lt;/strong&gt; It’s not guaranteed that use of a step will generate an
error (there is an open RFE to implement that), but you should not rely
on that behavior. You may see improper handling of exceptions, in
particular.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While normal Pipeline is restricted to serializable local variables
(see appendix at bottom), &lt;code&gt;@NonCPS&lt;/code&gt; functions can use more complex,
nonserializable types internally (for example regex matchers, etc). Parameters
and return types should still be Serializable, however.&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gotcha:&lt;/strong&gt; improper usages are not guaranteed to raise an error with
normal Pipeline (optimizations may mask the issue), but it is unsafe to
rely on this behavior.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prefer external scripts/tools for complex or CPU-expensive
processing&lt;/strong&gt; rather than Groovy language features. This offloads work
from the master to external executors, allowing for easy scale-out of
hardware resources. It is also generally easier to test because these
components can be tested in isolation without the full on-master
execution environment.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Many software vendors will provide easy command-line clients for
their tools in various programming languages. These are often robust,
performant, and easy to use. Plugins offer another option (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shell or batch steps are often the easiest way to integrate these
tools, which can be written in any language. For example: &lt;code&gt;sh “java -jar
client.jar $endPointUrl $inputData”&lt;/code&gt; for a Java client, or &lt;code&gt;sh “python
jiraClient.py $issueId $someParam”&lt;/code&gt; for a Python client.&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gotcha: especially avoid Pipeline XML or JSON parsing using Groovy’s &lt;code&gt;XmlSlurper&lt;/code&gt; and &lt;code&gt;JsonSlurper&lt;/code&gt;!  Strongly prefer command-line tools or scripts.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;The Groovy implementations are complex and as a result more brittle in Pipeline use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;XmlSlurper&lt;/code&gt; and &lt;code&gt;JsonSlurper&lt;/code&gt; can carry a high memory and CPU cost in pipelines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xmllint and xmlstartlet are command-line tools offering XML extraction via xpath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt; offers the same functionality for JSON&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These extraction tools may be coupled to curl or wget for fetching information from an HTTP API&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples of other places to use command-line tools:&lt;/p&gt;
&lt;div class=&quot;olist lowerroman&quot;&gt;
&lt;ol class=&quot;lowerroman&quot; type=&quot;i&quot;&gt;
&lt;li&gt;
&lt;p&gt;Templating large files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nontrivial integration with external APIs (for bigger vendors,
consider a Jenkins plugin if a quality offering exists)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simulations/complex calculations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business logic&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consider existing plugins for external integrations.&lt;/strong&gt; Jenkins has a
wealth of plugins, especially for source control, artifact management,
deployment systems, and systems automation. These can greatly reduce the
amount of Pipeline code to maintain. Well-written plugins may be
faster and more robust than Pipeline equivalents.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Consider both plugins and command-line clients (above) — one may be
easier than the other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugins may be of widely varying quality. Look at the number of installations and how frequently and recently updates appear in the changelog. Poorly-maintained plugins
with limited installations may actually be worse than writing a little
custom Pipeline code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a last resort, if there is a good-quality plugin that is not
Pipeline-enabled, it is &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/25/update-plugin-for-pipeline/&quot;&gt;fairly easy to write a Pipeline wrapper&lt;/a&gt; to
integrate it or write a custom step that will invoke it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assume things will go wrong:&lt;/strong&gt; don’t rely on workspaces being clean
of the remnants from previous executions, clean explicitly where needed.
Make use of timeouts and retry steps (that’s what they’re there for).&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Within a git repository, &lt;code&gt;git clean -fdx&lt;/code&gt; is a good way to
accomplish this and reduces the amount of SCM cloning&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DO use parameterized Pipelines and variables to make your Pipeline
scripts more reusable.&lt;/strong&gt; Passing in parameters is especially helpful for
handling different environments and should be preferred to applying
conditional lookup logic; however, try to limit parameterized pipelines invoking each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Try to limit business logic embedded in Pipelines.&lt;/strong&gt; To some extent
this is inevitable, but try to focus on tasks to complete instead,
because this yields more maintainable, reusable, and often more
performant Pipeline code.&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;One code smell that points to a problem is many hard-coded
constants. Consider taking advantage of the options above to refactor
code for better composability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For complex cases, consider using Jenkins integration options
(plugins, Jenkins API calls, invoking input steps externally) to offload
implementation of more complex business rules to an external system if
they fit more naturally there.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please, think of these as guidelines, not strict rules – Jenkins
Pipeline provides a great deal of power and flexibility, and it’s there
to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Breaking enough of these rules at scale can cause masters to fail by
placing an unsustainable load on them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For additional guidance, I also recommend
&lt;a href=&quot;https://www.cloudbees.com/need-speed-building-Pipelines-be-faster&quot;&gt;this
Jenkins World talk&lt;/a&gt;
on how to engineer Pipelines for speed and performance:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;appendix-serializable-vs.-non-serializable-types&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#appendix-serializable-vs.-non-serializable-types&quot;&gt;&lt;/a&gt;Appendix: Serializable vs. Non-Serializable Types:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To assist with Pipeline development, here are common serializable and
non-serializable types, to assist with deciding if your logic can be CPS
or should be in a &lt;code&gt;@NonCPS&lt;/code&gt; function to avoid issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Common Serializable Types (safe everywhere):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;All primitive types and their object wrappers: byte, boolean, int,
double, short, char&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enums&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrays of serializable types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ArrayLists and normal Groovy Lists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sets: HashSet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maps: normal Groovy Map, HashMap, TreeMap&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URLs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regex Patterns (compiled patterns)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Common non-Serializable Types (only safe in &lt;code&gt;@NonCPS&lt;/code&gt; functions):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Iterators: this is a common problem. You need to use C-style loop, i.e.
&lt;code&gt;for(int i=0; i&amp;lt;max; i++){&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regex Matchers (you can use the
built-in functions in String, etc, just not the Matcher itself)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; &lt;code&gt;JsonObject&lt;/code&gt;, &lt;code&gt;JsonSlurper&lt;/code&gt;, etc in Groovy 2+ (used in some 2.x+
versions of Jenkins).&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;This is due to an internal implementation change — earlier versions may serialize.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/27/blueocean-dev-log-jan4/</id>
<title>Blue Ocean Dev Log: January Week #4</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-27T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/27/blueocean-dev-log-jan4/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
As we get closer to
Blue Ocean
1.0, which is planned for the end of March, I have
started
highlighting
some of the good stuff that has been going on. This week was 10 steps forward, and about 1.5 backwards&#8230;&#8203;


There were two releases this week, b19 and b20. Unfortunately, b20 had to
be released shortly after b19 hit the Update Center as an incompatible API
change in a 3rd party plugin was discovered.


Regardless, the latest b20 has a lot of important improvements, and some
very nice new features.







A first cut of the "Create Pipeline" UX, seen above, allowing you to create Git
based Multibranch Pipelines like you have never...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we get closer to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
1.0, which is planned for the end of March, I have
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/13/blueocean-dev-log-jan/&quot;&gt;started&lt;/a&gt;
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/20/blueocean-dev-log-jan2/&quot;&gt;highlighting&lt;/a&gt;
some of the good stuff that has been going on. This week was 10 steps forward, and about 1.5 backwards…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were two releases this week, &lt;code&gt;b19&lt;/code&gt; and &lt;code&gt;b20&lt;/code&gt;. Unfortunately, &lt;code&gt;b20&lt;/code&gt; had to
be released shortly after &lt;code&gt;b19&lt;/code&gt; hit the Update Center as an incompatible API
change in a 3rd party plugin was discovered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regardless, the latest &lt;code&gt;b20&lt;/code&gt; has a &lt;strong&gt;lot&lt;/strong&gt; of important improvements, and some
very nice new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/pipeline-creation-flow.png&quot; alt=&quot;Creating a Pipeline in Blue Ocean&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A first cut of the &quot;Create Pipeline&quot; UX, seen above, allowing you to create Git
based &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/multibranch/&quot;&gt;Multibranch Pipelines&lt;/a&gt; like you have never seen before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling network disconnections from the browser to server (eg server
restart, network etc) gracefully with a nice UI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More precise time information for steps and running Pipelines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More information when a Pipeline is blocked on infrastructure, such as when
the Pipeline is waiting for an agent to become available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed a really embarrassing typo (a prize if you spot it).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test reports now include stdout and stderr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better support for parallel visualisation, such as when a &lt;code&gt;parallel&lt;/code&gt; step exists outside of a stage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Visual Editor also had another release, with the &quot;sheets&quot; visual component
and better validation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creation&quot;&gt;&lt;/a&gt;Creation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently this is hidden behind a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_toggle&quot;&gt;feature toggle&lt;/a&gt;,
to access append &lt;code&gt;?blueCreate&lt;/code&gt; to the URL in you browser, and then press the
&quot;New Pipeline&quot; button. Currently it lets you quickly create a Pipeline from
Git, add credentials, etc, in a very nice UX. More SCM types are being added to
support this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reconnect-disconnect&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reconnect-disconnect&quot;&gt;&lt;/a&gt;Reconnect/disconnect&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/connection-lost.png&quot; alt=&quot;Lost connection&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Blue Ocean is a very &quot;live&quot; style of UX, if your network becomes
unavailable, or the server is restarted, it is good to know in case you
were staring at the screen waiting for something to happen (don’t you have
anything better to do??). When this happens, now you get a polite message,
and then when the connection is restored, even if you are waiting for a
Pipeline run to finish, it will then notice this, and refresh things for
you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/connection-ok.png&quot; alt=&quot;Reconnected&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note the opacity changes to make it clear even if you don’t see the little
message. Very nice addition for those of us who work on a train far to often.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;up-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#up-next&quot;&gt;&lt;/a&gt;Up next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is up next:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SCM Api changes should land, making things much better for users of
GitHub, Bitbucket, and many more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating Pipelines from GitHub (including automatic discovery).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lots of fixes and enhancements in the Pipeline from all over the place&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More ATH &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; coverage against regressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More Visual Editor releases as Declarative Pipeline reaches version 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improvements to i18n&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was also a couple of &quot;alternative beta&quot; releases in the &quot;Experimental
Update Center&quot; to help test the new SCM API improvements for better use of
GitHub APIs (based on
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-plugin/pull/742&quot;&gt;this branch&lt;/a&gt;)
I do not recommend trying this branch unless you know what you are doing,
as this will migrate some data, but help testing it would be appreciated!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Acceptance Test Harness
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/20/blueocean-dev-log-jan2/</id>
<title>Blue Ocean Dev Log: January Week #3</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-20T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/20/blueocean-dev-log-jan2/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
As we get closer to
Blue Ocean
1.0, which is planned for the end of March, I have started
highlighting
some of the good stuff that has been going on, and this week was a very busy week.


A new Blue Ocean beta (b18) was released with:




Parametrized pipelines are now supported!


i18n improvements


Better support for matrix and the evil (yet somehow still used) Maven project type (don&#8217;t use it!)


SSE fixes for IE and Edge browsers


An alpha release of the Visual Editor for Jenkinsfiles on top of
Declarative Pipeline
has snuck into the "experimental" update center. Andrew will be talking
about Declarative Pipelines at
FOSDEM next week.




Parametrized Pipelines


You would know this...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we get closer to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
1.0, which is planned for the end of March, I have started
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/13/blueocean-dev-log-jan/&quot;&gt;highlighting&lt;/a&gt;
some of the good stuff that has been going on, and this week was a &lt;em&gt;very&lt;/em&gt; busy week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new Blue Ocean beta (&lt;strong&gt;b18&lt;/strong&gt;) was released with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parametrized pipelines are now supported!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i18n improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better support for matrix and the &lt;em&gt;evil&lt;/em&gt; (yet somehow still used) Maven project type (don’t use it!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Server-sent_events&quot;&gt;SSE&lt;/a&gt; fixes for IE and Edge browsers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An alpha release of the Visual Editor for Jenkinsfiles on top of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/12/declarative-pipeline-beta-2/&quot;&gt;Declarative Pipeline&lt;/a&gt;
has snuck into the &quot;experimental&quot; update center. Andrew will be talking
about Declarative Pipelines at
&lt;a href=&quot;https://fosdem.org/2017/schedule/event/declarative_pipeline/&quot;&gt;FOSDEM next week&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parametrized-pipelines&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parametrized-pipelines&quot;&gt;&lt;/a&gt;Parametrized Pipelines&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would know this if you followed
&lt;a href=&quot;https://twitter.com/ThorScherler&quot;&gt;Thorsten’s twitter account&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/start-with-parameters.png&quot; alt=&quot;Starting with parameters from @thorscherler&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That twitter account is mostly pics of Thorsten in running gear, but
occasionally he announces new features as they land.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you run a pipeline that requires parameters, it will popup a dialog
like this no matter where you run it from. Most input types are supported
(similar to input), with a planned extension point for custom input types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#editor&quot;&gt;&lt;/a&gt;Editor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean-dev-log/gui-editor.png&quot; alt=&quot;Pipeline Editor plugin&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A very-very early version of the
&lt;a href=&quot;https://github.com/jenkinsci/blueocean-pipeline-editor-plugin&quot;&gt;Blue Ocean Pipeline Editor plugin&lt;/a&gt;
that will set your hair on fire of the editor is in the experimental update
center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative pipelines are still not at version 1.0 status, but will be
shortly. This editor allows you to roundtrip Jenkinsfiles written in this
way, so they can be edited as text, or visually. The steps available are
discovered form the installed plugins. One to watch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, &lt;strong&gt;what’s next?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creation of Git Pipelines, and likely GitHub too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show parallel branches that aren’t in a stage visually&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show stderr/out in test reports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show more information when Jenkins is &quot;busy&quot;, such as when agents are coming online, in the Pipeline view&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/19/converting-conditional-to-pipeline/</id>
<title>Converting Conditional Build Steps to Jenkins Pipeline</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/19/converting-conditional-to-pipeline/" />
<author>
<name>lnewman</name>
</author>
<category term="pipeline"></category>
<category term="freestyle"></category>
<category term="plugins"></category>
<category term="conditional-build-step"></category>
<category term="tutorial"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Introduction


With all the new developments in
Jenkins Pipeline (and
Declarative Pipeline on the horizon),
it&#8217;s easy to forget what we did to create "pipelines" before
Pipeline.
There are number of plugins, some that have been around since the very beginning,
that enable users to create "pipelines" in Jenkins.
For example, basic job chaining worked well in many cases, and the
Parameterized Trigger plugin
made chaining more flexible.
However, creating chained jobs with conditional behavior was
still one of the harder things to do in Jenkins.


The
Conditional BuildStep plugin
is a powerful tool that has allowed Jenkins users to write Jenkins jobs with complex...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With all the new developments in
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline/&quot;&gt;Jenkins Pipeline&lt;/a&gt; (and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/12/declarative-pipeline-beta-2/&quot;&gt;Declarative Pipeline on the horizon&lt;/a&gt;),
it’s easy to forget what we did to create &quot;pipelines&quot; before
&lt;strong&gt;Pipeline&lt;/strong&gt;.
There are number of plugins, some that have been around since the very beginning,
that enable users to create &quot;pipelines&quot; in Jenkins.
For example, basic job chaining worked well in many cases, and the
&lt;a href=&quot;https://plugins.jenkins.io/parameterized-trigger&quot;&gt;Parameterized Trigger plugin&lt;/a&gt;
made chaining more flexible.
However, creating chained jobs with conditional behavior was
still one of the harder things to do in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://plugins.jenkins.io/conditional-buildstep&quot;&gt;Conditional BuildStep plugin&lt;/a&gt;
is a powerful tool that has allowed Jenkins users to write Jenkins jobs with complex conditional logic.
In this post, we’ll take a look at how we might converting Freestyle jobs that
include conditional build steps to Jenkins Pipeline.
Unlike Freestyle jobs, implementing conditional operations in Jenkins Pipeline is trivial,
but matching the behavior of complex conditional build steps will require a bit more care.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;graphical-programming&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#graphical-programming&quot;&gt;&lt;/a&gt;Graphical Programming&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Conditional BuildStep plugin lets users add conditional logic to Freestyle
jobs from within the Jenkins web UI.  It does this by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding two types of Conditional BuildStep (&quot;Single&quot; and &quot;Multiple&quot;) -
these build steps contain one or more other build steps to be run when the configured
condition is met&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adding a set of Condition operations -
these control whether the Conditional BuildStep execute the contained step(s)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leveraging the Token Macro facility -
these provide values to the Conditions for evaluation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the example below, this project will run the shell script step when the value of the
&lt;code&gt;REQUESTED_ACTION&lt;/code&gt; token equals &quot;greeting&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-01-19/freestyle-conditional-param.png&quot; alt=&quot;Freestyle Job Parameters&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-01-19/freestyle-conditional-config.png&quot; alt=&quot;Freestyle Job Conditional BuildStep&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s the output when I run this project with &lt;code&gt;REQUESTED_ACTION&lt;/code&gt; set to &quot;greeting&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;Run condition [Strings match] enabling prebuild for step [Execute shell]
Strings match run condition: string 1=[greeting], string 2=[greeting]
Run condition [Strings match] enabling perform for step [Execute shell]
[freestyle-conditional] $ /bin/sh -xe /var/folders/hp/f7yc_mwj2tq1hmbv_5n10v2c0000gn/T/hudson5963233933358491209.sh
+ echo 'Hello, bitwiseman!'
Hello, bitwiseman!
Finished: SUCCESS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And when I pass the value &quot;silence&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;Run condition [Strings match] enabling prebuild for step [Execute shell]
Strings match run condition: string 1=[silence], string 2=[greeting]
Run condition [Strings match] preventing perform for step [Execute shell]
Finished: SUCCESS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a simple example but the conditional step can contain any regular build step.
When combined with other plugins, it can control whether to send notifications,
gather data from other sources, wait for user feedback, or call other projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Conditional BuildStep plugin does a great job of leveraging strengths of
the Jenkins web UI, Freestyle jobs, and UI-based programming,
but it is also hampered by their limitations.
The Jenkins web UI can be clunky and confusing at times.
Like the steps in any Freestyle job, these conditional steps are only
stored and viewable in Jenkins.
They are not versioned with other product or build code and can’t be code reviewed.
Like any number of UI-based programming tools, it has to make trade-offs between clarity
and flexibility: more options or clearer presentation.
There’s only so much space on the screen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;converting-to-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#converting-to-pipeline&quot;&gt;&lt;/a&gt;Converting to Pipeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Pipeline, on the other hand, enables users to implement their pipeline as code.
Pipeline code can be written directly in the Jenkins Web UI or in any text editor.
It is a full-featured programming language,
which gives users access to much broader set of conditional statements
without the restrictions of UI-based programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, taking the example above, the Pipeline equivalent is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
    agent any
    parameters {
        choice(
            &lt;span style=&quot;color:#777&quot;&gt;// choices are a string of newline separated values&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// https://issues.jenkins-ci.org/browse/JENKINS-41180&lt;/span&gt;
            &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;greeting\nsilence&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;REQUESTED_ACTION&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    }

    stages {
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Speak&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            when {
                &lt;span style=&quot;color:#777&quot;&gt;// Only say hello if a &quot;greeting&quot; is requested&lt;/span&gt;
                expression { params.REQUESTED_ACTION == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;greeting&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; }
            }
            steps {
                echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Hello, bitwiseman!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;properties ([
    parameters ([
        choice (
            &lt;span style=&quot;color:#777&quot;&gt;// choices are a string of newline separated values&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// https://issues.jenkins-ci.org/browse/JENKINS-41180&lt;/span&gt;
            &lt;span style=&quot;color:#606&quot;&gt;choices&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;greeting\nsilence&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            name : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;REQUESTED_ACTION&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    ])
])

node {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Speak&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Only say hello if a &quot;greeting&quot; is requested&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (params.REQUESTED_ACTION == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;greeting&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Hello, bitwiseman!&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I run this project with &lt;code&gt;REQUESTED_ACTION&lt;/code&gt; set to &quot;greeting&quot;, here’s the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[Pipeline] node
Running on osx_mbp in /Users/bitwiseman/jenkins/agents/osx_mbp/workspace/pipeline-conditional
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Speak)
[Pipeline] echo
Hello, bitwiseman!
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I pass the value &quot;silence&quot;, the only change is &quot;Hello, bitwiseman!&quot; is not printed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some might argue that the Pipeline code is a bit harder to understand on first reading.
Others would say the UI is just as confusing if not more so.
Either way, the Pipeline representation is considerably more compact than the Jenkins UI presentation.
Pipeline also lets us add helpful comments, which we can’t do in the Freestyle UI.
And we can easily put this Pipeline in a &lt;code&gt;Jenkinsfile&lt;/code&gt; to be code-reviewed, checked-in, and versioned
along with the rest of our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conditions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conditions&quot;&gt;&lt;/a&gt;Conditions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous example showed the &quot;Strings match&quot; condition and its Pipeline equivalent.
Let’s look at couple more interesting conditions and their Jenkins Pipeline equivalents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;boolean-condition&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#boolean-condition&quot;&gt;&lt;/a&gt;Boolean condition&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might think that a boolean condition would be the simplest condition, but it isn’t.
Since it works with string values from tokens, the Conditional BuildStep plugin offers
a number of ways to indicate true or false.
Truth is a case insensitive match of one of the following:
&lt;code&gt;1&lt;/code&gt; (the number one), &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;YES&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;TRUE&lt;/code&gt;, &lt;code&gt;ON&lt;/code&gt; or &lt;code&gt;RUN&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline can duplicate these, but depending on the scenario we might consider
whether a simpler expression would suffice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    &lt;span style=&quot;color:#777&quot;&gt;// case insensitive regular expression for truthy values&lt;/span&gt;
    expression { &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; token ==~ &lt;span style=&quot;background-color:hsla(300,100%,50%,0.06)&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#808&quot;&gt;(?i)(Y|YES|T|TRUE|ON|RUN)&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;/span&gt; }
}
steps {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// case insensitive regular expression for truthy values&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (token ==~ &lt;span style=&quot;background-color:hsla(300,100%,50%,0.06)&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#808&quot;&gt;(?i)(Y|YES|T|TRUE|ON|RUN)&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;logical-or-of-conditions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#logical-or-of-conditions&quot;&gt;&lt;/a&gt;Logical &quot;OR&quot; of conditions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This condition wraps other conditions.
It takes their results as inputs and performs a logical &quot;or&quot; of the results.
The &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;NOT&lt;/code&gt; conditions do the same, performing their respective operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    &lt;span style=&quot;color:#777&quot;&gt;// A or B&lt;/span&gt;
    expression { &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; A || B }
}
steps {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// A or B&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (A || B) {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tokens&quot;&gt;&lt;/a&gt;Tokens&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tokens can be considerably more work than conditions.
There are more of them and they cover a much broader range of behaviors.
The previous example showed one of the simpler cases, accessing a build parameter,
where the token has a direct equivalent in Pipeline.
However, many tokens don’t have direct equivalents,
some take a parameters (adding to their complexity),
and some provide information that is simply not exposed in Pipeline yet.
So, determining how to migrate tokens needs to be done on case-by-case basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s look at a few examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;file-token&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#file-token&quot;&gt;&lt;/a&gt;&quot;FILE&quot; token&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Expands to the contents of a file. The file path is relative to the build workspace root.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;${FILE,path=&quot;PATH&quot;}&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This token maps directly to the &lt;code&gt;readFile&lt;/code&gt; step.
The only difference is the file path for &lt;code&gt;readFile&lt;/code&gt; is relative to the
current working directory on the agent, but that is the workspace root by default.
No problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    expression { &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pom.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).contains(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mycomponent&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) }
}
steps {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (readFile(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pom.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).contains(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mycomponent&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)) {
    &lt;span style=&quot;color:#777&quot;&gt;/* step */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;git_branch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#git_branch&quot;&gt;&lt;/a&gt;GIT_BRANCH&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Expands to the name of the branch that was built.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt; (descriptions omitted): &lt;em&gt;all&lt;/em&gt;, &lt;em&gt;fullName&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This information may or may not be exposed in Pipeline.  If you’re using the
&lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline Multibranch plugin&lt;/a&gt;
&lt;code&gt;env.BRANCH_NAME&lt;/code&gt; will give similar basic information, but doesn’t offer the parameters.
There are also
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-35230&quot;&gt;several&lt;/a&gt;
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-24141&quot;&gt;issues&lt;/a&gt;
filed around &lt;code&gt;GIT_*&lt;/code&gt; tokens in Pipeline.
Until they are addressed fully, we can follow the pattern shown in
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-examples/blob/master/pipeline-examples/gitcommit/gitcommit.groovy&quot;&gt;pipeline-examples&lt;/a&gt;,
executing a shell to get the information we need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Pipeline&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;GIT_BRANCH = sh(&lt;span style=&quot;color:#606&quot;&gt;returnStdout&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git rev-parse --abbrev-ref HEAD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;changes_since_last_success&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#changes_since_last_success&quot;&gt;&lt;/a&gt;CHANGES_SINCE_LAST_SUCCESS&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Displays the changes since the last successful build.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt; (descriptions omitted):
&lt;em&gt;reverse&lt;/em&gt;, &lt;em&gt;format&lt;/em&gt;, &lt;em&gt;changesFormat&lt;/em&gt;, &lt;em&gt;showPaths&lt;/em&gt;, &lt;em&gt;pathFormat&lt;/em&gt;,
&lt;em&gt;showDependencies&lt;/em&gt;, &lt;em&gt;dateFormat&lt;/em&gt;, &lt;em&gt;regex&lt;/em&gt;, &lt;em&gt;replace&lt;/em&gt;, &lt;em&gt;default&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not only is the information provided by this token not exposed in Pipeline,
the token has ten optional parameters, including format strings and regular expression
searches. There are a number of ways we might get similar information in Pipeline.
Each have their own particular limitations and ways they differ from the token output.
Then we’ll need to consider how each of the parameters changes the output.
If nothing else, translating this token is clearly beyond the scope of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;slightly-more-complex-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slightly-more-complex-example&quot;&gt;&lt;/a&gt;Slightly More Complex Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s do one more example that shows some of these conditions and tokens.
This time we’ll perform different build steps depending on what branch we’re building.
We’ll take two build parameters: &lt;code&gt;BRANCH_PATTERN&lt;/code&gt; and &lt;code&gt;FORCE_FULL_BUILD&lt;/code&gt;.
Based on &lt;code&gt;BRANCH_PATTERN&lt;/code&gt;, we’ll checkout a repository.
If we’re building on the &lt;code&gt;master&lt;/code&gt; branch or the user checked &lt;code&gt;FORCE_FULL_BUILD&lt;/code&gt;,
we’ll call three other builds in parallel
(&lt;code&gt;full-build-linux&lt;/code&gt;, &lt;code&gt;full-build-mac&lt;/code&gt;, and &lt;code&gt;full-build-windows&lt;/code&gt;),
wait for them to finish, and report the result.
If we’re not building on the &lt;code&gt;master&lt;/code&gt; branch and the user did not check &lt;code&gt;FORCE_FULL_BUILD&lt;/code&gt;,
we’ll print a message saying we skipped the full builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;freestyle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#freestyle&quot;&gt;&lt;/a&gt;Freestyle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s the configuration for Freestyle version.
(It’s pretty long.  Feel free to &lt;a href=&quot;#longer-pipeline&quot;&gt;skip down to the Pipeline version&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline version of this job determines the &lt;code&gt;GIT_BRANCH&lt;/code&gt; branch by
running a shell script that returns the current local branch name.
This means that the Pipeline version must checkout to a local branch (not a detached head).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Freestyle version of this job does not require a local branch, &lt;code&gt;GIT_BRANCH&lt;/code&gt; is set automatically.
However, to maintain functional parity, the Freestyle version of this job includes
&quot;Checkout to Specific Local Branch&quot; as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-01-19/freestyle-conditional-long-full.png&quot; alt=&quot;Longer Freestyle Job&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;longer-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#longer-pipeline&quot;&gt;&lt;/a&gt;Pipeline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s the equivalent Pipeline:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Freestyle version of this job is not stored in source control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In general, the Pipeline version of this job would be stored in source control,
would &lt;code&gt;checkout scm&lt;/code&gt;, and would run that same repository.
However, to maintain functional parity, the Pipeline version shown does a checkout
from source control but is not stored in that repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
    agent any
    parameters {
        string (
            &lt;span style=&quot;color:#606&quot;&gt;defaultValue&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            name : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BRANCH_PATTERN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
        booleanParam (
            &lt;span style=&quot;color:#606&quot;&gt;defaultValue&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            name : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FORCE_FULL_BUILD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    }

    stages {
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            steps {
                checkout([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GitSCM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;branches&lt;/span&gt;: [[&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BRANCH_PATTERN&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]],
                    &lt;span style=&quot;color:#606&quot;&gt;doGenerateSubmoduleConfigurations&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
                    &lt;span style=&quot;color:#606&quot;&gt;extensions&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;LocalBranch&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
                    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;submoduleCfg&lt;/span&gt;: &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;,
                    &lt;span style=&quot;color:#606&quot;&gt;userRemoteConfigs&lt;/span&gt;: [[
                        &lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bitwiseman_github&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                        &lt;span style=&quot;color:#606&quot;&gt;url&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/bitwiseman/hermann&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])
            }
        }

        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            when {
                expression {
                    GIT_BRANCH = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + sh(&lt;span style=&quot;color:#606&quot;&gt;returnStdout&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git rev-parse --abbrev-ref HEAD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; GIT_BRANCH == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; || params.FORCE_FULL_BUILD
                }
            }
            steps {
                &lt;span style=&quot;color:#777&quot;&gt;// Freestyle build trigger calls a list of jobs&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// Pipeline build() step only calls one job&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// To run all three jobs in parallel, we use &quot;parallel&quot; step&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel&lt;/span&gt;
                parallel (
                    &lt;span style=&quot;color:#606&quot;&gt;linux&lt;/span&gt;: {
                        build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                    },
                    &lt;span style=&quot;color:#606&quot;&gt;mac&lt;/span&gt;: {
                        build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                    },
                    &lt;span style=&quot;color:#606&quot;&gt;windows&lt;/span&gt;: {
                        build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                    },
                    &lt;span style=&quot;color:#606&quot;&gt;failFast&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;)
            }
        }
        stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build Skipped&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
            when {
                expression {
                    GIT_BRANCH = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + sh(&lt;span style=&quot;color:#606&quot;&gt;returnStdout&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git rev-parse --abbrev-ref HEAD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; !(GIT_BRANCH == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; || params.FORCE_FULL_BUILD)
                }
            }
            steps {
                echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Skipped full build.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;properties ([
    parameters ([
        string (
            &lt;span style=&quot;color:#606&quot;&gt;defaultValue&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            name : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BRANCH_PATTERN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
        booleanParam (
            &lt;span style=&quot;color:#606&quot;&gt;defaultValue&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;description&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            name : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FORCE_FULL_BUILD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    ])
])

node {
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        checkout([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GitSCM&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;branches&lt;/span&gt;: [[&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;BRANCH_PATTERN&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]],
            &lt;span style=&quot;color:#606&quot;&gt;doGenerateSubmoduleConfigurations&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;extensions&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;LocalBranch&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
            &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;submoduleCfg&lt;/span&gt;: &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;[]&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;userRemoteConfigs&lt;/span&gt;: [[
                &lt;span style=&quot;color:#606&quot;&gt;credentialsId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bitwiseman_github&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;url&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://github.com/bitwiseman/hermann&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])
    }

    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        GIT_BRANCH = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + sh(&lt;span style=&quot;color:#606&quot;&gt;returnStdout&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git rev-parse --abbrev-ref HEAD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).trim()
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (GIT_BRANCH == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;origin/master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; || params.FORCE_FULL_BUILD) {

            &lt;span style=&quot;color:#777&quot;&gt;// Freestyle build trigger calls a list of jobs&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// Pipeline build() step only calls one job&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// To run all three jobs in parallel, we use &quot;parallel&quot; step&lt;/span&gt;
            &lt;span style=&quot;color:#777&quot;&gt;// https://jenkins.io/doc/pipeline/examples/#jobs-in-parallel&lt;/span&gt;
            parallel (
                &lt;span style=&quot;color:#606&quot;&gt;linux&lt;/span&gt;: {
                    build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                },
                &lt;span style=&quot;color:#606&quot;&gt;mac&lt;/span&gt;: {
                    build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-mac&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                },
                &lt;span style=&quot;color:#606&quot;&gt;windows&lt;/span&gt;: {
                    build &lt;span style=&quot;color:#606&quot;&gt;job&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;full-build-windows&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;parameters&lt;/span&gt;: [string(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_BRANCH_NAME&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: GIT_BRANCH)]
                },
                &lt;span style=&quot;color:#606&quot;&gt;failFast&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;)

        } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
            echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Skipped full build.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said before, the Conditional BuildStep plugin is great.
It provides a clear, easy to understand way to add conditional logic to any Freestyle job.
Before Pipeline, it was one of the few plugins to do this and it remains one of the most popular plugins.
Now that we have Pipeline, we can implement conditional logic directly in code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is blog post discussed how to approach converting conditional build steps to Pipeline
and showed a couple concrete examples.  Overall, I’m pleased with the results so far.
I found scenarios which could not easily be migrated to Pipeline, but even those
are only more difficult, rather than impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next thing to do is add a section to the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/&quot;&gt;Jenkins Handbook&lt;/a&gt; documenting the Pipeline
equivalent of all of the Conditions and the most commonly used Tokens.
Look for it soon!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/conditional-buildstep&quot;&gt;Conditional BuildStep plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/17/scm-api-2/</id>
<title>SCM API turns 2.0 and what that means for you</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/17/scm-api-2/" />
<author>
<name>stephenc</name>
</author>
<category term="development"></category>
<category term="plugins"></category>
<summary>
The regressions
discovered after release have now been resolved and this post has been updated with the correct plugin version numbers.


See this post for more details.






We are announcing the
SCM API
2.0.x and
Branch API
2.0.x release lines.


Downstream of this there are also some great improvements to a number of popular plugins including:




GitHub Branch Source


BitBucket branch source


Git


Mercurial


Pipeline Multibranch


GitHub Organization Folders




There are some gotcha&#8217;s that Jenkins administrators will need to be aware of.








Always take a backup of your JENKINS_HOME before upgrading any plugins.





We want to give you the whole story, but the take home message is this:




When updating the
SCM API
and/or
Branch API
plugins to the 2.0.x release lines,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41121&quot;&gt;regressions
discovered after release&lt;/a&gt; have now been resolved and this post has been updated with the correct plugin version numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/02/06/scm-api-2-take2/&quot;&gt;this post&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are announcing the
&lt;a href=&quot;https://plugins.jenkins.io/scm-api&quot;&gt;SCM API&lt;/a&gt;
2.0.x and
&lt;a href=&quot;https://plugins.jenkins.io/branch-api&quot;&gt;Branch API&lt;/a&gt;
2.0.x release lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Downstream of this there are also some great improvements to a number of popular plugins including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/github-branch-source&quot;&gt;GitHub Branch Source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/cloudbees-bitbucket-branch-source&quot;&gt;BitBucket branch source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/git&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/mercurial&quot;&gt;Mercurial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline Multibranch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/github-organization-folder&quot;&gt;GitHub Organization Folders&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some gotcha’s that Jenkins administrators will need to be aware of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Always take a backup of your &lt;code&gt;JENKINS_HOME&lt;/code&gt; before upgrading any plugins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to give you the whole story, but the take home message is this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When updating the
&lt;a href=&quot;https://plugins.jenkins.io/scm-api&quot;&gt;SCM API&lt;/a&gt;
and/or
&lt;a href=&quot;https://plugins.jenkins.io/branch-api&quot;&gt;Branch API&lt;/a&gt;
plugins to the 2.0.x release lines, if you have any of the
&lt;a href=&quot;https://plugins.jenkins.io/github-organization-folder&quot;&gt;GitHub Organization Folders&lt;/a&gt;,
&lt;a href=&quot;https://plugins.jenkins.io/github-branch-source&quot;&gt;GitHub Branch Source&lt;/a&gt;
and/or
&lt;a href=&quot;https://plugins.jenkins.io/cloudbees-bitbucket-branch-source&quot;&gt;BitBucket branch source&lt;/a&gt;
plugins installed then you &lt;strong&gt;must&lt;/strong&gt; upgrade them &lt;strong&gt;all&lt;/strong&gt; to 2.0.x at the same time or Bad Things™ will happen.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— A Jenkins Administrator
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do NOT upgrade some of these plugins but not others!
Doing so may cause your jobs to fail to load.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you don’t care about the hows and whys, you can just skip down to &lt;a href=&quot;#tldr&quot;&gt;this section&lt;/a&gt; but if you are curious…​ here we go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-back-story&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-back-story&quot;&gt;&lt;/a&gt;The back-story&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Way back in September 2013 we announced the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2013/09/23/literate-builds-wtf/&quot;&gt;Literate plugin&lt;/a&gt;,
as an experimental new way of modeling branch development in Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you are performing an experiment, the recommendation is to do just enough work to let you perform the test.
However, the culture in Jenkins is to always try and produce reusable components that others can use in ways you have not anticipated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So when releasing the initial version of the
&lt;a href=&quot;https://plugins.jenkins.io/literate&quot;&gt;Literate plugin&lt;/a&gt;
we also separated the Literate specific bits from the SCM specific concepts and multi-branch concepts.
These were lower level concepts were organized into the following plugins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/scm-api&quot;&gt;SCM API&lt;/a&gt; -
which was intended to be a plugin to hold a next generation API for interacting with source control systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/branch-api&quot;&gt;Branch API&lt;/a&gt; -
which was intended to be a plugin to hold the multi-branch functionality that was abstracted from the usage by the Literate plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, we released updates to three of the more common SCM plugins which included implementations of the SCM API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subversion plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mercurial plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While there was some interest in the Literate plugin, it did not gain much traction - there are only 39 Jenkins instances running the Literate plugin as of December 2016.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In terms of the reusable components, we had only made a minimal implementation with some limitations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Very basic event support - events can only trigger a re-scan of the entire repository.
This was acceptable at the time because the only three implementations use a local cache of the remote state so re-scanning is quick.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No implementation of the &lt;code&gt;SCMFileSystem&lt;/code&gt; API.
As a result it is not possible for plugins like
&lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline Multibranch&lt;/a&gt;
to get the &lt;code&gt;Jenkinsfile&lt;/code&gt; from the remote repository without needing to checkout the repository into a workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No documentation on how plugin developers are supposed to implement the SCM API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No documentation on how plugin developers are supposed to consume the SCM API (if they wanted to do something like Branch API but not the same way as Branch API)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No documentation on how plugin developers are supposed to implement the Branch API to create their own multi-branch project types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No documentation on for users on how the Branch API based project types are expected to work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Roll forward to November 2015 and Jenkins Pipeline got a release of the
&lt;a href=&quot;https://plugins.jenkins.io/workflow-multibranch&quot;&gt;Pipeline Multibranch&lt;/a&gt;.
It seems that pairing Pipeline with Branch API style multi-branch is much more successful than Literate - there are close to 60,000 instances running the pipeline multi-branch plugin as of December 2016.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There also were two new SCM plugins implementing the SCM API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub Branch Source Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BitBucket Branch Source Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unlike the previous implementations of the SCM API, however, these plugins do not maintain a local cache of the repository state.
Rather they make queries via the GitHub / BitBucket REST APIs on demand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above design decision exposed one of the initial MVP compromises of the SCM API plugin: &lt;em&gt;very basic event support&lt;/em&gt;.
Under the SCM API 1.x model, the only event that an &lt;code&gt;SCMSource&lt;/code&gt; can signal is &lt;em&gt;something changed, go look at everything again&lt;/em&gt;.
When you are accessing an API that only allows 5,000 API calls per hour, performing a full scan of the entire repository just to pick up a change in one branch does not make optimum usage of that 5,000 calls/hour rate limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we decided that perhaps the SCM API and Branch API plugins have left their Minimum Viability Experiment state and the corresponding limitations should be addressed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enter-scm-api-2-0-x-and-branch-api-2-0-x&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enter-scm-api-2-0-x-and-branch-api-2-0-x&quot;&gt;&lt;/a&gt;Enter SCM API 2.0.x and Branch API 2.0.x&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what has changed in the
&lt;a href=&quot;https://plugins.jenkins.io/scm-api&quot;&gt;SCM API&lt;/a&gt;
2.0.x and
&lt;a href=&quot;https://plugins.jenkins.io/branch-api&quot;&gt;Branch API&lt;/a&gt;
2.0.x release lines?
These plugin releases include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;documentation on how plugin developers are supposed to
&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/blob/master/docs/implementation.adoc&quot;&gt;implement the SCM API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;documentation on how plugin developers are supposed to
&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/blob/master/docs/consumer.adoc&quot;&gt;consume the SCM API&lt;/a&gt;
(if they wanted to do something like Branch API but not the same way as Branch API)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;documentation on how plugin developers are supposed to
&lt;a href=&quot;https://github.com/jenkinsci/branch-api-plugin/blob/master/docs/implementation.adoc&quot;&gt;implement the Branch API&lt;/a&gt;
to create their own multi-branch project types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generic documentation for users on
&lt;a href=&quot;https://github.com/jenkinsci/branch-api-plugin/blob/master/docs/user.adoc&quot;&gt;how Branch API based project types are intended to work&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a full featured
&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/blob/master/src/main/java/jenkins/scm/api/SCMEvent.java&quot;&gt;event system&lt;/a&gt;
that allows implementers to provide fine grained notifications to consumers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/tree/master/src/test/java/jenkins/scm/api&quot;&gt;lots&lt;/a&gt;
&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/tree/master/src/test/java/jenkins/scm/impl&quot;&gt;and&lt;/a&gt;
&lt;a href=&quot;https://github.com/jenkinsci/branch-api-plugin/tree/master/src/test/java/integration&quot;&gt;lots&lt;/a&gt;
of new automated tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a &lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/tree/master/src/test/java/jenkins/scm/impl/mock&quot;&gt;mock implementation&lt;/a&gt;
of the SCM API to help consumers of the SCM API test their usage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, we have upgraded the following plugins to include the new fine-grained event support:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mercurial Plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, that was the good news.
Here is the bad news.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We found out that the GitHub Branch Source and BitBucket Branch Source plugins had made invalid assumptions about how to implement the SCM API.
To be clear, this was not the plugin developers fault: at the time there was no documentation on how to implement the SCM API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But fixing the issues that we found means that you have to be careful about which specific combinations of plugin versions you have installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;SCM API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Technically, the 2.0.x line of this plugin is both API and on-disk compatible with plugins compiled against older version lines.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, the 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have hard-coded assumptions about internal implementation of the SCM API that are no longer valid in the 2.0.x line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you upgrade to SCM API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins &lt;strong&gt;and&lt;/strong&gt; you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you upgrade the SCM API plugin to the 2.0.x line and do not upgrade the Branch API plugin to the 2.0.x line then you will not get any of the benefits of the new version of the SCM API plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Branch API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.
Technically, the API is compatible with plugins compiled against older version lines.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 1.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins have implemented hacks that make assumptions about internal implementation of the Branch API that are no longer valid in the 2.0.x line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline Multibranch plugin made a few minor invalid assumptions about how to implement a Multibranch project type.
For example, if you do not upgrade the Pipeline Multibranch plugin in tandem then you will be unable to manually delete an orphaned item before the orphaned item retention strategy runs, which should be significantly less frequently with the new event support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you upgrade to Branch API 2.0.x and you have either the GitHub Branch Source or the BitBucket Branch Source plugins &lt;strong&gt;and&lt;/strong&gt; you do not upgrade those instances to the 2.0.x line then your Jenkins instance will fail to start-up correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The solution is just to upgrade the GitHub Branch Source or the BitBucket Branch Source plugin (as appropriate) to the 2.0.x line.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Git Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The new releases of this plugin are both API and on-disk compatible with plugins compiled against the previous releases.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2.0.x lines of both the GitHub Branch Source and BitBucket Branch Source plugins require that you upgrade your Git Plugin to one of the versions that supports SCM API 2.0.x.
In general, the required upgrade will be performed automatically when you upgrade your GitHub Branch Source and BitBucket Branch Source plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Mercurial Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The new release of this plugin is both API and on-disk compatible with plugins compiled against the previous releases.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2.0.x line of the BitBucket Branch Source plugins require that you upgrade your Mercurial Plugin to the 2.0.x line.
In general, the required upgrade will be performed automatically when you upgrade your  BitBucket Branch Source plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;BitBucket Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The 2.0.x line of this plugin makes on-disk file format changes that mean you will be unable to roll back to the 1.x line after an upgrade without restoring the old data files from a back-up.&lt;/p&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you upgrade to GitHub Branch Source 2.0.x and you have the GitHub Organization Folders plugin installed, you must upgrade that plugin to the tombstone release.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Organization Folders Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The functionality of this plugin has been migrated to the GitHub Branch Source plugin.
You will need to upgrade to the tombstone release in order to ensure all the data has been migrated to the classes in the GitHub Branch Source plugin.&lt;/p&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have upgraded to the tombstone version and all GitHub Organization Folders have had a full scan completed successfully, you can disable and uninstall the GitHub Organization Folders plugin.
There will be no more releases of this plugin after the tombstone.
The tombstone is only required for data migration.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tldr&quot;&gt;&lt;/a&gt;Summary for busy Jenkins Administrators&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrading should make multi-branch projects much better.
When you are ready to upgrade you must ensure that you upgrade all the required plugins.
If you miss some, just upgrade them and restart to fix the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Folders Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;5.16&lt;/span&gt; &lt;strong&gt;5.17&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;SCM API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;2.0.1&lt;/span&gt; &lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Branch API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;2.0.0&lt;/span&gt; &lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Git Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;Either&lt;/strong&gt; &lt;span class=&quot;line-through&quot;&gt;2.6.2&lt;/span&gt; &lt;strong&gt;2.6.4&lt;/strong&gt; or newer in the 2.6.x line &lt;strong&gt;or&lt;/strong&gt; &lt;span class=&quot;line-through&quot;&gt;3.0.2&lt;/span&gt; &lt;strong&gt;3.0.4&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Mercurial Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;2.0.0 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;2.0.0&lt;/span&gt; &lt;strong&gt;2.0.1&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;BitBucket Branch Source Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;2.0.0&lt;/span&gt; &lt;strong&gt;2.0.2&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Organization Folders Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.6&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Pipeline Multibranch Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;span class=&quot;line-through&quot;&gt;2.10&lt;/span&gt; &lt;strong&gt;2.12&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the &lt;a href=&quot;https://plugins.jenkins.io/blueocean&quot;&gt;Blue Ocean plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Blue Ocean Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;strong&gt;1.0.0-b22&lt;/strong&gt; or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other plugins that may require updating:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub API Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.84 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;GitHub Plugin&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.25.0 or newer&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After an upgrade you will see the data migration warning (see the screenshot in &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-41608&quot;&gt;JENKINS-41608&lt;/a&gt; for an example) this is normal and expected.
The unreadable data will be removed by the next scan / index or can be removed manually using the &lt;em&gt;Discard Unreadable Data&lt;/em&gt; button.
The warning will disappear on the next restart after the unreadable data has been removed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-for-busy-jenkins-users&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary-for-busy-jenkins-users&quot;&gt;&lt;/a&gt;Summary for busy Jenkins users&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SCM API 2.0.x adds fine-grained event support.
This should significantly improve the responsiveness of multi-branch projects.
This should significantly reduce your GitHub API rate limit usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using the
&lt;a href=&quot;https://plugins.jenkins.io/github-branch-source&quot;&gt;GitHub Branch Source&lt;/a&gt;
or
&lt;a href=&quot;https://plugins.jenkins.io/github-organization-folder&quot;&gt;GitHub Organization Folders&lt;/a&gt;
plugins then upgrading will &lt;strong&gt;significantly&lt;/strong&gt; reduce the API calls made by Jenkins to GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using any of the upgraded SCM plugins (e.g. Git, Mercurial, GitHub Branch Source, BitBucket Branch Source) then upgrading will &lt;strong&gt;significantly&lt;/strong&gt; improve the responsiveness to push event notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary-for-busy-scm-plugin-developers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary-for-busy-scm-plugin-developers&quot;&gt;&lt;/a&gt;Summary for busy SCM plugin developers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should read the new
&lt;a href=&quot;https://github.com/jenkinsci/scm-api-plugin/blob/master/docs/implementation.adoc&quot;&gt;documentation&lt;/a&gt;
on how plugin developers are supposed to implement the SCM API&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-to-now-dear-literate-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#where-to-now-dear-literate-plugin&quot;&gt;&lt;/a&gt;Where to now dear Literate Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The persistent reader may be wondering what happens now to the Literate plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, the logical heir of the Literate Plugin is the
&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Pipeline Model Definition plugin&lt;/a&gt;.
This new plugin has the advantage of an easy to read pipeline syntax with the extra functionality that I suspect was preventing people from adopting Literate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that the Pipeline Model Definition already has 5000 installations as of December 2016 and I expect up-take to keep on growing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/17/Jenkins-is-upgrading-to-Java-8/</id>
<title>Jenkins Upgrades To Java 8</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/17/Jenkins-is-upgrading-to-Java-8/" />
<author>
<name>batmat</name>
</author>
<category term="java8"></category>
<category term="upgrade"></category>
<summary>
In the next few months, Jenkins will require Java 8 as its runtime.


Back in
last November,
we discussed interesting statistics showing that Jenkins was now running Java 8
on a majority of its running instances.


Timeline


Here is how we plan to roll that baseline upgrade in the next few months.




Now: Announce the intention publicly.


April, 2017: Drop support for Java 7 in Jenkins weekly.
With the current rhythm, that means 2.52 will most likely be the first weekly to require Java 8.


June 2017: First LTS version requiring Java 8 is published.
This should be something around 2.60.1.










If you are still running Java 7, you will not be...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;In the next few months, Jenkins will require Java 8 as its runtime.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back in
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/&quot;&gt;last November&lt;/a&gt;,
we discussed interesting statistics showing that Jenkins was now running Java 8
on a majority of its running instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;timeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#timeline&quot;&gt;&lt;/a&gt;Timeline&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is how we plan to roll that baseline upgrade in the next few months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now: Announce the intention publicly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;April, 2017: Drop support for Java 7 in Jenkins weekly.
With the current rhythm, that means &lt;em&gt;2.52&lt;/em&gt; will most likely be the first weekly to require Java 8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;June 2017: First LTS version requiring Java 8 is published.
This should be something around &lt;em&gt;2.60.1&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are still running Java 7, you will not be able to upgrade to the latest LTS version after some date probably around May 2017.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;why-upgrade-to-java-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-upgrade-to-java-8&quot;&gt;&lt;/a&gt;Why Upgrade to Java 8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Balancing those numbers with many other criteria:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java 7 has been now end-of-lifed for 18+ months&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People are already moving away from Java 7, as show the numbers&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;52.8%&lt;/em&gt; of instances were already running Java 8 back in last November, and now reaching &lt;a href=&quot;http://stats.jenkins.io/plugin-installation-trend/jvms.json&quot;&gt;&lt;em&gt;58%&lt;/em&gt; two months later&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we only look at Jenkins 2.x, then we reach &lt;em&gt;72%&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 8 runtime is known from the field to be more stable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many developers have been wanting to be allowed to leverage the improvements that Java 8 provides to the language and platform
(lambdas, Date/Time API…​ just to name a few).
Being also a developer community, we want Jenkins to be appealing to contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have questions or feedback about this announcement, please feel free to post it to the Jenkins developers mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/13/blueocean-dev-log-jan/</id>
<title>Blue Ocean Dev Log: January Week #2</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/13/blueocean-dev-log-jan/" />
<author>
<name>michaelneale</name>
</author>
<category term="blueocean"></category>
<summary>
As we get closer to
Blue Ocean
1.0, which is planned for the end of March, I figured it would be great to
highlight some of the good stuff that has been going on. It&#8217;s been a
busy-as-usual week as everyone comes back from vacation.  A couple of new betas
went out this week. Of note:




input to Pipelines is now supported, a much asked for feature (see below)


A new French translation


Some optimisations (especially around reducing number of HTTP calls). We
have started using
gtmetrix.com
to measure changes on
dogfood
to get some numbers around optimisations on the web tier.


And a grab bag of other great bug fixes.









Also a bunch...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we get closer to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
1.0, which is planned for the end of March, I figured it would be great to
highlight some of the good stuff that has been going on. It’s been a
busy-as-usual week as everyone comes back from vacation.  A couple of new betas
went out this week. Of note:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input&lt;/code&gt; to Pipelines is now supported, a much asked for feature (see below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new French translation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some optimisations (especially around reducing number of HTTP calls). We
have started using
&lt;a href=&quot;http://gtmetrix.com&quot;&gt;gtmetrix.com&lt;/a&gt;
to measure changes on
&lt;a href=&quot;https://ci.blueocean.io&quot;&gt;dogfood&lt;/a&gt;
to get some numbers around optimisations on the web tier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And a grab bag of other great bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/blueocean/input-step.png&quot; alt=&quot;Using the input step in Blue Ocean&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also a bunch of work has been done to support parametrized pipelines, as
well as creation of new multibranch pipelines (both are much asked for).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is also now an &quot;official&quot; Docker image being published to
&lt;a href=&quot;https://hub.docker.com/r/jenkinsci/blueocean/&quot;&gt;Docker Hub&lt;/a&gt;. The Pipeline
building the container is run weekly and will be picking up newly tagged
releases of Blue Ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running the latest can be as simple as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;docker run -p 8888:8080 jenkinsci/blueocean:latest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/blueocean/logo-yarrr.png&quot; alt=&quot;Jenkins yarrr&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is built on the incredibly popular
&lt;a href=&quot;https://hub.docker.com/_/jenkins/&quot;&gt;official &quot;jenkins&quot; image&lt;/a&gt;
(10M pulls can’t all be wrong!). The container also has tags available (e.g.
&lt;code&gt;jenkinsci/blueocean:1.0.0-b16&lt;/code&gt;) for grabbing a specific released version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up next for Blue Ocean development as we march towards 1.0:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support for parametrized jobs. For which a bunch of api work has already been
done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creation of the new Pipeline GUI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preview release of the Visual Editor for
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2017/01/12/declarative-pipeline-beta-2/&quot;&gt;Declarative Pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new header design will be applied&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re interested in helping to make Blue Ocean a great user experience for
Jenkins, please join the Blue Ocean development team on
&lt;a href=&quot;https://gitter.im/jenkinsci/blueocean-plugin&quot;&gt;Gitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/12/declarative-pipeline-beta-2/</id>
<title>Declarative Pipeline Syntax Beta 2 release</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/12/declarative-pipeline-beta-2/" />
<author>
<name>abayer</name>
</author>
<category term="plugins"></category>
<category term="pipeline"></category>
<summary>
This week, we released the second beta of the new
Declarative Pipeline syntax,
available in the Update Center now as version 0.8.1 of Pipeline: Model Definition.
You can read more about Declarative Pipeline
in the blog post introducing the first beta
from December, but we wanted to update you all on the syntax changes in the
second beta. These syntax changes are the last compatibility-breaking changes to
the syntax before the 1.0 release planned for February, so you can safely start
using the 0.8.1 syntax now without needing to change it when 1.0 is released.


A full syntax reference is available on the wiki as well.


Syntax Changes


Changed "agent" configuration...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we released the second beta of the new
&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;Declarative Pipeline syntax&lt;/a&gt;,
available in the Update Center now as version 0.8.1 of &lt;em&gt;Pipeline: Model Definition&lt;/em&gt;.
You can read more about Declarative Pipeline
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/&quot;&gt;in the blog post introducing the first beta&lt;/a&gt;
from December, but we wanted to update you all on the syntax changes in the
second beta. These syntax changes are the last compatibility-breaking changes to
the syntax before the 1.0 release planned for February, so you can safely start
using the 0.8.1 syntax now without needing to change it when 1.0 is released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A full syntax reference is &lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/Syntax-Reference&quot;&gt;available on the wiki&lt;/a&gt; as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;syntax-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#syntax-changes&quot;&gt;&lt;/a&gt;Syntax Changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;changed-agent-configuration-to-block-structure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#changed-agent-configuration-to-block-structure&quot;&gt;&lt;/a&gt;Changed &quot;agent&quot; configuration to block structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to support more detailed and clear configuration of agents, as well as
making agent syntax more consistent with the rest of the Declarative Pipeline
syntax, we’ve moved the agent configuration into blocks. The &lt;code&gt;agent any&lt;/code&gt; and
&lt;code&gt;agent none&lt;/code&gt; configurations work the same as previously, but &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;
and &lt;code&gt;dockerfile&lt;/code&gt; now look like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just specifying a label is simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;agent {
    label &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;some-label&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re just specifying a Docker image, you can use this simple syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;agent {
    docker &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ubuntu:16.04&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you are specifying a label or other arguments, docker looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;agent {
    docker {
        image &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ubuntu:16.04&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        label &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker-label&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        args &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-v /tmp:/tmp -p 8000:8000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you’re building an image from &quot;Dockerfile&quot; in your repository and
don’t care what node is used or have additional arguments, you can again
use a simple syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;agent {
    dockerfile &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you’re building an image from a different file, or have a label or other
arguments, use the following syntax:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;agent {
    dockerfile {
        filename &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;OtherDockerfile&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        label &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker-label&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        args &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-v /tmp:/tmp -p 8000:8000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;improved-when-conditions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improved-when-conditions&quot;&gt;&lt;/a&gt;Improved &quot;when&quot; conditions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduced the &lt;code&gt;when&lt;/code&gt; section a couple releases ago, but have made some
changes to its syntax here in 0.8.1. We wanted to add some simpler ways to
specify common conditions, and that required we re-work the syntax accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;branch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#branch&quot;&gt;&lt;/a&gt;Branch&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most common conditions is running a stage only if you’re on a
specific branch. You can also use wildcards like &quot;*/master&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    branch &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;master&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;environment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#environment&quot;&gt;&lt;/a&gt;Environment&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another built-in condition is the environment condition, which checks to see
if a given environment variable is set to a given value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    environment &lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SOME_ENV_VAR&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SOME_VALUE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;expression&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#expression&quot;&gt;&lt;/a&gt;Expression&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, there’s the expression condition, which resolves an arbitrary
Pipeline expression. If the return value of that expression isn’t false or
null, the stage will execute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;when {
    expression {
        echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Should I run?&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;foo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bar&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;options-replaces-properties-and-wrappers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#options-replaces-properties-and-wrappers&quot;&gt;&lt;/a&gt;&quot;options&quot; replaces &quot;properties&quot; and &quot;wrappers&quot;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve renamed the &lt;code&gt;properties&lt;/code&gt; section to &lt;code&gt;options&lt;/code&gt;, due to needing to add new
Declarative-specific options and to cut down on confusion. The &lt;code&gt;options&lt;/code&gt; section
is now where you’ll put general Pipeline options like &lt;code&gt;buildDiscarder&lt;/code&gt;,
Declarative-specific options like &lt;code&gt;skipDefaultCheckout&lt;/code&gt;, and block-scoped steps
that should wrap the execution of the entire build, like &lt;code&gt;timeout&lt;/code&gt; or
&lt;code&gt;timestamps&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;
options {
    buildDiscarder(logRotator(&lt;span style=&quot;color:#606&quot;&gt;numToKeepStr&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
    skipDefaultCheckout()
    timeout(&lt;span style=&quot;color:#606&quot;&gt;time&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unit&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MINUTES&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;heading-towards-1-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#heading-towards-1-0&quot;&gt;&lt;/a&gt;Heading towards 1.0!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we may still add more functionality to the Declarative Pipeline syntax,
we won’t be making any changes to existing syntax for the 1.0 release. This
means that any pipelines you write against the 0.8.1 syntax will keep working
for the foreseeable future without any changes. So if you’re already using
Declarative Pipelines, make sure to update your `Jenkinsfile`s after upgrading
to 0.8.1, and if you haven’t been using Declarative Pipelines yet, install the
&lt;a href=&quot;https://plugins.jenkins.io/pipeline-model-definition&quot;&gt;&lt;em&gt;Pipeline: Model Definition&lt;/em&gt;&lt;/a&gt; plugin and
give them a try!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/11/jenkins-world-2017-cfp/</id>
<title>Jenkins World 2017 Call for Papers is Open</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/11/jenkins-world-2017-cfp/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
The largest Jenkins event, Jenkins
World is coming to San Francisco, California on August 28 - 31, 2017, at the
Marriott Marquis.  This conference will feature two days of hands-on training,
workshops, and certification exams followed by two more days with five tracks
of technical sessions from Jenkins and DevOps experts from around the world.


Inspire your peers and colleagues by sharing your expertise and experience as
one of the Jenkins World speakers.
The Call for Papers is open, last
day for submitted a proposal is March 5th, 2017.


Compared to Jenkins World 2016, what&#8217;s new for
2017?  Two tracks are now dedicated to "show and tell." These...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot; style=&quot;float: right&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;https://www.papercall.io/jenkins-world-2017&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/125x125.png&quot; alt=&quot;125x125&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The largest Jenkins event, &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins
World&lt;/a&gt; is coming to San Francisco, California on &lt;strong&gt;August 28 - 31, 2017&lt;/strong&gt;, at the
Marriott Marquis.  This conference will feature two days of hands-on training,
workshops, and certification exams followed by two more days with five tracks
of technical sessions from Jenkins and DevOps experts from around the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Inspire your peers and colleagues by sharing your expertise and experience as
one of the Jenkins World speakers.
&lt;a href=&quot;https://www.papercall.io/jenkins-world-2017&quot;&gt;The Call for Papers is open&lt;/a&gt;, last
day for submitted a proposal is &lt;strong&gt;March 5th, 2017.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/node/tags/jenkinsworld/&quot;&gt;Compared to Jenkins World 2016&lt;/a&gt;, what’s new for
2017?  Two tracks are now dedicated to &quot;show and tell.&quot; These sessions are
technically advanced with code sharing, heavy on demos, and only a few slides.
If you are like most of us - driven to learn, share, and collaborate…​we’d
like to hear from you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking forward to your amazing proposal(s)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.papercall.io/jenkins-world-2017&quot;&gt;&lt;strong&gt;Submit your proposal here!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/10/security-warnings/</id>
<title>Security warnings in Jenkins</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/10/security-warnings/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
Jenkins 2.40 was released earlier this week, and readers of the
changelog
will have noticed that it now includes the ability to show security warnings
published by the configured update site.  But what does that mean?


In the past, we&#8217;ve notified users about security issues in Jenkins and in
plugins through various means: Emails to the
jenkinsci-advisories mailing list
(which I recommend you subscribe to), blog posts, and, recently, emails to the
oss-security mailing list.  But I still wanted to increase the reach of our
notifications, to make sure Jenkins admins are informed quickly about possible
security problems on their instances.  The logical next step was to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins 2.40 was released earlier this week, and readers of the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog&quot;&gt;changelog&lt;/a&gt;
will have noticed that it now includes the ability to show security warnings
published by the configured update site.  But what does that mean?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the past, we’ve notified users about security issues in Jenkins and in
plugins through various means: Emails to the
&lt;a href=&quot;https://groups.google.com/d/forum/jenkinsci-advisories&quot;&gt;jenkinsci-advisories mailing list&lt;/a&gt;
(which I recommend you subscribe to), blog posts, and, recently, emails to the
oss-security mailing list.  But I still wanted to increase the reach of our
notifications, to make sure Jenkins admins are informed quickly about possible
security problems on their instances.  The logical next step was to include
these notifications in Jenkins itself, and that feature has been added in
Jenkins 2.40.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we enabled the publication of warnings on our update sites: Once Jenkins
2.40 (or newer) refreshes its cache of update site metadata, it may now inform
you that you’re using a vulnerable plugin that should be updated or removed.
Right now, these aren’t previously unknown warnings, but reference security
advisories for plugin vulnerabilies that have been published over the past few
years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will of course continue to publish security advisories using the mailing
list of the same name, as well other means.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay safe!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2017/01/10/jenkins-lifx-notifier-plugin/</id>
<title>Learning plugin development by improving the LIFX notifier plugin</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2017-01-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2017/01/10/jenkins-lifx-notifier-plugin/" />
<author>
<name>vgaidarji</name>
</author>
<category term="plugins"></category>
<category term="lifx"></category>
<summary>
This is a
cross
post by Veaceslav Gaidarji, open source
developer and contributor to the Jenkins and Bitrise projects.






Some time ago I encountered a LIFX smart bulbs.
These are the bulbs with a chip inside - 50% bulb, 50% chip. There are mobile
applications for easy configuration and remote control of the bulb. Nothing
special here, it simply works and is very convenient to have such bulbs in
dormitory.


Brilliant idea time



99% of ideas which come to our minds either were already implemented by someone
else or they are useless.



&#8212; Veaceslav Gaidarji



And as it always happens, the developer inside me generated an idea which, as
it always happens, was implemented...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a
&lt;a href=&quot;http://vgaidarji.me/blog/2017/01/02/jenkins-lifx-notifier-plugin/&quot;&gt;cross
post&lt;/a&gt; by &lt;a href=&quot;https://github.com/vgaidarji&quot;&gt;Veaceslav Gaidarji&lt;/a&gt;, open source
developer and contributor to the Jenkins and Bitrise projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some time ago I encountered a &lt;a href=&quot;http://www.lifx.com&quot;&gt;LIFX&lt;/a&gt; smart bulbs.
These are the bulbs with a chip inside - 50% bulb, 50% chip. There are mobile
applications for easy configuration and remote control of the bulb. Nothing
special here, it simply works and is very convenient to have such bulbs in
dormitory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;brilliant-idea-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#brilliant-idea-time&quot;&gt;&lt;/a&gt;Brilliant idea time&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;99% of ideas which come to our minds either were already implemented by someone
else or they are useless.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Veaceslav Gaidarji
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as it always happens, the developer inside me generated an idea which, as
it always happens, was implemented by someone else already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea was: to connect a LIFX bulb to Jenkins server and update the color
according to a job’s state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before starting to work on such Jenkins plugin, I searched for similar projects
on Google and the first links pointed me to existing
&lt;a href=&quot;https://plugins.jenkins.io/lifx-notifier&quot;&gt;LIFX notifier plugin&lt;/a&gt;
and a
&lt;a href=&quot;https://www.cloudbees.com/blog/lifx-smart-lightbulb-build-notifier-plugin&quot;&gt;blog post&lt;/a&gt;
from
&lt;a href=&quot;https://github.com/michaelneale&quot;&gt;Michael Neale&lt;/a&gt;
 who created the plugin. Michael’s post describes exactly what I had in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point I had 2 options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;forget&lt;/strong&gt; about building something new and just use the plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;improve&lt;/strong&gt; existing plugin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First option is always easy and effortless, but second one is more challenging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;improving-an-existing-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#improving-an-existing-plugin&quot;&gt;&lt;/a&gt;Improving an existing plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The existing &lt;a href=&quot;https://plugins.jenkins.io/lifx-notifier&quot;&gt;LIFX notifier plugin&lt;/a&gt;
did its job really well and I was able to connect my bulb to Jenkins and test
it. But it wasn’t complete and had no configurable at all, therefore no
possibility to change the colors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, I read Jenkins contribution guidelines, which
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Hosting+Plugins#HostingPlugins-Requesthosting&quot;&gt;encourage&lt;/a&gt;
developers to improve existing plugins (if any) and not create other versions
of plugins with similar functionality. Then I contacted the plugin author, Michael Neale,
via email and kindly asked for the contributor access in GitHub
for the existing plugin version. After a short discussion about my plans on this
plugin, Michael added me as a contributor to GitHub
&lt;a href=&quot;https://github.com/jenkinsci/lifx-notifier-plugin&quot;&gt;repo&lt;/a&gt; and wished me
good luck. Thanks Michael!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to improve the LIFX notifier plugin to add the ability
customize the colors (&lt;code&gt;in progress&lt;/code&gt;, &lt;code&gt;build success&lt;/code&gt; and &lt;code&gt;build failure&lt;/code&gt;). This
is not a hard task actually.
A &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Plugins&quot;&gt;1000+&lt;/a&gt; plugins were
developed for Jenkins by the hackers like me, which means that I should have no
problem to do it as well.
Fortunately for me, I have used some plugins already which had a UI similar to
that I had planned to add to the LIFX notifier, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/hockeyapp-plugin&quot;&gt;HockeyApp&lt;/a&gt; plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/fabric-beta-publisher-plugin&quot;&gt;Fabric Beta publisher&lt;/a&gt; plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Different &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Plugins#Plugins-Buildnotifiers&quot;&gt;Build notifiers&lt;/a&gt; plugins&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reviewing the code for these plugins, plus Jenkins
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial&quot;&gt;plugin
development documentation&lt;/a&gt;, and of course looking over
&lt;a href=&quot;http://commons.apache.org/proper/commons-jelly/&quot;&gt;Jelly components&lt;/a&gt; helped
me to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Better understand the Jenkins architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how Jenkins plugins work in general.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Learn how to create the UI components for a plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leanr how to subscribe to Jenkins job state changes using appropriate
extension points.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a few weeks I’ve finished my plugin modifications and added unit tests for
its major parts.  As a result, the plugin now has a UI configuration section in
&lt;code&gt;Post-build Actions&lt;/code&gt; which is self descriptive:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2017-01-02/plugin-configuration.png&quot; alt=&quot;plugin configuration&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last step was to prepare new plugin version and publish it to the world!
The Jenkins
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Hosting+Plugins&quot;&gt;&quot;Hosting&lt;/a&gt; document describes step by step process of how to publish a plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;This includes many steps which should be respected very carefully.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;demo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Zdtf8M5yCgM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-i-ve-learned&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-i-ve-learned&quot;&gt;&lt;/a&gt;What I’ve learned&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was my first experience in Jenkins plugins development. I should say that
&lt;strong&gt;steep learning curve is high enough&lt;/strong&gt;, and sometimes is really hard to find
answers on appearing questions. But in general it’s all about &lt;code&gt;Java&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt;,
&lt;code&gt;Maven&lt;/code&gt; and &lt;strong&gt;it’s a lot of fun&lt;/strong&gt; developing Jenkins plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://plugins.jenkins.io/lifx-notifier&quot;&gt;LIFX notifier page&lt;/a&gt;
for more information about the latest releases!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: &lt;a href=&quot;https://bitrise.io&quot;&gt;bitrise.io&lt;/a&gt; users, I’ve developed &lt;a href=&quot;https://github.com/vgaidarji/steps-lifx-notifier&quot;&gt;step LIFX notifier&lt;/a&gt; for bitrise as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/31/what-a-year/</id>
<title>Thank you for an amazing 2016</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-12-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/31/what-a-year/" />
<author>
<name>rtyler</name>
</author>
<category term="jam"></category>
<category term="jenkins2"></category>
<category term="pipeline"></category>
<category term="blueocean"></category>
<category term="azure"></category>
<category term="gsoc"></category>
<summary>
I do not think it is an exaggeration to say: 2016 was the best year yet for the
Jenkins project. Since the first commit in 2006, the project has reached a
number of significant milestones in its ten years but we have never experienced
the breadth of major milestones in such a short amount of time. From
Jenkins 2
and
Blue Ocean
to the
Google Summer of Code
and
Jenkins World,


I wanted to take a moment and celebrate the myriad of accomplishments which
couldn&#8217;t have happened without the help from everybody who participates in the
Jenkins project. The 1,300+ contributors to the
jenkinsci GitHub organization,
the 4,000+ members of the
!forum/jenkinsci-dev">developers mailing list,
the 8,000+ members...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/jenkins-happy-new-year.png&quot; alt=&quot;Happy New Year from Jenkins&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not think it is an exaggeration to say: 2016 was the best year yet for the
Jenkins project. Since the first commit in 2006, the project has reached a
number of significant milestones in its ten years but we have never experienced
the breadth of major milestones in such a short amount of time. From
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/2.0/&quot;&gt;Jenkins 2&lt;/a&gt;
and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
to the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;
and
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt;,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to take a moment and celebrate the myriad of accomplishments which
couldn’t have happened without the help from everybody who participates in the
Jenkins project. The &lt;strong&gt;1,300+&lt;/strong&gt; contributors to the
&lt;a href=&quot;https://github.com/jenkinsci&quot;&gt;jenkinsci GitHub organization&lt;/a&gt;,
the &lt;strong&gt;4,000+&lt;/strong&gt; members of the
&lt;a href=&quot;https://groups.google.com/forum/&amp;lt;mark&amp;gt;!forum/jenkinsci-dev&quot;&gt;developers mailing list&lt;/a&gt;,
the &lt;strong&gt;8,000+&lt;/strong&gt; members of the
&lt;a href=&quot;https://groups.google.com/forum/&amp;lt;/mark&amp;gt;!forum/jenkinsci-users&quot;&gt;users mailing list&lt;/a&gt;,
and countless others who have reported issues, submitted pull requests, and
presented at meetups and conferences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-2&quot;&gt;&lt;/a&gt;Jenkins 2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Through the course of 2016, the Jenkins project published 16
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog-stable&quot;&gt;LTS releases&lt;/a&gt;
and 54
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog&quot;&gt;Weekly releases&lt;/a&gt;.
Of those 70 releases, the most notable may have been the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/04/26/jenkins-20-is-here/&quot;&gt;Jenkins 2.0 release&lt;/a&gt;
which was published in April.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins 2 made Pipeline as Code front-and-center in the user experience,
introduced a new &quot;Getting Started&quot; experience, and included a number of other
small UI improvements, all while maintaining backwards compatibility with
existing Jenkins environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since April, we have released a number of LTS
releases using Jenkins 2 as a baseline, meaning the Jenkins project no longer
maintains &lt;em&gt;any&lt;/em&gt; 1.x release lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline&quot;&gt;Pipeline&lt;/a&gt;
efforts have continuted to gain steam since April, covered on this blog with a
number of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/node/tags/pipeline/&quot;&gt;posts tagged &quot;pipeline&quot;&lt;/a&gt;. Closing out 2016 with the
announcement of the beta for
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/&quot;&gt;Declarative Pipeline syntax&lt;/a&gt;
which is expected in early 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blue-ocean&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#blue-ocean&quot;&gt;&lt;/a&gt;Blue Ocean&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hot on the heels of Jenkins 2 announcement
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean, a new user experience for Jenkins&lt;/a&gt;,
was
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/26/introducing-blue-ocean/&quot;&gt;open sourced in May&lt;/a&gt;.
Blue Ocean is a new project that rethinks the user experience of Jenkins.
Designed from the ground up for Jenkins Pipeline and compatible with Freestyle
jobs. The goal for the project is to reduce clutter and increase clarity for
every member of a team using Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Blue Ocean beta can be installed from the Update Center and can be run in
production Jenkins environments alongside the existing UI. It adds the new user experience under
&lt;a href=&quot;https://ci.jenkins.io/blue/&quot;&gt;/blue&lt;/a&gt; in the environment but does not disturb the existing UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Blue Ocean is expected to reach &quot;1.0&quot; in the first half of 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean/pipeline-run.png&quot; alt=&quot;Blue Ocean&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;azure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#azure&quot;&gt;&lt;/a&gt;Azure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also in May of 2016, the Jenkins project announced an exciting
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/18/announcing-azure-partnership/&quot;&gt;Partnership with Microsoft&lt;/a&gt;
to run our project infrastructure on
&lt;a href=&quot;https://azure.com&quot;&gt;Azure&lt;/a&gt;. While the migration of Jenkins project
infrastructure into Azure is still on-going, there have been some notable
milestones reached already:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;End-to-end TLS encrypted delivery for Debian/openSUSE/Red Hat repositories which are
configured to use &lt;code&gt;https://pkg.jenkins.io&lt;/code&gt; by the end-user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major capacity improvements to
&lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt;
providing on-demand Ubuntu and Windows build/test infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A full continuous delivery Pipeline for all Azure-based infrastructure using
&lt;a href=&quot;https://twitter.com/agentdero/status/809467253548687360&quot;&gt;Terraform from Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The migration to Azure is expected to complete in 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google-summer-of-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#google-summer-of-code&quot;&gt;&lt;/a&gt;Google Summer of Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first time in the history of the project, Jenkins was accepted into
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;
2016. Google Summer of Code (GSoC) is an annual, international, program
which encourages college-aged students to participate with open source projects
during the summer break between classes. Students accepted into the program
receive a stipend, paid by Google, to work well-defined projects to improve or
enhance the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In exchange, numerous Jenkins community members volunteered as &quot;mentors&quot; for
students to help integrate them into the open source community and succeed in
completing their summer projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot was learned during the summer which we look forward to applying to Google
Summer of Code 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-world&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-world&quot;&gt;&lt;/a&gt;Jenkins World&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In September, over &lt;strong&gt;one thousand&lt;/strong&gt; people attended
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt;,
in Santa Clara, California.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NXjeHeIYRRI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/demo-crowd.jpg&quot; alt=&quot;Demo Crowd&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the event,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam&lt;/a&gt;
posted a series of blog posts which highlight some of the fantastic content
shared by Jenkins users and contributors from around the world, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/&quot;&gt;The demos from the &quot;Experts&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;Sessions on Scaling Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/&quot;&gt;Using Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/&quot;&gt;The Contributor Summit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins World was the first global event of its kind for Jenkins, it brought users
and contributors together to exchange ideas on the current state of the
project, celebrate accomplishments of the past year, and look ahead at all the
exiting enhancements coming down the pipe(line).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was such a smashing success that
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World 2017&lt;/a&gt;
is already scheduled for &lt;strong&gt;August 30-31st&lt;/strong&gt; in San Francisco, California.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jam&quot;&gt;&lt;/a&gt;JAM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, 2016 saw tremendous growth in the number of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Jenkins Area Meetups&lt;/a&gt;
(JAMs) hosted around the world. JAMs are local meetups intended to bring
Jenkins users and contributors together for socializing and learning. JAMs are
organized by local Jenkins community members who have a passion for sharing new
Jenkins concepts, patterns and tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Driven by current Jenkins Events Officer,
&lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa Tong&lt;/a&gt;,
and the dozens of passionate organizers, JAMs have become a great way to meet
other Jenkins users near you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-in-review/jam-worldwide-2016.png&quot; alt=&quot;Jenkins Around the World Meetups&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we don’t yet have JAMs on each of the seven continents, you can always join the
&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup&quot;&gt;Jenkins Online Meetup&lt;/a&gt;.
Though we’re hoping more groups will be founded near you in 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am personally grateful for the variety and volume of contributions made by
thousands of people to the Jenkins project this year. I believe I can speak for
project founder,
&lt;a href=&quot;https://github.com/kohsuke&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;,
in stating that the Jenkins community has grown beyond our anything we could
have imagined five years ago, let alone ten!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are number of ways to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/participate/&quot;&gt;participate&lt;/a&gt;
in the Jenkins project, so if you didn’t have an opportunity to join in during
2016, we hope to see you next year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/20/jenkins-puppet-enterprise-plugin/</id>
<title>Continuous Delivery with Jenkins and Puppet Enterprise</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-12-20T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/20/jenkins-puppet-enterprise-plugin/" />
<author>
<name>ccaum</name>
</author>
<category term="continuousdelivery"></category>
<category term="puppet"></category>
<category term="pipeline"></category>
<category term="puppetenterprise"></category>
<summary>
This is a guest post by Carl Caum,
who works at Puppet and created the
Puppet Enterprise Pipeline plugin.






During PuppetConf 2016, myself and Brian Dawson from CloudBees announced the
Puppet Enterprise plugin for Jenkins Pipeline.
Let&#8217;s take a look at how the plugin makes it trivial to use Puppet to perform
some or all of the deployment tasks in continuous delivery pipelines.


Jenkins Pipeline introduced an amazing world where the definition for a
pipeline is managed from the same version control repository as the code
delivered by the pipeline. This is a powerful idea, and one I felt complemented
Puppet&#8217;s automation strengths. I wanted to make it trivial to...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/ccaum&quot;&gt;Carl Caum&lt;/a&gt;,
who works at &lt;a href=&quot;http://puppet.com&quot;&gt;Puppet&lt;/a&gt; and created the
&lt;a href=&quot;https://plugins.jenkins.io/puppet-enterprise-pipeline&quot;&gt;Puppet Enterprise Pipeline plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During PuppetConf 2016, myself and Brian Dawson from CloudBees announced the
&lt;a href=&quot;https://plugins.jenkins.io/puppet-enterprise-pipeline&quot;&gt;Puppet Enterprise plugin for Jenkins Pipeline&lt;/a&gt;.
Let’s take a look at how the plugin makes it trivial to use Puppet to perform
some or all of the deployment tasks in continuous delivery pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Pipeline introduced an amazing world where the definition for a
pipeline is managed from the same version control repository as the code
delivered by the pipeline. This is a powerful idea, and one I felt complemented
Puppet’s automation strengths. I wanted to make it trivial to control Puppet
Enterprise’s orchestration and infrastructure code management capabilities, as
well as set hierarchical configuration data and use Puppet’s inventory data
system as a source of truth – all from a Pipeline script. The result was the
Puppet Enterprise plugin, which fully buys into the Pipeline ideals by
providing methods to control the different capabilities in Puppet Enterprise.
The methods provide ways to query
&lt;a href=&quot;https://docs.puppet.com/puppetdb/4.3/&quot;&gt;PuppetDB&lt;/a&gt;, set
&lt;a href=&quot;https://docs.puppet.com/hiera/3.2/&quot;&gt;Hiera&lt;/a&gt; key/value pairs, deploy
Puppet code environments with
&lt;a href=&quot;https://docs.puppet.com/pe/latest/code_mgr.html&quot;&gt;Code Management&lt;/a&gt;, and kick off orchestrated Puppet runs with the
&lt;a href=&quot;https://docs.puppet.com/pe/latest/app_orchestration_overview.html&quot;&gt;Orchestrator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-puppet-enterprise-for-jenkins-pipeline-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-puppet-enterprise-for-jenkins-pipeline-plugin&quot;&gt;&lt;/a&gt;The Puppet Enterprise for Jenkins Pipeline plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Puppet Enterprise for Jenkins Pipeline plugin itself has zero system
dependencies. You need only to install the plugin from the update center. The
plugin uses APIs available in Puppet Enterprise to do its work. Since the
PuppetDB query, Code Management, and Orchestrator APIs are all
backed by Puppet Enterprise’s role-based access control (RBAC) system, it’s
easy to restrict what pipelines are allowed to control in Puppet Enterprise. To
learn more about RBAC in Puppet Enterprise,
&lt;a href=&quot;https://docs.puppet.com/pe/latest/rbac_intro.html&quot;&gt;read the docs here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring&quot;&gt;&lt;/a&gt;Configuring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuring the plugin is fairly straight forward. It takes three simple steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Set the address of the Puppet server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Jenkins credential with a Pupppet Enterprise RBAC authentication token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the Hiera backend&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;set-the-puppet-enterprise-server-address&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set-the-puppet-enterprise-server-address&quot;&gt;&lt;/a&gt;Set the Puppet Enterprise Server Address&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to Jenkins &amp;gt; Manage Jenkins &amp;gt; Puppet Enterprise page. Put the DNS address of
the Puppet server in the &lt;strong&gt;Puppet Master Address&lt;/strong&gt; text field. Click the &lt;strong&gt;Test
Connection&lt;/strong&gt; button to verify the server is reachable, the Puppet CA certificate
is retrievable, and HTTPS connections are successful. Once the test succeeds,
Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-jenkins-credentials-entry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-jenkins-credentials-entry&quot;&gt;&lt;/a&gt;Create a Jenkins Credentials Entry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin uses the Jenkins built-in credentials system (the plain-credentials
plugin) to store and refer RBAC tokens to Puppet Enterprise for authentication
and authorization. First, generate an RBAC token in Puppet Enterprise by
following
&lt;a href=&quot;https://docs.puppet.com/pe/latest/rbac_token_auth.html#generating-a-token-for-use-by-a-service&quot;&gt;the
instructions on the docs site.&lt;/a&gt; Next, create a new Jenkins Credentials item
with Kind &lt;strong&gt;Secret text&lt;/strong&gt; and the &lt;strong&gt;Secret&lt;/strong&gt; value the Puppet Enterprise RBAC
token. It’s highly recommended to give the credential an ID value that’s
descriptive and identifiable. You’ll use it in your Pipeline scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In your Jenkinsfile, use the &lt;code&gt;puppet.credentials&lt;/code&gt; method to set all future Puppet
methods to use the RBAC token. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.credentials &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pe-team-token&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-the-hiera-backend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-the-hiera-backend&quot;&gt;&lt;/a&gt;Configure the Hiera Backend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin exposes an HTTP API for performing Hiera data lookups for key/value
pairs managed by Pipeline jobs. To configure Hiera on the Puppet compile
master(s) to query the Jenkins Hiera data store backend, use the
&lt;a href=&quot;https://github.com/crayfishx/hiera-http&quot;&gt;hiera-http&lt;/a&gt; backend. On the
Puppet Enterprise compile master(s), run the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;/opt/puppetlabs/puppet/bin/gem install hiera-http
/opt/puppetlabs/bin/puppetserver gem install hiera-http&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can configure the /etc/puppetlabs/puppet/hiera.yaml file. The following
configuration instructs Hiera to first look to the Hiera yaml files in the
Puppet code’s environment, then fall back to the http backend. The http backend
will first query the Hiera data store API looking for the key in the scope with
the same name as the node. If nothing’s found, look for the key in the node’s
environments. You can use any Facter fact to match scope names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;:backends:
  - yaml
  - http

:http:
  :host: jenkins.example.com
  :port: 8080
  :output: json
  :use_auth: true
  :auth_user: &amp;lt;user&amp;gt;
  :auth_pass: &amp;lt;pass&amp;gt;
  :cache_timeout: 10
  :failure: graceful
  :paths:
    - /hiera/lookup?path=%{clientcert}&amp;amp;key=%{key}
    - /hiera/lookup?path=%{environment}&amp;amp;key=%{key}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, restart the pe-puppetserver process to pick up the new configs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=stopped
/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=running&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;hiera-http-authentication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hiera-http-authentication&quot;&gt;&lt;/a&gt;Hiera HTTP Authentication&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Jenkins' Global Security is configured to allow unauthenticated read-only
access, the &lt;em&gt;use_auth&lt;/em&gt;, &lt;em&gt;auth_pass&lt;/em&gt;, and &lt;em&gt;auth_user&lt;/em&gt; parameters are
unnecessary. Otherwise, create a local Jenkins user that has permissions to
view the Hiera Data Lookup page and use that user’s credentials for the
hiera.yaml configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;querying-the-infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#querying-the-infrastructure&quot;&gt;&lt;/a&gt;Querying the infrastructure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PuppetDB is an extensive data store that holds every bit of information Puppet
generates and collects across every system Puppet is installed on. PuppetDB
provides a sweet query language called
&lt;a href=&quot;https://docs.puppet.com/puppetdb/4.3/api/query/v4/pql.html&quot;&gt;PQL.&lt;/a&gt; With PQL,
you can ask complex questions of your infrastructure such as &quot;How many
production Red Hat systems are there with the openssl package installed?&quot; or
&quot;What us-west-2c nodes with the MyApp role that were created in the last 24
hours?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be a powerful tool for parts of your pipeline where you need to
perform specific operations on subsets of the infrastructure like draining a
loadbalancer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s an example using the &lt;code&gt;puppet.query&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;results = puppet.query &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
  inventory[certname] {
    facts.os.name = &quot;RedHat&quot; and
    facts.ec2_metadata.placement.availability-zone = &quot;us-west-2c&quot; and
    facts.uptime_hours &amp;lt; 24
  }&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The query returns an array of matching items. The results can be
iterated on, and even passed to a series of &lt;code&gt;puppet.job&lt;/code&gt; calls. For example, the
following code will query all nodes in production that experienced a failure on
the last Puppet run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;results = puppet.query &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;nodes { latest_report_status = &quot;failed&quot; and catalog_environment = &quot;production&quot;}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that once you can use closures in Pipeline scripts, doing the above
example will be much simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-an-orchestrator-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-an-orchestrator-job&quot;&gt;&lt;/a&gt;Creating an orchestrator job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The orchestration service in Puppet Enterprise is a tool to perform
orchestrated Puppet runs across as broad or as targeted an infrastructure as
you need at different parts of a pipeline. You can use the orchestrator to
update applications in an environment, or update a specific list of nodes, or
update nodes across a set of nodes that match certain criteria. In each
scenario, Puppet will always push distributed changes in the correct order by
respecting the cross-node dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a job in the Puppet orchestrator from a Jenkins pipeline, use the
&lt;code&gt;puppet.job&lt;/code&gt; method. The &lt;code&gt;puppet.job&lt;/code&gt; method will create a new orchestrator job,
monitor the job for completion, and determine if any Puppet runs failed. If
there were failures, the pipeline will fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following are just some examples of how to run Puppet orchestration jobs against the infrastructure you need to target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target an entire environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target instances of an application in production:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;application&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Myapp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target a specific list of nodes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;nodes&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;db.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;appserver01.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;appserver02.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target nodes matching a complex set if criteria:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;query&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;inventory[certname] { facts.os.name = &quot;RedHat&quot; and facts.ec2_metadata.placement.availability-zone = &quot;us-west-2c&quot; and uptime_hours &amp;lt; 24 }&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the &lt;code&gt;puppet.job&lt;/code&gt; command means you can be as broad or as targeted
as you need to be for different parts of your pipeline. There are many other
options you can add to the &lt;code&gt;puppet.job&lt;/code&gt; method call, such as setting the Puppet
runs to noop, or giving the orchestrator a maximum concurrency limit.
&lt;a href=&quot;https://puppet.com/product/capabilities/application-orchestration&quot;&gt;Learn
more about the orchestrator here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;updating-puppet-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#updating-puppet-code&quot;&gt;&lt;/a&gt;Updating Puppet code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re using Code Management in Puppet Enterprise (and you should), you can
ensure that all the modules, site manifests, Hiera data, and roles and profiles
are staged, synced, and ready across all your Puppet masters, direct from your
Jenkins pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update Puppet code across all Puppet masters, use the &lt;code&gt;puppet.codeDeploy&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.codeDeploy &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://puppet.com/product/capabilities/code-management&quot;&gt;Learn more Code Management in Puppet Enterprise here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-hiera-values&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-hiera-values&quot;&gt;&lt;/a&gt;Setting Hiera values&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin includes an experimental feature to set Hiera key/value pairs. There
are many cases where you need to promote information through a pipeline, such
as a build version or artifact location. Doing so is very difficult in Puppet,
since data promotion almost always involves changing Hiera files and committing
to version control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin exposes an HTTP API endpoint that Hiera can query using the
hiera-http backend. With the backend configured on the Puppet master(s),
key/value pairs can be set to scopes. A scope is arbitrary and can be anything
you like, such as a Puppet environment, a node’s certname, or the name of a
Facter fact like operatingsystem or domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To set a Hiera value from a pipeline, use the &lt;code&gt;puppet.hiera&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.hiera &lt;span style=&quot;color:#606&quot;&gt;scope&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build-version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: env.BUILD_ID&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can set the same key with the same value to the production scope later
in the pipeline, followed by a call to &lt;code&gt;puppet.job&lt;/code&gt; to push the change out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://github.com/jenkinsci/puppet-enterprise-pipeline-plugin/tree/master/examples&quot;&gt;plugin’s
Github repository&lt;/a&gt; contains a set of example Pipeline scripts. Feel free to
issue pull requests to add your own scripts!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m pretty excited to see how this is going to help simplify continuous
delivery pipelines. I encourage everyone to get started with continuous
delivery today, even if it’s just a simple pipeline. As your practices evolve,
you can begin to add automated tests, automate away manual checkpoints, start
to incorporate InfoSec tests, and include phases for practices like patch
management that require lots of manual approvals, verifications and rollouts.
You’ll be glad you did.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/</id>
<title>Announcing the beta of Declarative Pipeline Syntax</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-12-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/" />
<author>
<name>hrmpw</name>
</author>
<category term="pipeline"></category>
<category term="blueocean"></category>
<summary>
Last week we released version 0.7.1 of the
Pipeline-Model-Defintion
plugin and wanted to crown it as the official Beta version of the Declarative
Pipeline syntax. Although it has been available in the update center
since August,
we continue to solidify the syntax. We feel this release is getting
very close to the final version and should not change much before 1.0. However,
it is still a Beta so further tweaks are possible.









A release (0.8.0) is planned for early January 2017 which will finalize the
syntax with the following changes:
JENKINS-40524,
JENKINS-40370,
JENKINS-40462,
JENKINS-40337






What is Declarative Pipeline?


All the way back at Jenkins World in September, Andrew Bayer presented a
sneak peak
of a new syntax...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week we released version 0.7.1 of the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Model+Definition+Plugin&quot;&gt;&lt;em&gt;Pipeline-Model-Defintion&lt;/em&gt;&lt;/a&gt;
plugin and wanted to crown it as the official Beta version of the Declarative
Pipeline syntax. Although it has been available in the update center
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/&quot;&gt;since August&lt;/a&gt;,
we continue to solidify the syntax. We feel this release is getting
very close to the final version and should not change much before 1.0. However,
it is still a Beta so further tweaks are possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A release (0.8.0) is planned for early January 2017 which will finalize the
syntax with the following changes:
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40524&quot;&gt;JENKINS-40524&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40370&quot;&gt;JENKINS-40370&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40462&quot;&gt;JENKINS-40462&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40337&quot;&gt;JENKINS-40337&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-declarative-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-declarative-pipeline&quot;&gt;&lt;/a&gt;What is Declarative Pipeline?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the way back at Jenkins World in September, Andrew Bayer presented a
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;sneak peak&lt;/a&gt;
of a new syntax for constructing Pipelines. We are calling this new syntax
Declarative Pipeline to differentiate it from the existing Scripted Pipeline
syntax that has always been a part of Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After listening to many Jenkins users over the last year we felt that, while
Pipeline Script provides tremendous power, flexibility, and extensibility, the
learning curve for Scripted Pipeline was steep for users new to either Jenkins
or Pipeline. Beginning users wanting to take advantage of all the features
provided by Pipeline and Jenkinsfiles were required to learn Scripted Pipeline
or remain limited to the functionality provided by Freestyle jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline does not replace Scripted Pipeline but extends Pipeline it
with a pre-defined structure to let users focus entirely on the &lt;code&gt;steps&lt;/code&gt;
required at each &lt;code&gt;stage&lt;/code&gt; without needing to worry about scripting every aspect
of the pipeline. Granular flow-control is extremely powerful and Scripted
Pipeline syntax will always be part of Pipeline but it’s not for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline enables all users to connect simple, declarative blocks
that define agents (including Docker), post actions, environment
settings, credentials and all stages that make up the pipeline. Best of all,
because this Declarative syntax is part of Pipeline, all build steps and build
wrappers available in Plugins or loaded from Shared Libraries are also
available as &lt;code&gt;steps&lt;/code&gt; in Declarative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is an example of a pipeline in Declarative syntax. You can also switch the view to show the same pipeline in Scripted syntax.
 The Declarative syntax has a more straightforward structure that is easier to grok by users not versed in Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent  &lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;has-docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;dockerfile&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
  environment {
    GIT_COMMITTER_NAME = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    GIT_COMMITTER_EMAIL = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins@jenkins.io&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
  stages {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
      steps {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Archive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;){
      steps {
        archive &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/**/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
  }
  post {
    always {
      deleteDir()
    }
    success {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Yay, we passed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    failure {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Boo, we failed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Scripted Pipeline&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_COMMITTER_NAME = jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_COMMITTER_EMAIL = jenkins@jenkins.io&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]) {
  node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;has-docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
      checkout scm &lt;span style=&quot;color:#777&quot;&gt;// checks out Dockerfile and source code&lt;/span&gt;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; myImage = docker.build &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;my-environment:snapshot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      myImage.inside {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
          sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Archive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
          archive &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/**/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt; || currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Yay, we passed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      }
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (exc) {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Boo, we failed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt; {
      deleteDir()
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-you-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-you-help&quot;&gt;&lt;/a&gt;How can you help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the lastest version of the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Model+Definition+Plugin&quot;&gt;&lt;em&gt;Pipeline-Model-Defintion&lt;/em&gt;&lt;/a&gt; plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the documentation:
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/getting%20started&quot;&gt;Getting Started&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/master/SYNTAX.md&quot;&gt;Syntax overview&lt;/a&gt;.
(These documents will be incorporated into the Jenkins.io documentation.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert some of your existing Pipeline scripts into Declarative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log any issues or enhancements you have
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40493&quot;&gt;here&lt;/a&gt;
for the syntax, the execution, or the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask questions. You can send questions to the
&lt;a href=&quot;mailto:jenkinsci-users@googlegroups.com&quot;&gt;users mailing list&lt;/a&gt;
or visit the &lt;code&gt;#jenkins&lt;/code&gt; channel on IRC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-will-this-work-with-blue-ocean&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-will-this-work-with-blue-ocean&quot;&gt;&lt;/a&gt;How will this work with Blue Ocean?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Blue Ocean is all about Pipelines in Jenkins. Running, displaying, and soon,
creating Pipelines.  Blue Ocean will be able to run and display Pipelines
written in this new syntax just like any other Pipeline works today. However,
because Declarative Pipeline includes a pre-defined structure, or model, it is
now possible to create and edit pipelines with a GUI editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean/pipeline-editor.png&quot; alt=&quot;Pipeline Editor&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although we plan to launch 1.0 of Declarative Pipeline before Blue Ocean 1.0 is
officially available, we expect to have a working Beta of the Editor available
to play with. The combination of a simple syntax and an intuitive editor
should make creating Jenkins Pipelines a breeze.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;happy-holidays&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#happy-holidays&quot;&gt;&lt;/a&gt;Happy Holidays&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope everyone has a great end of the year and a Happy New Year. With
Declarative Pipeline and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
we expect great things for Jenkins in 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/10/monthly-jam-recap-november/</id>
<title>Monthly JAM Recap - November 2016</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/10/monthly-jam-recap-november/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="jam"></category>
<category term="meetup"></category>
<summary>
As we near the end of the year, the number of November JAMs show that the
Jenkins community isn&#8217;t slowing down for holiday season. We had a number of
excellent events hosted around the world this November with plenty of great
stories and presentations shared by the various members of the world-wide
Jenkins community.


Melbourne, Australia JAM

Melbourne JAM leaders,
Raisa
and
Bhuva
hosted Blue Ocean for the inaugural meeting. Attendees learned the values of
Blue Ocean, a project that rethinks the user experience of Jenkins, modeling
and presenting the process of software delivery by surfacing information that
is important to development teams with as few clicks as possible, while still
staying true to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we near the end of the year, the number of November JAMs show that the
Jenkins community isn’t slowing down for holiday season. We had a number of
excellent events hosted &lt;em&gt;around the world&lt;/em&gt; this November with plenty of great
stories and presentations shared by the various members of the world-wide
Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;melbourne-australia-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#melbourne-australia-jam&quot;&gt;&lt;/a&gt;Melbourne, Australia JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Melbourne JAM leaders,
&lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/members/192742554/&quot;&gt;Raisa&lt;/a&gt;
and
&lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/members/77780422/&quot;&gt;Bhuva&lt;/a&gt;
hosted Blue Ocean for the inaugural meeting. Attendees learned the values of
Blue Ocean, a project that rethinks the user experience of Jenkins, modeling
and presenting the process of software delivery by surfacing information that
is important to development teams with as few clicks as possible, while still
staying true to the extensibility that Jenkins always has had as a core value.
Thank you &lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt; for stopping by to take part in
the inauguration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/melbourne.png&quot; alt=&quot;Melbourne JAM&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;singapore-singapore-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#singapore-singapore-jam&quot;&gt;&lt;/a&gt;Singapore, Singapore JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the members  who had several years of experience using Jenkins (since
Hudson days in fact) to present some basics on Continuous Integration with
GitHub. It was targeted at new members who are starting out with Jenkins. We
understand that we cannot always serve advanced topics to cater to the
experienced users and neglect the newbies so this session was targeted to help
give new users an introduction to Jenkins. It went well with about 15-20
attendees and we hope to run some hands-on workshops in 2017. Some members were
looking forward to freebies like stickers and T-shirts too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/singapore-prep.png&quot; alt=&quot;Singapore JAM prep&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/singapore-jam.png&quot; alt=&quot;Singapore JAM&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;moscow-russia-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moscow-russia-jam&quot;&gt;&lt;/a&gt;Moscow, Russia JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moscow JAM leaders,
&lt;a href=&quot;https://twitter.com/tolkv&quot;&gt;Kirill Tolkachev&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;
led the inaugural meeting with
a packed full agenda. Oleg began the meeting with an update on Jenkins 2 what improvements users can expect and what
enhancements are in the works within the Jenkins project. Following Oleg, Kirill shared
how his team in Alfa Laboratory used Jenkins to improve CD/DevOps in their
projects (with Jenkins Pipeline, Job DSL and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
), the problems they experienced and how they fixed them. Then Oleg talked
about Jenkins Pipeline internals, main features and recent changes in the
ecosystem. It was followed up by a discussion of large-scale Jenkins instances
at the after-party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recording of the event can be found
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLTur3n9C14XFbfD2gT3CRcwBwobKOvRHJ&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;milan-italy-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milan-italy-jam&quot;&gt;&lt;/a&gt;Milan, Italy JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first meetup was a great opportunity to meet local Jenkins fans to learn
and share Jenkins experiences at a local cafe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-california-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-california-jam&quot;&gt;&lt;/a&gt;San Francisco, California JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;
performed a 30 minutes live Pipeline coding demo to a relatively novice
audience (though all had used Jenkins). A good amount of questions from the
audience  which conveyed an appetite for the content being presented.
&lt;a href=&quot;https://twitter.com/RyanWallner&quot;&gt;Ryan Wallner&lt;/a&gt;,
presenter from ClusterHQ, also gave a demo based around Pipeline talking about
ClusterHQ’s &quot;Fli&quot; integration with a delivery pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/IMG_0999.JPG&quot; alt=&quot;ClusterHQ &amp;amp; Jenkins stickers&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/IMG_1004.JPG&quot; alt=&quot;Tyler presenting&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;washington-dc-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#washington-dc-jam&quot;&gt;&lt;/a&gt;Washington, DC JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was a fantastic 90% showup rate at this month’s meetup - 58 RSVPs and 52
in attendance was pretty impressive. All this may be due to Fannie Mae’s story
- the success of how they used Jenkins for CI/CD as part of their DevOps
adoption. Afterwards, there was a lot of interests and further discussions
taking place. Next month’s host will be Freddie Mac.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;seattle-washington-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#seattle-washington-jam&quot;&gt;&lt;/a&gt;Seattle, Washington JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Long time Jenkins community member and Seattle JAM leader,
&lt;a href=&quot;https://github.com/khaido&quot;&gt;Khai Do&lt;/a&gt; showed how OpenStack uses &quot;Jenkins Job
Builder&quot; to manage and run thousands of Jenkins jobs per day in their
multi-master CI/CD system.  He also compared
&lt;a href=&quot;http://docs.openstack.org/infra/jenkins-job-builder/&quot;&gt;Jenkins Job Builder&lt;/a&gt;
with other Jenkins &quot;Infrastructure-as-code&quot; technologies - Jenkins Pipeline and
Jenkins JobDSL. It was followed by an in-depth Q&amp;amp;A and discussion session.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;/a&gt;Dallas/Forth Worth, Texas (DFW) JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The November DFW JAM was the most strongly attended of the year! DFW JAM leader,
&lt;a href=&quot;https://github.com/ericsmalling&quot;&gt;Eric Smalling&lt;/a&gt; discussed the benefits of
dynamic build agents and demonstrated various ways to implement them such as
the EC2 and Docker plugins. There was a lot of interest and discussion,
especially around Docker and the ability it provides to have ephemeral agents
with very little provisioning time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recording can be downloaded from
&lt;a href=&quot;https://drive.google.com/file/d/0BzW9GvvtcA5naDRNeXVDOTY0X28/view&quot;&gt;Gooel Drive&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Area+Meetup&quot;&gt;JAM member&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be a JAM speaker or sponsor. Let us know &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/09/december-jenkins-events/</id>
<title>Upcoming December Jenkins Events</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-12-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/09/december-jenkins-events/" />
<author>
<name>alyssat</name>
</author>
<category term="events"></category>
<category term="jam"></category>
<summary>
Happy Holidays! A special shout out to all JAM leaders who continue to keep
local activities going in December.


Online JAM



December 14 | Live Demos: Pipeline, Git, and Blue Ocean





North America



December 7 | Seattle JAM: Jenkins at Microsoft


December 14 | Los Angeles JAM: Jenkins Days


December 14 | Guadalajara JAM: Jenkins &amp; Docker





Australia



December 14 | Melbourne JAM: Meeting at AWS Office





Links



Start a JAM in your city if there isn&#8217;t one already.


Become a JAM member


Become an online JAM member


Speak or sponsor at a JAM. Contact us at jenkinsci-jam@googlegroups.com


Become a Jenkins project contributor...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Holidays! A special shout out to all JAM leaders who continue to keep
local activities going in December.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;online-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#online-jam&quot;&gt;&lt;/a&gt;Online JAM&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 14 | &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/235898656/&quot;&gt;Live Demos: Pipeline, Git, and Blue Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;north-america&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#north-america&quot;&gt;&lt;/a&gt;North America&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 7 | Seattle JAM: &lt;a href=&quot;https://www.meetup.com/Seattle-Jenkins-Area-Meetup/events/235189240/&quot;&gt;Jenkins at Microsoft&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Los Angeles JAM: &lt;a href=&quot;https://www.meetup.com/Los-Angeles-Jenkins-Area-Meetup/events/235925065/&quot;&gt;Jenkins Days&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Guadalajara JAM: &lt;a href=&quot;https://www.meetup.com/Guadalajara-Jenkins-Area-Meetup/events/234929920/&quot;&gt;Jenkins &amp;amp; Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;australia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#australia&quot;&gt;&lt;/a&gt;Australia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Melbourne JAM: &lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/events/235872607/&quot;&gt;Meeting at AWS Office&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speak or sponsor at a JAM. Contact us at &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/</id>
<title>What JVM versions are running Jenkins? 2016 Update!</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/" />
<author>
<name>batmat</name>
</author>
<category term="statistics"></category>
<summary>
Like for last year&#8217;s article about the same subject, yet another recent discussion about finally requiring Java 8 to run future versions Jenkins pushed me to gather some more factual data around it.








What follows contains some opinions or statements which may not be seen as purely factual or neutral. Note that this represents by no mean the general position of the Jenkins governance board. This is solely my opinion as a contributor based on the data I gathered, and what I feel from the feedback of the community at large.





Java 8 now the most used version, and growing


If we look...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like for &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2015/11/03/what-jvm-versions-are-running-jenkins/&quot;&gt;last year’s article about the same subject&lt;/a&gt;, yet another &lt;a href=&quot;https://groups.google.com/forum/?utm_medium=email&amp;amp;utm_source=footer#!msg/jenkinsci-dev/fo5nKLhZK5U/Zb9jHpBJBQAJ&quot;&gt;recent discussion about finally requiring Java 8 to run future versions Jenkins&lt;/a&gt; pushed me to gather some more factual data around it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
What follows contains some opinions or statements which may not be seen as purely factual or neutral. Note that this represents by no mean the general position of the Jenkins governance board. This is solely my opinion as a contributor based on the data I gathered, and what I feel from the feedback of the community at large.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-8-now-the-most-used-version-and-growing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-8-now-the-most-used-version-and-growing&quot;&gt;&lt;/a&gt;Java 8 now the most used version, and growing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we look at the global numbers, Java 8 runtimes now represent 52.8% of the Jenkins instances running, which have not opted out of anonymous usage statistics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jvm-versions/2016-jvm-stats-all.png&quot; alt=&quot;2016 jvm stats all&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you look at the trend, Java 8 is clearly growing fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;zooming-into-the-jenkins-2-x-instances-subset&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zooming-into-the-jenkins-2-x-instances-subset&quot;&gt;&lt;/a&gt;Zooming into the Jenkins 2.x instances subset&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, if you look at that picture, though already interesting and showing a clear trend towards Java 8 runtime adoption, some might argue it’s being too nice to older JREs.
The reasoning could be: instances running (very) old Jenkins versions may not be the ones you want to look at when trying to plan the future of an opensource project:
those are indeed probably not going to upgrade in general anyway, or when they do, upgrading the JRE would be a small thing compared to the rest to be tested with such a gap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if we only keep the instances running Jenkins 2.x, then the proportion of Java 8 goes to almost 70% compared to Java 7 (Jenkins 2.x requires Java 7)
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jvm-versions/2016-jvm-stats-only-2.x.png&quot; alt=&quot;2016 jvm stats only 2.x&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 8 adoption numbers are getting bigger, while every other JREs are going down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are still using a JRE 7 to run Jenkins, it is seriously time to think
about upgrading to 8.  Knowing that it’s definitely not a bleeding-edge path
might help you go that way, especially if you generally do not like upgrades.
Also, as a reminder, the most used JDK,
&lt;a href=&quot;https://java.com/en/download/faq/java_7.xml&quot;&gt;Oracle JDK 7 now got end-of-lifed more than 18 months ago&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contrary to the past attempts the previous years, the discussion on the Jenkins
development mailing list did not trigger strong rebutals by many people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perhaps it’s finally time for Mr. Jenkins to upgrade to Java 8!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All numbers shown below are derived from the new &lt;a href=&quot;stats.jenkins.io/plugin-installation-trend/jvms.json&quot;&gt;&lt;code&gt;jvms.json&lt;/code&gt;&lt;/a&gt; file now generated automatically every month, after the two related pull-requests  &lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/pull/21&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/pull/22&quot;&gt;2&lt;/a&gt; got merged.
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. 69% for October, 67% in September
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. You are more than welcome to review those Pull-Requests and shout if you see something wrong in the calculations.
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/21/gc-tuning/</id>
<title>Tuning Jenkins GC For Responsiveness and Stability with Large Instances</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/21/gc-tuning/" />
<author>
<name>svanoort</name>
</author>
<category term="performance"></category>
<category term="scalability"></category>
<category term="administration"></category>
<summary>
This is a
cross
post by Sam Van Oort, Software Engineer at
CloudBees and contributor to the Jenkins project.






Today I&#8217;m going to show you how easy it is to tune Jenkins Java settings to
make your masters more responsive and stable, especially with large heap sizes.


The Magic Settings:



Basics: -server -XX:+AlwaysPreTouch


GC Logging: -Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy


G1 GC settings: -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1


Heap settings: set your minimum heap size (-Xms) to at least 1/2 of your maximum size (-Xmx).




Now, let&#8217;s look at where those came from!  We&#8217;re going to focus on garbage
collection (GC)...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a
&lt;a href=&quot;https://www.cloudbees.com/blog/joining-big-leagues-tuning-jenkins-gc-responsiveness-and-stability&quot;&gt;cross
post&lt;/a&gt; by &lt;a href=&quot;https://github.com/svanoort&quot;&gt;Sam Van Oort&lt;/a&gt;, Software Engineer at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; and contributor to the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today I’m going to show you how easy it is to tune Jenkins Java settings to
make your masters more responsive and stable, especially with large heap sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-magic-settings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-magic-settings&quot;&gt;&lt;/a&gt;The Magic Settings:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basics:&lt;/strong&gt; &lt;code&gt;-server -XX:+AlwaysPreTouch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GC Logging:&lt;/strong&gt; &lt;code&gt;-Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;G1 GC settings:&lt;/strong&gt; &lt;code&gt;-XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Heap settings:&lt;/strong&gt; set your minimum heap size (&lt;code&gt;-Xms&lt;/code&gt;) to at least 1/2 of your maximum size (&lt;code&gt;-Xmx&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let’s look at where those came from!  We’re going to focus on garbage
collection (GC) here and dig fast and deep to strike for gold; if you’re not
familiar with GC fundamentals
&lt;a href=&quot;http://blog.takipi.com/garbage-collectors-serial-vs-parallel-vs-cms-vs-the-g1-and-whats-new-in-java-8/&quot;&gt;take a look at this source&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because performance tuning is data driven, I’m going to use real-world data
selected three very large Jenkins instances that I help support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What we’re not going to do:&lt;/strong&gt; Jenkins basics, or play with max heap.  See the
section &quot;what should I do before tuning.&quot;  This is for cases where we really
&lt;strong&gt;do&lt;/strong&gt; need a big heap and can’t easily split our Jenkins masters into smaller
ones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-problem-hangups&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem-hangups&quot;&gt;&lt;/a&gt;The Problem: Hangups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Symptom: Users report that the Jenkins instance periodically hangs, taking
several seconds to handle normally fast requests.  We may even see lockups or
timeouts from systems communicating with the Jenkins master (build agents,
etc).  In long periods of heavy load, users may report Jenkins running slowly.
Application monitoring shows that during lockups all or most of the CPU cores
are fully loaded, but there’s not enough activity to justify it.  Process and
JStack dumps will reveal that the most active Java threads are doing garbage
collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Instance A, they had this problem.  Their Jenkins Java arguments are very
close to the default, aside from sizing the heap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;24 GB max heap, 4 GB initial, default GC settings (ParallelGC)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A few flags set (some coming in as defaults): &lt;code&gt;-XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:+ReduceSignalUsage -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After enabling garbage collection (GC) logging we see the following rough stats:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-bulkstats-CompanyA-red-parallelgc.png&quot; alt=&quot;HeapStats Instance A System Red CPU use-parallelGC&quot; /&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diving deeper, we get this chart of GC pause durations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyA-red-parallelgc.png&quot; alt=&quot;Instance A Jenkins Red GC duration use-parallelGC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.64%  (percent of time spent executing application code, not doing garbage collection)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 348 ms (ugh!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 36 (2.7%)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 263 ms / 2.803 sec&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 42.4 MB/s &amp;amp; 1.99 MB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Explanations:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, young GC cycles very quickly clear away freshly-created
garbage, but the deeper old-gen GC cycles run very slowly: 2-4 seconds. This is
where our problems happen.  The default Java garbage collection algorithm
(ParallelGC) pauses everything when it has to collect garbage (often called a
&quot;stop the world pause&quot;). During that period, Jenkins is fully halted: normally
(with small heaps) these pauses are too brief to be an issue.  With heaps of 4
GB or larger, the time required becomes long enough to be a problem: several
seconds over short windows, and over a longer interval you occasionally see
much longer pauses (tens of seconds, or minutes.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is where the user-visible hangs and lock-ups happen.  It also adds
significant latency to those build/deploy tasks.  In periods of heavy load, the
system was even experiencing hangs of 30+ seconds for a single full GC cycle.
This was long enough to trigger network timeouts (or internal Jenkins thread
timeouts) and cause even larger problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately there’s a solution: the concurrent low-pause garbage collection
algorithms, Concurrent Mark Sweep (CMS) and Garbage First (G1). These attempt
to do much of the garbage collection concurrently with application threads,
resulting in much shorter pauses (at a slight cost in extra CPU use).  We’re
going to focus on G1, because it is slated to become the default in Java 9 and
is the official recommendation for large heap sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Let’s see what happens when someone uses G1 on a similarly-sized Jenkins
master with Instance B (17 GB heap):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Their settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;16 GB max heap, 0.5 GB initial size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java flags (mostly defaults, except for G1): &lt;code&gt;-XX:+UseG1GC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the GC log analysis:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyB-g1.png&quot; alt=&quot;Instance B Jenkins G1 duration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 98.76%  (not great, but still only slowing things down a bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 128 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 11, 0.27%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 122 ms / 1 sec 232 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 132.53 MB/s &amp;amp; 522 KB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, &lt;strong&gt;much better&lt;/strong&gt;: some improvement may be expected from a 30% smaller
heap, but not as much as we’ve seen.  Most of the GC pauses are well
under 2 seconds, but we have 11 outliers - long Full GC pauses of 2-12 seconds.
Those are troubling; we’ll take a deeper dive into their causes in a second.
First, let’s look at the big picture and at how Jenkins behaves with G1 GC for
a second instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 Garbage Collection with Instance C (24 GB heap):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Their settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;24 GB max heap, 24 GB initial heap, 2 GB max metaspace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some custom flags: `-XX:+UseG1GC -XX:+AlwaysPreTouch -XX:+UseStringDeduplication  -XX:+UseCompressedClassPointers -XX:+UseCompressedOops `&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clearly they’ve done some garbage collection tuning and optimization.  The
AlwaysPreTouch pre-zeros allocated heap pages, rather than waiting until
they’re first used. This is suggested especially for large heap sizes, because
it trades slightly slower startup times for improved runtime performance.  Note
also that they pre-allocated the whole heap.  This is a common optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They also enabled StringDeduplication, a G1 option introduced in Java 8 Update
20 that transparently replaces identical character arrays with pointers to the
original, reducing memory use (and improving cache performance).  Think of it
like &lt;code&gt;String.intern()&lt;/code&gt; but it silently happens during garbage collection.  This
is a concurrent operation added on to normal GC cycles, so it doesn’t pause the
application.  We’ll look at its impacts later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at the basics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyC-g1.png&quot; alt=&quot;Instance C G1 duration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar picture to Instance B, but it’s hidden by the sheer number of points
(this is a longer period here, 1 month).  Those same occasional Full GC
outliers are present!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.93%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 127 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 235 (1.56%)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 56 ms / 3.97 sec&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 34.06 MB/s &amp;amp; 286 kb/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall fairly similar to Instance B: ~100 ms GC cycles, all the minor GC
cycles are very fast.  Object promotion rates sound similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Remember those random long pauses?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s find out what caused them and how to get rid of them.  Instance B had 11
super-long pause outliers.  Let’s get some more detail, by opening GC Logs in
&lt;a href=&quot;https://github.com/chewiebug/GCViewer&quot;&gt;GCViewer&lt;/a&gt;.
This tool gives a tremendous amount of information.  Too much, in fact —  I
prefer to use
&lt;a href=&quot;http://gceasy.io/&quot;&gt;GCEasy.io&lt;/a&gt;
except where needed.  Since GC logs do not contain compromising information
(unlike heap dumps or some stack traces), web apps are a great tool for
analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyB-g1-highlighted.png&quot; alt=&quot;Instance B Jenkins G1 causes&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we care about are at the Full GC times in the middle (highlighted).  See
how much longer they are vs. the young and concurrent GC cycles up top (2
seconds or less)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, I lied a bit earlier - sorry!  For concurrent garbage collectors, there
are actually 3 modes: young GC, concurrent GC, and full GC.  Concurrent GC
replaces the Full GC mode in Parallel GC with a faster concurrent operation
that runs in parallel with the application.  But in a few cases, we are
forced to fall back to a non-concurrent Full GC operation, which will use the
serial  (single-threaded) garbage collector.  That means that even if we have
30+ CPU cores, only one is working. This is what is happening here, and on a
large-heap, multicore system it is S  L  O  W.  How slow?  280 MB/s vs. 12487
MB/s for Instance B (for instance C, the difference is also about 50:1).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What triggers a full GC instead of concurrent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explicit calls to &lt;code&gt;System.gc()&lt;/code&gt;  (most common culprit, often tricky to trace down)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata GC Threshold: Metaspace (used for Class data mostly) has hit the
defined size to force garbage collection or increase it.  Documentation is
terrible for this,
&lt;a href=&quot;http://stackoverflow.com/questions/25251388/what-is-the-metadata-gc-threshold-and-how-do-i-tune-it&quot;&gt;Stack Overflow&lt;/a&gt;
will be your friend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent mode failure: concurrent GC can’t complete fast enough to keep up
with objects the application is creating (there are JVM arguments to trigger
concurrent GC earlier)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How do we fix this?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For explicit GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt; will turn off Full GC triggered by &lt;code&gt;System.gc()&lt;/code&gt;.  Often set in production, but the below option is safer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can trigger a concurrent GC in place of a full one with &lt;code&gt;-XX:+ExplicitGCInvokesConcurrent&lt;/code&gt; - this will take the explicit call as a hint to do deeper cleanup, but with less performance cost.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Gotcha for people who’ve used CMS:&lt;/strong&gt; if you have used CMS in the past, you
may have used the option &lt;code&gt;-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses&lt;/code&gt; — which does what it says.  This option will silently fail in G1, meaning you
still see the very long pauses from Full GC cycles as if it wasn’t set (no
warning is generated).  I have logged a JVM bug for this issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Metadata GC threshold:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Increase your initial metaspace to the final amount to avoid resizing. For example: &lt;code&gt;-XX:MetaspaceSize=500M&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instance C also suffered the same problem with explicit GC calls, with almost
all our outliers accounted for (230 out of 235) by slow, nonconcurrent Full GC
cycles (all from explicit &lt;code&gt;System.gc()&lt;/code&gt; calls, since they tuned metaspace):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyC-g1-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 GC causes&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what GC pause durations look like if we remove the log entries for the
explicit &lt;code&gt;System.gc()&lt;/code&gt; calls, assuming that they’ll blend in with the other
concurrent GC pauses (not 100% accurate, but a good approximation):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Instance B:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyB-g1-explicitremoved.png&quot; alt=&quot;Instance B Jenkins GC duration - G1 - no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The few long Full GC cycles at the start are from metaspace expansion — they
can be removed by increasing initial Metaspace size, as noted above. The
spikes?  That’s when we’re about to resize the Java heap, and memory pressure
is high.  &lt;strong&gt;You can avoid this by setting the minimum/initial heap to at least
half of the maximum, to limit resizing.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 98.93%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 111 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor &amp;amp; Full or concurrent GC average time: 122 ms / 25 ms (yes, faster than minor!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 132.07 MB/s &amp;amp; 522 kB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Instance C:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyC-g1-ExplicitRemoved.png&quot; alt=&quot;Instance C Jenkins G1 - no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.97%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 56 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 0 (!!!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor &amp;amp; Full or concurrent GC average time: 56 ms &amp;amp; 10 ms (yes, faster than minor!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 33.31 MB/s &amp;amp; 286 kB/s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Side point: GCViewer is claiming GC performance of 128 GB/s (not unreasonable, we clear ~10 GB of young generation in under 100 ms usually)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Okay, so we’ve tamed the long worst-case pauses!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;but-what-about-those-long-minor-gc-pauses-we-saw&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#but-what-about-those-long-minor-gc-pauses-we-saw&quot;&gt;&lt;/a&gt;But What About Those Long Minor GC Pauses We Saw?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, now we’re in the home stretch!  We’ve tamed the old-generation GC pauses
with concurrent collection, but what about those longer young-generation
pauses?  Lets look at stats for the different phases and causes again in
GCViewer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyB-g1-NOEXPLICIT-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 causes -no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Highlighted in yellow we see the culprit: the remark phase of G1 garbage
collection. This stop-the-world phase ensures we’ve identified all live
objects, and process references (
&lt;a href=&quot;https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All&quot;&gt;more info&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s look at a sample execution to get more info:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;2016-09-07T15:28:33.104+0000: 26230.652: [GC remark 26230.652: [GC ref-proc, 1.7204585 secs], 1.7440552 secs]

 [Times: user=1.78 sys=0.03, real=1.75 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This turns out to be typical for the GC log: the longest pauses are spent in
reference processing. This is not surprising because Jenkins internally uses
references heavily for caching, especially weak references, and the default
reference processing algorithm is single-threaded.  Note that user (CPU) time
matches real time, and it would be higher if we were using multiple cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we add the GC flag &lt;code&gt;-XX:+ParallelRefProcEnabled&lt;/code&gt; which enables us to use the multiple cores more effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Tuning young-generation GC further based on Instance C:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back to GCViewer we go, to see what’s time consuming with the GC for Instance C.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyC-g1-NOEXPLICIT-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 causes -no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s good, because most of the time is just sweeping out the trash
(evacuation pause).  But the 1.8 second pause looks odd.  Let’s look at the raw
GC log for the longest pause:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;2016-09-24T16:31:27.738-0700: 106414.347: [GC pause (G1 Evacuation Pause) (young), 1.8203527 secs]
[Parallel Time: 1796.4 ms, GC Workers: 8]
 [GC Worker Start (ms): Min: 106414348.2, Avg: 106414348.3, Max: 106414348.6, Diff: 0.4]
[Ext Root Scanning (ms): Min: 0.3, Avg: 1.7, Max: 5.7, Diff: 5.4, Sum: 14.0]
  [Update RS (ms): Min: 0.0, Avg: 7.0, Max: 19.6, Diff: 19.6, Sum: 55.9]
    [Processed Buffers: Min: 0, Avg: 45.1, Max: 146, Diff: 146, Sum: 361]
 [Scan RS (ms): Min: 0.2, Avg: 0.4, Max: 0.7, Diff: 0.6, Sum: 3.5]
 [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.2]
 [Object Copy (ms): Min: 1767.1, Avg: 1784.4, Max: 1792.6, Diff: 25.5, Sum: 14275.2]
 [Termination (ms): Min: 0.3, Avg: 2.4, Max: 3.5, Diff: 3.2, Sum: 19.3]
    [Termination Attempts: Min: 11, Avg: 142.5, Max: 294, Diff: 283, Sum: 1140]
 [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.3, Sum: 0.8]
 [GC Worker Total (ms): Min: 1795.9, Avg: 1796.1, Max: 1796.2, Diff: 0.3, Sum: 14368.9]
 [GC Worker End (ms): Min: 106416144.4, Avg: 106416144.5, Max: 106416144.5, Diff: 0.1]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;…​oh, well dang. Almost the entire time (1.792 s out of 1.820) is walking
through the live objects and copying them.  And wait, what about this line,
showing the summary statistics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;Eden: 13.0G(13.0G)-&amp;gt;0.0B(288.0M) Survivors: 1000.0M-&amp;gt;936.0M Heap: 20.6G(24.0G)-&amp;gt;7965.2M(24.0G)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good grief, we flushed out 13 GB (!!!) of freshly-allocated garbage in one
swoop and compacted the leftovers!  No wonder it was so slow.  I wonder how we
accumulated so much…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-younggen-CompanyC-g1-ExplicitRemoved.png&quot; alt=&quot;Instance C Jenkins G1-ExplictGC removed&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh, right…​ we set up for 24 GB of heap initially, and each minor GC clears
most of the young generation.  Okay, so we’ve set aside tons of space for trash
to collect, which means longer but less frequent GC periods.  This also gets
the best performance from Jenkins memory caches which are using WeakReferences
(survives until collected by GC) and SoftReferences (more long-lived). Those
caches boost performance a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could take actions to prevent those rare longer pauses. The best ways are to
limit total heap size or reduce the value of &lt;code&gt;-XX:MaxGCPauseMillis=200&lt;/code&gt; from
its default (200).  A more advanced way (if those don’t help enough) is to
explicitly set the maximum size of the young generation smaller (say
&lt;code&gt;-XX:G1MaxNewSizePercent=45&lt;/code&gt; instead of the default of 60).  We could also
throw more CPUs at the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if we look up, most pauses are around 100 ms (200 ms is the default value
for MaxGCPauseMillis).  For Jenkins on this hardware, this appears to work
&lt;strong&gt;just fine&lt;/strong&gt; and a rare longer pause is OK as long as they don’t get too
big.  Also remember, if this happens often, G1 GC will try to autotune for
lower pauses and more predictable performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-few-final-settings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-few-final-settings&quot;&gt;&lt;/a&gt;A Few Final Settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We mentioned StringDeduplication was on with Instance C, what is the impact?
This only triggers on Strings that have survived a few generations (most of our
garbage does not), has limits on the CPU time it can use, and replaces
duplicate references to their immutable backing character arrays.
&lt;a href=&quot;http://java-performance.info/java-string-deduplication/&quot;&gt;For more info, look here&lt;/a&gt;.
So, we should be trading a little CPU time for improved memory efficiently
(similarly to string interning).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the beginning, this has a huge impact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[GC concurrent-string-deduplication, 375.3K-&amp;gt;222.5K(152.8K), avg 63.0%, 0.0     024966 secs]
[GC concurrent-string-deduplication, 4178.8K-&amp;gt;965.5K(3213.2K), avg 65.3%, 0     .0272168 secs]
[GC concurrent-string-deduplication, 36.1M-&amp;gt;9702.6K(26.6M), avg 70.3%, 0.09     65196 secs]
[GC concurrent-string-deduplication, 4895.2K-&amp;gt;394.9K(4500.3K), avg 71.9%, 0     .0114704 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This peaks at an average of about ~90%:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After running for a month, less of an impact - many of the strings that can be
deduplicated already are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[GC concurrent-string-deduplication, 138.7K-&amp;gt;39.3K(99.4K), avg 68.2%, 0.0007080 secs]
[GC concurrent-string-deduplication, 27.3M-&amp;gt;21.5M(5945.1K), avg 68.1%, 0.0554714 secs]
[GC concurrent-string-deduplication, 304.0K-&amp;gt;48.5K(255.5K), avg 68.1%, 0.0021169 secs]
[GC concurrent-string-deduplication, 748.9K-&amp;gt;407.3K(341.7K), avg 68.1%, 0.0026401 secs]
[GC concurrent-string-deduplication, 3756.7K-&amp;gt;663.1K(3093.6K), avg 68.1%, 0.0270676 secs]
[GC concurrent-string-deduplication, 974.3K-&amp;gt;17.0K(957.3K), avg 68.1%, 0.0121952 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However it’s cheap to use: in average, each dedup cycle takes 8.8 ms and
removes 2.4 kB of duplicates.  The median takes 1.33 ms and removes 17.66 kB
from the old generation.  A small change per cycle, but in aggregate it adds up
quickly — in periods of heavy load, this can save hundreds of megabytes of
data. But that’s still small, relative to multi-GB heaps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: turn string deduplication on&lt;/strong&gt; string deduplication is fairly
cheap to use, and reduces the steady-state memory needed for Jenkins.  That
frees up more room for the young generation, and should overall reduce GC time
by removing duplicate objects.  I think it’s worth turning on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Soft reference flushing:&lt;/strong&gt; Jenkins uses soft references for caching build
records and in pipeline FlowNodes.  The only guarantee for these is that they
will be removed instead of causing an OutOfMemoryError…​ however Java
applications can slow to a crawl from memory pressure long before that happens.
There’s an option that provides a hint to the JVM based on time &amp;amp; free memory,
controlled by &lt;code&gt;-XX:SoftRefLRUPolicyMSPerMB&lt;/code&gt; (default 1000).  The SoftReferences
become eligible for garbage collection after this many milliseconds have
elapsed since last touch…​ per MB of unused heap (vs the maximum).  The
referenced objects don’t count towards that target.  So, with 10 GB of heap
free and the default 1000 ms setting, soft references stick around for ~2.8
hours (!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the system is continuously allocating more soft references, it may trigger
heavy GC activity, rather than clearing out soft references. See the open bug
&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-6912889&quot;&gt;JDK-6912889&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Jenkins consumes excessive old generation memory, it &lt;strong&gt;may&lt;/strong&gt; help to make soft
references easier to flush  by reducing -XX:SoftRefLRUPolicyMSPerMB from its
default (1000) to something smaller (say 10-200).  The catch is that
SoftReferences are often used for objects that are relatively expensive to
load, such lazy-loaded build records and pipeline FlowNode data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;caveats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caveats&quot;&gt;&lt;/a&gt;Caveats&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 vs. CMS:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 was available on later releases of JRE 7, but unstable and slow.&lt;/strong&gt;  If you
use it you absolutely must be using JRE 8, and the later the release the better
(it’s gotten a lot of patches).  Googling around will show horrible G1 vs CMS
benchmarks from around 2014: these are probably best ignored, since the G1
implementation was still immature then. There’s probably a niche for CMS use
still, especially on midsized heaps (1-3 GB) or where settings are already
tuned.  With appropriate tuning it &lt;strong&gt;can&lt;/strong&gt; still perform generally well for
Jenkins (which mostly generates short-lived garbage), but CMS eventually suffer
from heap fragmentation and need a slow, non-concurrent Full GC to clear this.
It also needs considerably more tuning than G1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;General GC tuning caveats&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No single setting is perfect for everybody.  We avoid tweaking settings that we
don’t have strong evidence for here, but there are of course many additional
settings to tweak.  One shouldn’t change them without evidence though, because
it can cause unexpected side effects.  The GC logs we enabled earlier will
collect this evidence.  The only setting that jumps out as a likely candidate
for further tuning is G1 region size (too small and there are many humungous
object allocations, which hurt performance).  Running on smaller systems,
I’ve seen evidence that regions shouldn’t be smaller than 4 MB because
there are 1-2 MB objects allocated somewhat regularly — but it’s not
enough to make solid guidance without more data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-should-i-do-before-tuning-jenkins-gc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-should-i-do-before-tuning-jenkins-gc&quot;&gt;&lt;/a&gt;What Should I Do Before Tuning Jenkins GC:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’ve seen
&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;Stephen Connolly’s excellent Jenkins World talk&lt;/a&gt;,
you know that most Jenkins instances can and should get by with 4 GB or less of
allocated heap, even up to very large sizes.  You will want to turn on GC
logging (suggested above) and look at stats over a few weeks (remember
&lt;a href=&quot;http://gceasy.io/&quot;&gt;GCeasy.io&lt;/a&gt;).
If you’re not seeing periodic longer pause times, you’re probably okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this post we assume we’ve already done the basic performance work for Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Jenkins is running on fast, SSD-backed storage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve set up build rotation for your Jobs, to delete old builds so they don’t pile up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The weather column is already disabled for folders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All builds/deploys are running on build agents (formerly slaves), not on the master. If the master has executors allocated, they are exclusively used for backup tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve verified that Jenkins really does need the large heap size and can’t easily be split into separate masters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not, we need to do that FIRST before looking at GC tuning, because those will have larger impacts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve gone from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Average 350 ms pauses (bad user experience) including less frequent 2+ second generation pauses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To an average pause of ~50 ms, with almost all under 250 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced total memory footprint from String deduplication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use Garbage First (G1) garbage collection, which performs generally very well for Jenkins.  Usually there’s enough spare CPU time to enable concurrent running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure explicit &lt;code&gt;System.gc()&lt;/code&gt; and metaspace resizing do not trigger a Full GC because this can trigger a very long pause&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Turn on parallel reference processing for Jenkins to use all CPU cores fully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use String deduplication, which generates a tidy win for Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable GC logging, which can then be used for the next level of tuning and diagnostics, if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There’s still a little unpredictability, but using appropriate settings gives a
&lt;strong&gt;much&lt;/strong&gt; more stable, responsive CI/CD server…​ even up to 20 GB heap sizes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://product.hubspot.com/blog/g1gc-fundamentals-lessons-from-taming-garbage-collection&quot;&gt;G1GC fundamentals&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mechanical-sympathy.blogspot.com/2013/07/java-garbage-collection-distilled.html&quot;&gt;MechanicalSympathy: Garbage Collection Distilled&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html&quot;&gt;Oracle Garbage First Garbage Collector Tuning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;one-additional-thing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#one-additional-thing&quot;&gt;&lt;/a&gt;One additional thing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve added &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20&lt;/code&gt; to our
options above.  This is covering a complex and usually infrequent case where G1
self-tuning can trigger bad performance for Jenkins — but that’s material for
another post…​&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/16/security-updates-addressing-zero-day/</id>
<title>Security updates addressing zero day vulnerability</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/16/security-updates-addressing-zero-day/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last
week
we provided an immediate mitigation
and today we are releasing updates to Jenkins which fix the vulnerability. We
strongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as
soon as possible.


Today&#8217;s
security advisory
contains more information on the exploit, affected versions, and fixed
versions, but in short:




An unauthenticated remote code execution vulnerability allowed attackers to
transfer a serialized Java object to the Jenkins CLI, making Jenkins connect to
an attacker-controlled LDAP server, which in turn can send a serialized payload
leading to code execution, bypassing existing protection mechanisms.




Moving forward, the Jenkins security team is...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last
week
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli&quot;&gt;we provided an immediate mitigation&lt;/a&gt;
and today we are releasing updates to Jenkins which fix the vulnerability. We
strongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as
soon as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today’s
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2016-11-16&quot;&gt;security advisory&lt;/a&gt;
contains more information on the exploit, affected versions, and fixed
versions, but in short:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An unauthenticated remote code execution vulnerability allowed attackers to
transfer a serialized Java object to the Jenkins CLI, making Jenkins connect to
an attacker-controlled LDAP server, which in turn can send a serialized payload
leading to code execution, bypassing existing protection mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moving forward, the Jenkins security team is revisiting the design of the
Jenkins CLI over the coming weeks to prevent this class of vulnerability in the
future. If you are interested in participating in that discussion, please join
in on the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;jenkinsci-dev@&lt;/a&gt;
mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project encourages administrators to subscribe to the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-advisories&quot;&gt;jenkinsci-advisories@&lt;/a&gt;
mailing list to receive future Jenkins security notifications.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/13/november-jenkins-events/</id>
<title>Upcoming November Jenkins Events</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/13/november-jenkins-events/" />
<author>
<name>alyssat</name>
</author>
<category term="events"></category>
<category term="jam"></category>
<summary>
November is packed full of meetups and events. If you are in any of the areas
below please stop by to say "Hi" and talk Jenkins over beer.


North America



November 15 | SF JAM: Let’s Talk CI/CD and DevOps with ClusterHQ and Jenkins


November 15 | DC JAM: Jenkins and Fannie Mae


November 30 | Albuquerque JAM: Learn About Blue Ocean


November 30 | Guadalajara JAM: Jenkins Install and Setup





Europe



November 10 | Amsterdam JAM: Jenkins and Docker - Multiple Uses for Containers and Jenkins


November 10 | Milano JAM: Meet and Greet





Australia



November 15 | Melbourne JAM: Blue Ocean - A New User Experience





Asia



November 17 | Singapore...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/jams/guadalahara.jpg&quot; alt=&quot;Guadalahara JAM&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;November is packed full of meetups and events. If you are in any of the areas
below please stop by to say &quot;Hi&quot; and talk Jenkins over beer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;north-america&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#north-america&quot;&gt;&lt;/a&gt;North America&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 15 | SF JAM: &lt;a href=&quot;http://www.meetup.com/San-Francisco-Jenkins-Area-Meetup/events/235423503/&quot;&gt;Let’s Talk CI/CD and DevOps with ClusterHQ and Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 15 | DC JAM: &lt;a href=&quot;http://www.meetup.com/Washington-DC-Jenkins-Area-Meetup/events/235329896/&quot;&gt;Jenkins and Fannie Mae&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 30 | Albuquerque JAM: &lt;a href=&quot;http://www.meetup.com/Albuquerque-Jenkins-Area-Meetup/events/234807265/&quot;&gt;Learn About Blue Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 30 | Guadalajara JAM: &lt;a href=&quot;http://www.meetup.com/Guadalajara-Jenkins-Area-Meetup/events/234929834/&quot;&gt;Jenkins Install and Setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;europe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#europe&quot;&gt;&lt;/a&gt;Europe&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 10 | Amsterdam JAM: &lt;a href=&quot;http://www.meetup.com/Amsterdam-Jenkins-Area-Meetup/events/234471476/&quot;&gt;Jenkins and Docker - Multiple Uses for Containers and Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 10 | Milano JAM: &lt;a href=&quot;http://www.meetup.com/Milano-Jenkins-Area-Meetup/events/235320492/&quot;&gt;Meet and Greet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;australia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#australia&quot;&gt;&lt;/a&gt;Australia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 15 | Melbourne JAM: &lt;a href=&quot;http://www.meetup.com/Melbourne-Jenkins-Area-Meetup/events/235070768/&quot;&gt;Blue Ocean - A New User Experience&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;asia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asia&quot;&gt;&lt;/a&gt;Asia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 17 | Singapore JAM: &lt;a href=&quot;http://www.meetup.com/Jenkins-User-Group-Singapore/events/235128133/&quot;&gt;CI Using Source Code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speak or sponsor at a JAM. Contact us at &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/</id>
<title>Addressing recently disclosed vulnerabilities in the Jenkins CLI</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/" />
<author>
<name>rtyler</name>
</author>
<category term="security"></category>
<category term="lts"></category>
<summary>
The Jenkins
security team
has been made aware of a new attack vector for a remote code execution
vulnerability in the
Jenkins CLI,
according to
this
advisory
by Daniel Beck:




We have received a report of a possible unauthenticated remote code execution
vulnerability in Jenkins (all versions).


We strongly advise anyone running a Jenkins instance on a public network
disable the CLI for now.


As this uses the same attack vector as SECURITY-218, you can reuse the script
and instructions published in this repository: https://github.com/jenkinsci-cert/SECURITY-218




We have since been able to confirm the vulnerability and strongly recommend
that everyone follow the instructions in the linked repository.


As Daniel mentions in the security advisory, the advised mitigation strategy...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/security&quot;&gt;security team&lt;/a&gt;
has been made aware of a new attack vector for a remote code execution
vulnerability in the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI&quot;&gt;Jenkins CLI&lt;/a&gt;,
according to
&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-advisories/-fc-w9tNEJE/GRvEzWoJBgAJ&quot;&gt;this
advisory&lt;/a&gt;
by Daniel Beck:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have received a report of a possible unauthenticated remote code execution
vulnerability in Jenkins (all versions).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We strongly advise anyone running a Jenkins instance on a public network
disable the CLI for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As this uses the same attack vector as SECURITY-218, you can reuse the script
and instructions published in this repository: &lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci-cert/SECURITY-218&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have since been able to confirm the vulnerability and strongly recommend
that everyone follow the instructions in the linked repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Daniel mentions in the security advisory, the advised mitigation strategy is
to disable the CLI subsystem via
&lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218/blob/master/cli-shutdown.groovy&quot;&gt;this
Groovy script&lt;/a&gt;.
If you are a Jenkins administrator, navigate to the &lt;em&gt;Manage Jenkins&lt;/em&gt; page and
click on the &lt;em&gt;Script Console&lt;/em&gt;, which will allow you to run the Groovy script to
immediately disable the CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to persist this change across restarts of your Jenkins master, place
&lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218/blob/master/cli-shutdown.groovy&quot;&gt;the
Groovy script&lt;/a&gt;
in &lt;code&gt;$JENKINS_HOME/init.groovy.d/cli-shutdown.groovy&lt;/code&gt; so that Jenkins executes
the script on each boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are expecting to have a fix implemented, tested and included in an updated
weekly and LTS release this upcoming &lt;strong&gt;Wednesday, November 16th&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For users who are operating Jenkins on public, or otherwise hostile, networks,
we suggest hosting Jenkins behind reverse proxies such as Apache or Nginx.
These can help provide an additional layer of security, when used appropriately,
to cordon off certain URLs such as &lt;code&gt;/cli&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we strongly recommend that &lt;strong&gt;all&lt;/strong&gt; Jenkins administrators subscribe
to the
&lt;a href=&quot;mailto:jenkinsci-advisories+subscribe@googlegroups.com&quot;&gt;jenkinsci-advisories@googlegroups.com&lt;/a&gt;
mailing list to receive future advisories.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project has a responsible disclosure policy, which we strongly
encourage anybody who believes they have discovered a potential vulnerability
to follow. You can learn more about this policy and our processes on our
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/security&quot;&gt;security page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/11/monthly-jam-recap-october/</id>
<title>Monthly JAM Recap - October 2016</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-11-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/11/monthly-jam-recap-october/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="JAM"></category>
<category term="meetup"></category>
<summary>
October has proven to be a busy month within the Jenkins Area Meetup groups.
Below is a recap of topics discussed at various JAMS in the month of October.


Dallas Forth Worth, Texas (DFW) JAM

James Dumay
took time out of his vacation to present Blue Ocean, a project that rethinks
the user experience of Jenkins, modeling and presenting the process of software
delivery by surfacing information that is important to development teams with
as few clicks as possible, while still staying true to the extensibility that
Jenkins always has had as a core value.


See recording HERE.



San Francisco, CA JAM

Andrey Falko from Salesforce shared how he and his...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;October has proven to be a busy month within the Jenkins Area Meetup groups.
Below is a recap of topics discussed at various JAMS in the month of October.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;/a&gt;Dallas Forth Worth, Texas (DFW) JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt;
took time out of his vacation to present Blue Ocean, a project that rethinks
the user experience of Jenkins, modeling and presenting the process of software
delivery by surfacing information that is important to development teams with
as few clicks as possible, while still staying true to the extensibility that
Jenkins always has had as a core value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See recording &lt;a href=&quot;https://www.youtube.com/watch?v=ZdRYnuwouI4&quot;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-ca-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-ca-jam&quot;&gt;&lt;/a&gt;San Francisco, CA JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Andrey Falko from Salesforce shared how he and his Diagnostics team used
Jenkins to deliver software securely and reliably to production within
Salesforce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See videos &lt;a href=&quot;https://www.youtube.com/watch?v=kSnR-B-3EuY&quot;&gt;HERE&lt;/a&gt; and
&lt;a href=&quot;https://www.youtube.com/watch?v=_e71fw7eeQU&quot;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.37.08%20PM.png&quot; alt=&quot;Salesforce&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;boulder-co-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#boulder-co-jam&quot;&gt;&lt;/a&gt;Boulder, CO JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a meetup with CA Technologies and included
&lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite&lt;/a&gt;, maintainer of the Jenkins git plugin
and a director at CA Technologies in Fort Collins.
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;Tyler&lt;/a&gt; did a great presentation about Jenkins
Pipeline and Blue Ocean and showed off how the community is using Blue Ocean to
build Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;barcelona-spain-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#barcelona-spain-jam&quot;&gt;&lt;/a&gt;Barcelona, Spain JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this meetup, there were plenty of engaging discussions surrounding the
Jenkins Certification and DevOps 2.1 Toolkit: Continuous Deployment with
Jenkins and Docker Swarm.  Guillem Sola shared his Jenkins certification
experience &lt;a href=&quot;https://www.youtube.com/watch?v=fJgG-ZC_vwE&quot;&gt;HERE&lt;/a&gt; while Viktor
Farcic presented his thoughts on the aspects of building, testing, deploying,
and monitoring services inside Docker Swarm clusters and Jenkins
&lt;a href=&quot;https://www.youtube.com/watch?v=fs1ED_y5mUc&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=fs1ED_y5mUc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.24.35%20PM.png&quot; alt=&quot;Viktor Farcic&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.24.51%20PM.png&quot; alt=&quot;Guillem Sola&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.42.44%20PM.png&quot; alt=&quot;Barcelona JAM&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lima-peru-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lima-peru-jam&quot;&gt;&lt;/a&gt;Lima, Peru JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.27.57%20PM.png&quot; alt=&quot;Lima JAM&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;October’s meetup was a joint effort with collaboration from Perú JUG, and
Docker Lima. The first talk was an Introduction to
&lt;a href=&quot;https://github.com/mario21ic/DockerJava&quot;&gt;Docker Ecosystem&lt;/a&gt;, second was
&lt;a href=&quot;https://github.com/eddumelendez/javaee7-docker-gradle&quot;&gt;Building and Testing Apps with Docker&lt;/a&gt; and
&lt;a href=&quot;https://github.com/eddumelendez/arquillian-cube-maven-demos&quot;&gt;Arquillian Cube&lt;/a&gt;
and the last one was
&lt;a href=&quot;https://github.com/jenkinsperu/javaee8-mvc#using-jenkins&quot;&gt;CI/CD using Docker and Jenkins Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had a full house at the meetup. Now, everyone in the room has a Mr. Jenkins
branded on their laptop :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/mario21ic&quot;&gt;Mario Inga&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/hdanniel&quot;&gt;Héctor Paz&lt;/a&gt; for their collaborations during the
last meetups.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Area+Meetup&quot;&gt;JAM member&lt;/a&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be a JAM speaker or sponsor. Let us know &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/31/xunit-reporting/</id>
<title>xUnit and Pipeline</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-10-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/31/xunit-reporting/" />
<author>
<name>lnewman</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="xunit"></category>
<category term="nightwatch"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





The
JUnit plugin
is the go-to test result reporter for many Jenkins projects,
but the it is not the only one available.  The
xUnit plugin
is a viable alternative that supports JUnit and many other test result file formats.


Introduction

No matter the project, you need to gather and report test results.
JUnit is one of the most widely supported formats for recording test results.
For a scenarios where your tests are stable and your framework can produce JUnit output,
this makes the JUnit plugin ideal for reporting results in Jenkins.
It will consume results from a specified file or...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&quot;&gt;JUnit plugin&lt;/a&gt;
is the go-to test result reporter for many Jenkins projects,
but the it is not the only one available.  The
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;
is a viable alternative that supports JUnit and many other test result file formats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No matter the project, you need to gather and report test results.
JUnit is one of the most widely supported formats for recording test results.
For a scenarios where your tests are stable and your framework can produce JUnit output,
this makes the JUnit plugin ideal for reporting results in Jenkins.
It will consume results from a specified file or path, create a report,
and if it finds test failures it will set the the job state to &quot;unstable&quot; or &quot;failed&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-7-report.png&quot; alt=&quot;Test reporting with JUnit&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also plenty of scenarios where the JUnit plugin is not enough.
If your project has some failing tests that will take some time to fix,
or if there are some flaky tests,
the JUnit plugin’s simplistic view of test failures may be difficult to work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No problem, the Jenkins plugin model lets us replace the JUnit
plugin functionality with similar
functionality from another plugin and Jenkins Pipeline lets us do this in safe
stepwise fashion where we can test and debug each of our changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will show you how to replace the JUnit plugin with the
xUnit plugin in Pipeline code to address a few common test reporting scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-setup&quot;&gt;&lt;/a&gt;Initial Setup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m going to use the &quot;JS-Nightwatch.js&quot; sample project from my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/29/sauce-pipeline/&quot;&gt;previous post&lt;/a&gt; to demonstrate a couple
common scenarios that the xUnit handles better.
I already have the latest
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&quot;&gt;JUnit plugin&lt;/a&gt;
and
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;
installed on my Jenkins server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll be keeping my changes in
link:&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;my fork&lt;/a&gt;
of the &quot;JS-Nightwatch.js&quot; sample project on GitHub, under the
&quot;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/xunit&quot;&gt;blog/xunit&lt;/a&gt;&quot; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what the Jenkinsfile looked like at the end of that previous post and what
the report page looks like after a few runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    checkout scm

    &lt;span style=&quot;color:#777&quot;&gt;// Install dependencies&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {

            &lt;span style=&quot;color:#777&quot;&gt;// List of browser configs we'll be testing against.&lt;/span&gt;
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; platform_configs = [
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ].join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

            &lt;span style=&quot;color:#777&quot;&gt;// Nightwatch.js supports color ouput, so wrap this step for ansi color&lt;/span&gt;
            wrap([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AnsiColorBuildWrapper&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;colorMapName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XTerm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) {
                &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;platform_configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }

            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SauceOnDemandTestPublisher&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-7-console.png&quot; alt=&quot;JUnit plugin console output&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;switching-from-junit-to-xunit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#switching-from-junit-to-xunit&quot;&gt;&lt;/a&gt;Switching from JUnit to xUnit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by replacing JUnit with xUnit in my pipeline.
I use the Snippet Generator to create the step with the right parameters.
The main downside of using the xUnit plugin is that while it is Pipeline compatible,
it still uses the more verbose &lt;code&gt;step()&lt;/code&gt; syntax and has some very rough edges around that, too.
I’ve filed
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-37611&quot;&gt;JENKINS-37611&lt;/a&gt;
but in the meanwhile, we’ll work with what we have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// Original JUnit step&lt;/span&gt;
junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;// Equivalent xUnit step - generated (reformatted)&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;testTimeMargin&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;3000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;thresholdMode&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;deleteOutputFiles&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failIfNotNew&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;skipNoTestFiles&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;stopProcessingIfError&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;]]
    ])

&lt;span style=&quot;color:#777&quot;&gt;// Equivalent xUnit step - cleaned&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I replace the &lt;code&gt;junit&lt;/code&gt; step in my Jenkinsfile with that last step above,
it produces a report and job result identical to the JUnit plugin but using the xUnit plugin.  Easy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {

            &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

            &lt;span style=&quot;color:#777&quot;&gt;// junit 'reports/**'&lt;/span&gt;
            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
                &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])

            &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-8-summary.png&quot; alt=&quot;Test reporting with xUnit&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-8-console.png&quot; alt=&quot;xUnit plugin console output&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accept-a-baseline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#accept-a-baseline&quot;&gt;&lt;/a&gt;Accept a Baseline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most projects don’t start off with automated tests passing or even running.
They start with a people hacking and prototyping, and eventually they start to write tests.
As new tests are written, having tests checked-in, running, and failing can be valuable information.
With the xUnit plugin we can accept a baseline of failed cases and drive that number down over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by changing the Jenkinsfile to fail jobs only if the number of failures is greater than an expected baseline,
in this case four failures. When I run the job with this change, the reported numbers remain the same, but the job passes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-9-summary.png&quot; alt=&quot;Accept a baseline of failing tests.&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, I can also check that the plugin reports the job as failed if more failures occur.
Since this is sample code, I’ll do this by adding another failing test and checking the job
reports as failed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - D&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            &lt;span style=&quot;color:#777&quot;&gt;//.assert.title('I am a page title - Sauce Labs');&lt;/span&gt;
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs - Cause a Failure&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-10-summary.png&quot; alt=&quot;All tests pass!&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a real project, we’d make fixes over a number of commits bringing the number of failures down and adjusting our baseline.
Since this is a sample, I’ll just make all tests pass and set the job failure threshold for failed and skipped cases to zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - D&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig_1.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 1 - A&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-12-summary.png&quot; alt=&quot;All tests pass!&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;allow-for-flakiness&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#allow-for-flakiness&quot;&gt;&lt;/a&gt;Allow for Flakiness&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve all known the frustration of having one flaky test that fails once every ten jobs.
You want to keep it active so you can working isolating the source of the problem,
but you also don’t want to destablize your CI pipeline or reject commits that are actually okay.
You could move the test to a separate job that runs the &quot;flaky&quot; tests,
but in my experience that just leads to a job that is always in a failed state
and a pile of flaky tests no one looks at.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the xUnit plugin, we can keep the this flaky test in main test suite but allow
the our job to still pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by adding a sample flaky test.  After a few runs, we can see the test
fails intermittently and causes the job to fail too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPigFlaky.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// New test file: tests/guineaPigFlaky.js&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; https = require(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; SauceLabs = require(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;saucelabs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

module.exports = {

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;@tags&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;guineaPig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Flaky Assert Title 0&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; expectedTitle = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
        &lt;span style=&quot;color:#777&quot;&gt;// Fail every fifth minute&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (Math.floor(Date.now() / (&lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt; * &lt;span style=&quot;color:#00D&quot;&gt;60&lt;/span&gt;)) % &lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt; === &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;) {
            expectedTitle += &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - Cause failure&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
        }

        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(expectedTitle);
    }

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) {
        client.customSauceEnd();

        setTimeout(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
            done();
        }, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;);

    }

};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-17-summary.png&quot; alt=&quot;The pain of flaky tests failing the build&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can almost hear my teammates screaming in frustration just looking at this report.
To allow specific tests to be unstable but not others,
I’m going to add a guard &quot;suite completed&quot; test to the suites that should be stable,
and keep flaky test on it’s own.
Then I’ll tell xUnit to allow for a number of failed tests, but no skipped ones.
If any test fails other than the ones I allow to be flaky,
it will also result in one or more skipped tests and will fail the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        &lt;span style=&quot;color:#777&quot;&gt;// Allow for a significant number of failures&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// Keeping this threshold so that overwhelming failures are guaranteed&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;//     to still fail the build&lt;/span&gt;
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - Suite Completed&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
      &lt;span style=&quot;color:#777&quot;&gt;// No assertion needed&lt;/span&gt;
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig_1.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 1 - E&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 1 - Suite Completed&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
      &lt;span style=&quot;color:#777&quot;&gt;// No assertion needed&lt;/span&gt;
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few more runs, you can see the flaky test is still being flaky,
but it is no longer failing the build.  Meanwhile, if another test fails,
it will cause the &quot;suite completed&quot; test to be skipped, failing the job.
If this were a real project, the test owner could instrument and eventually fix
the test.  When they were confident they had stabilized the test the could add
a &quot;suite completed&quot; test after it to enforce it passing without changes to other
tests or framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-19-summary.png&quot; alt=&quot;Flaky tests don&amp;apos;t have to fail the build&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-18-report.png&quot; alt=&quot;Results from flaky test&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post has shown how to migrate from the JUnit plugin to the
xUnit plugin on an existing project in Jenkins pipeline.  It also covered how to
use the features of xUnit plugin to get more meaningful and effective Jenkins
reporting behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I didn’t show was how many other formats xUnit supports - from CCPUnit to MSTest.  You can
also write your own XSL for result formats not on the known/supported list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;bitwiseman/JS-Nightwatch.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saucelabs-sample-test-frameworks&quot;&gt;saucelabs-sample-test-frameworks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/18/jenkins-world-2016-videos/</id>
<title>Jenkins World 2016 Session Videos</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-10-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/18/jenkins-world-2016-videos/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





The videos of the sessions from
Jenkins World 2016 are up!


I&#8217;ve updated the wrap-up posts with links to each of the sessions mentioned:




Jenkins Pipeline


Scaling Jenkins


Ask the Experts &amp; Demos




You can also find video from all the sessions
here.  Enjoy!...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The videos of the sessions from
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2016&lt;/a&gt; are up!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve updated the wrap-up posts with links to each of the sessions mentioned:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;Scaling Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/&quot;&gt;Ask the Experts &amp;amp; Demos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also find video from all the sessions
&lt;a href=&quot;https://www.cloudbees.com/juc/agenda&quot;&gt;here&lt;/a&gt;.  Enjoy!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/16/stage-lock-milestone/</id>
<title>Controlling the Flow with Stage, Lock, and Milestone</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-10-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/16/stage-lock-milestone/" />
<author>
<name>hrmpw</name>
</author>
<category term="pipeline"></category>
<category term="newfeatures"></category>
<summary>
This is a guest post by Patrick Wolf,
Director of Product Management at CloudBees.





Recently the Pipeline team began making several changes to improve the stage step and increase control of concurrent builds in Pipeline. Until now the stage step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.


In order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed stage step.




stage - the stage...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/hrmpw&quot;&gt;Patrick Wolf&lt;/a&gt;,
Director of Product Management at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently the Pipeline team began making several changes to improve the &lt;code&gt;stage&lt;/code&gt; step and increase control of concurrent builds in Pipeline. Until now the &lt;code&gt;stage&lt;/code&gt; step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed &lt;code&gt;stage&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Stage+Step+Plugin&quot;&gt;stage&lt;/a&gt; - the &lt;code&gt;stage&lt;/code&gt; step remains but is now focused on grouping steps and providing boundaries for Pipeline segments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Lockable+Resources+Plugin&quot;&gt;lock&lt;/a&gt; - the &lt;code&gt;lock&lt;/code&gt; step throttles the number of concurrent builds in a defined section of the Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Milestone+Step+Plugin&quot;&gt;milestone&lt;/a&gt; - the &lt;code&gt;milestone&lt;/code&gt; step automatically discards builds that will finish out of order and become stale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating these concerns into explicit, independent steps allows for much greater control of Pipelines and broadens the set of possible use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stage&quot;&gt;&lt;/a&gt;Stage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;stage&lt;/code&gt; step is a primary building block in Pipeline, dividing the steps of a Pipeline into explicit units and helping to visualize the progress using the &quot;Stage View&quot; plugin or &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean/&quot;&gt;Blue Ocean&lt;/a&gt;. Beginning with version 2.2 of &quot;Pipeline Stage Step&quot; plugin, the &lt;code&gt;stage&lt;/code&gt; step now requires a block argument, wrapping all steps within the defined stage. This makes the boundaries of where each &lt;code&gt;stage&lt;/code&gt; begins and ends obvious and predictable. In addition, the concurrency argument of &lt;code&gt;stage&lt;/code&gt; has now been removed to make this step more concise; responsibility for concurrency control has been delegated to the &lt;code&gt;lock&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  doSomething()
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;PATH&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Omitting the block from &lt;code&gt;stage&lt;/code&gt; and using the concurrency argument are now deprecated in Pipeline. Pipelines using this syntax will continue to function but will produce a warning in the console log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;Using the 'stage' step without a block argument is deprecated&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This message is only a reminder to update your Pipeline scripts; none of your Pipelines will stop working. If we reach a point where the old syntax is to be removed we will make an announcement prior to the change. We do, however, recommend that you update your existing Pipelines to utilize the new syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; Stage View and Blue Ocean will both work with either the old &lt;code&gt;stage&lt;/code&gt; syntax or the new.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lock&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lock&quot;&gt;&lt;/a&gt;Lock&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than attempt to limit the number of concurrent builds of a job using the &lt;code&gt;stage&lt;/code&gt;, we now rely on the &quot;Lockable Resources&quot; plugin and the &lt;code&gt;lock&lt;/code&gt; step to control this. The &lt;code&gt;lock&lt;/code&gt; step limits concurrency to a single build and it provides much greater flexibility in designating where the concurrency is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lock&lt;/code&gt; can be used to constrain an entire &lt;code&gt;stage&lt;/code&gt; or just a segment:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  doSomething()
  lock(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;locked build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lock&lt;/code&gt; can be also used to wrap multiple stages into a single concurrency unit:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;lock(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
  stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Testing&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;milestone&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milestone&quot;&gt;&lt;/a&gt;Milestone&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;milestone&lt;/code&gt; step is the last piece of the puzzle to replace functionality originally intended for &lt;code&gt;stage&lt;/code&gt; and adds even more control for handling concurrent builds of a job. The &lt;code&gt;lock&lt;/code&gt; step limits the number of builds running concurrently in a section of your Pipeline while the &lt;code&gt;milestone&lt;/code&gt; step ensures that older builds of a job will not overwrite a newer build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concurrent builds of the same job do not always run at the same rate. Depending on the network, the node used, compilation times, test times, etc. it is always possible for a newer build to complete faster than an older build. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build 1 is triggered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build 2 is triggered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build 2 builds faster than Build 1 and enters the Test stage sooner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than allowing Build 1 to continue and possibly overwrite the newer artifact produced in Build 2, you can use the &lt;code&gt;milestone&lt;/code&gt; step to abort Build 1:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  milestone()
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  milestone()
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Testing&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the &lt;code&gt;input&lt;/code&gt; step or the &lt;code&gt;lock&lt;/code&gt; step a backlog of concurrent builds can easily stack up, either waiting for user input or waiting for a resource to become free. The &lt;code&gt;milestone&lt;/code&gt; step will automatically prune all older jobs that are waiting at these junctions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;milestone()
input &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Proceed?&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
milestone()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bookending an &lt;code&gt;input&lt;/code&gt; step like this allows you to select a specific build to proceed and automatically abort all antecedent builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;milestone()
lock(&lt;span style=&quot;color:#606&quot;&gt;resource&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;inversePrecedence&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;) {
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;locked step&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  milestone()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly a pair of &lt;code&gt;milestone&lt;/code&gt; steps used with a &lt;code&gt;lock&lt;/code&gt; will discard all old builds waiting for a shared resource. In this example, &lt;code&gt;inversePrecedence: true&lt;/code&gt; instructs the &lt;code&gt;lock&lt;/code&gt; to begin most recent waiting build first, ensuring that the most recent code takes precedence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;putting-it-all-together&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#putting-it-all-together&quot;&gt;&lt;/a&gt;Putting it all together&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of these steps can be used independently of the others to control one aspect of a Pipeline or they can be combined to provide powerful, fine-grained control of every aspect of multiple concurrent builds flowing through a Pipeline. Here is a very simple example utilizing all three:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  &lt;span style=&quot;color:#777&quot;&gt;// The first milestone step starts tracking concurrent build order&lt;/span&gt;
  milestone()
  node {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}

&lt;span style=&quot;color:#777&quot;&gt;// This locked resource contains both Test stages as a single concurrency Unit.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only 1 concurrent build is allowed to utilize the test resources at a time.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Newer builds are pulled off the queue first. When a build reaches the&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// milestone at the end of the lock, all jobs started prior to the current&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// build that are still waiting for the lock will be aborted&lt;/span&gt;
lock(&lt;span style=&quot;color:#606&quot;&gt;resource&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;inversePrecedence&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;){
  node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Unit Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Unit Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;System Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;System Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
  milestone()
}

&lt;span style=&quot;color:#777&quot;&gt;// The Deploy stage does not limit concurrency but requires manual input&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// from a user. Several builds might reach this step waiting for input.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// When a user promotes a specific build all preceding builds are aborted,&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// ensuring that the latest code is always deployed.&lt;/span&gt;
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  input &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy?&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  milestone()
  node {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a more complete and complex example utilizing all these steps in a Pipeline check out the  &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/blob/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo/repo/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt; provided with the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/tree/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo&quot;&gt;Docker image for demonstrating Pipeline&lt;/a&gt;. This is a working demo that can be quickly set up and run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/</id>
<title>Jenkins World 2016, That's a Wrap!</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-09-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








This year&#8217;s Jenkins World conference
was a huge milestone for the Jenkins project - the first global event for the Jenkins community.
It brought users and contributors together to exchange ideas on the current state
of the project, celebrate accomplishments of the past year, and look ahead at all the exiting enhancements
coming down the pipe(line).


Contributor Summit

To kick off Jenkins World, we had a full day "Contributor Summit".
Jenkins is a distributed project with contributors from all over the globe.
Conferences like this are perfect time to get contributors together face-to-face,
to talk through current issues and...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/jenkins-world-banner-pic.jpg&quot; alt=&quot;Jenkins World 2016&quot; height=&quot;200&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; conference
was a huge milestone for the Jenkins project - the first global event for the Jenkins community.
It brought users and contributors together to exchange ideas on the current state
of the project, celebrate accomplishments of the past year, and look ahead at all the exiting enhancements
coming down the pipe(line).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributor-summit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-summit&quot;&gt;&lt;/a&gt;Contributor Summit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To kick off Jenkins World, we had a full day &quot;Contributor Summit&quot;.
Jenkins is a distributed project with contributors from all over the globe.
Conferences like this are perfect time to get contributors together face-to-face,
to talk through current issues and upcoming plans for the the project.
Some key topics discussed during this summit were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt; - In the past year, the Jenkins project has moved new domain name,
a statically generated website, and has entered a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/18/announcing-azure-partnership.adoc&quot;&gt;partnership with Microsoft&lt;/a&gt;
to host to host infrastructure on Azure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt; - A year ago, there were five
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam/&quot;&gt;Jenkins Area Meetups&lt;/a&gt;, today there are 37 around the
world, with ~7000 members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; - Daniel Beck has done a great job a &quot;Security Officer&quot; for the project over the last year.
Jenkins 2 includes tighter security out of the box, 9 security alerts have been addressed, and the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/security/&quot;&gt;Security Team&lt;/a&gt; is continuing to evaluate threats as they are reported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline&lt;/strong&gt; - Pipeline has been a success and there many improvements on the way, including better
Pipeline Library support, a UI-based Pipeline Editor, and Declarative Pipeline syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blue Ocean&lt;/strong&gt; - Blue Ocean announced their &quot;1.0 Beta&quot; release and discussed their roadmap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage Pluggability&lt;/strong&gt; - One of the big upcoming goals is reducing Jenkins'
dependence on local file system storage on the server system
(job configuration, build logs, etc.).  There was extensive
discussion of how to accomplish this goal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/contributors.jpg&quot; alt=&quot;Contributors Summit&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keynote-the-state-of-jenkins-2016&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keynote-the-state-of-jenkins-2016&quot;&gt;&lt;/a&gt;Keynote: The State of Jenkins 2016&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next day,
&lt;a href=&quot;https://github.com/kohsuke&quot;&gt;Kohsuke&lt;/a&gt; gave a great
&lt;a href=&quot;https://www.cloudbees.com/jenkins-community-keynote&quot;&gt;keynote&lt;/a&gt;,
showing how far the project as come this year and where it is headed.
You can get the slides
&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_world_keynote.pdf&quot;&gt;here&lt;/a&gt;
or see the full video below.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NXjeHeIYRRI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s Next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, Jenkins World was a very enjoyable event. I’m sure everyone came away having
learned a lot and made many new connections.  I know I’m excited to see
what the coming year brings for Jenkins and the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t forget that there are many ways to continue
to build connections to the rest of the Jenkins community throughout the year, such as the
&lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;Jenkins Online Meetup&lt;/a&gt; which
hosts online events year-round.  Or, see if there is a
&lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;Jenkins Area Meetup (JAM)&lt;/a&gt; near you.  If
there isn’t, take a look at the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam/&quot;&gt;Jenkins Area Meetup page&lt;/a&gt; to see about starting one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks, and I hope to see you all and Jenkins World 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/mural-end.jpg&quot; alt=&quot;CommitStrip Mural&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/</id>
<title>Jenkins World 2016 Wrap-up - Ask the Experts &amp; Demos</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-09-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








As I mentioned in my
previous post,
Jenkins World brought together
Jenkins users from organizations of all sizes.  It also brought together Jenkins
users of all skill levels; from beginners to experts (including to JAM
organizers, board members, and long time contributors).  A number
of those experts also volunteered to staff the Open Source Hub&#8217;s
"Ask the Experts" desk throughout the conference to answer Jenkins questions.
This included, but was not limited to:
Paul Allen,
R Tyler Croy,
James Dumay,
Jesse Glick,
Eddú Meléndez Gonzales,
Jon Hermansen,
Owen Mehegan,
Oleg Nenashev,
Liam Newman,
Christopher Orr,
Casey Vega,
Mark Waite,
Dean Yu,
and
Keith Zantow.





I actually chose to spend the majority of...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I mentioned in my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;previous post&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; brought together
Jenkins users from organizations of all sizes.  It also brought together Jenkins
users of all skill levels; from beginners to experts (including to &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;JAM&lt;/a&gt;
organizers, board members, and long time contributors).  A number
of those experts also volunteered to staff the Open Source Hub’s
&quot;Ask the Experts&quot; desk throughout the conference to answer Jenkins questions.
This included, but was not limited to:
&lt;a href=&quot;https://github.com/p4paul&quot;&gt;Paul Allen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;,
&lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;,
&lt;a href=&quot;https://github.com/eddumelendez&quot;&gt;Eddú Meléndez Gonzales&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/omehegan&quot;&gt;Owen Mehegan&lt;/a&gt;,
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt;,
&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt;,
&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dty&quot;&gt;Dean Yu&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-0.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I actually chose to spend the majority of my time at the booth. It was
fantastic to hear all the different ways people are using
Jenkins and wanting use Jenkins to do even more. I answered dozens of questions
on both days of the conference, often learning new things in the process of answering them.
And for questions that were beyond any one person’s knowledge, there was such a
breadth of expertise, very few questions were beyond our combined abilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-2.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While &quot;Ask the Experts&quot; saw a lot traffic, the Open Source Hub’s lunch-time demos drew
really big crowds. They covered wide range of subjects in a quick succession and offered people
a chance to be introduced to new areas of in Jenkins without spending a whole session on them.
Some demos were only presented at lunch while others were abbreviated versions of
longer talks presented at other times during the conference.  Here’s the full list with related links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/demo-crowd.jpg&quot; alt=&quot;Demo Crowd&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt; gave a live demo of
&lt;strong&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; in Action&lt;/strong&gt; on their
&lt;a href=&quot;https://ci.blueocean.io/blue&quot;&gt;live Jenkins instance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt; presented a lightning version of his talk
&lt;a href=&quot;https://www.cloudbees.com/continuous-build-and-delivery-pipelines-android&quot;&gt;&lt;strong&gt;Pipelines for building and deploying Android apps&lt;/strong&gt;&lt;/a&gt;
(&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-continuous_build_delivery_pip.pdf&quot;&gt;Slides&lt;/a&gt;)
(&lt;a href=&quot;https://youtu.be/Gn3ygjUMKUY&quot;&gt;video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt; showed a different way to
manage security with the
&lt;strong&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Ownership+Plugin&quot;&gt;Ownership plugin&lt;/a&gt; for Jenkins&lt;/strong&gt;
(&lt;a href=&quot;https://speakerdeck.com/onenashev/jw2016-ownership-plugin-demo&quot;&gt;Slides&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alex Somai&lt;/a&gt; presented his
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC) 2016&lt;/a&gt; project, the
&lt;strong&gt;External Workspace Manager plugin for Jenkins Pipeline&lt;/strong&gt; (&lt;a href=&quot;https://youtu.be/lo8sZJt2WhM?t=6m58s&quot;&gt;GSOC Video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt; discussed
&lt;strong&gt;Git plugin - large repos, submodule authentication and more&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/large-git-repos.pdf&quot;&gt;Slides&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt; gave a live demo of
&lt;strong&gt;Notifications with Jenkins Pipeline&lt;/strong&gt;
(based on &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/&quot;&gt;this blog post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt; talked about
&lt;strong&gt;Extending Pipeline with Libraries&lt;/strong&gt; using the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt; demonstrated some cool ways to use
&lt;strong&gt;Multibranch Pipelines + Git symbolic-ref&lt;/strong&gt; to optimize build times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt; showed the power of
&lt;strong&gt;Docker and Pipeline&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/jenkins-and-docker.pdf&quot;&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt; also showed how easy it can be to migrate from
&lt;strong&gt;Freestyle to Pipeline&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/freestyle-to-pipelines.pdf&quot;&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt; gave a live demo,
&lt;strong&gt;&lt;code&gt;package.json&lt;/code&gt; and Jenkins&lt;/strong&gt;, on using &lt;code&gt;package.json&lt;/code&gt; to control all aspects of Jenkins builds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt; presented at lightning version of his talk,
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;&lt;strong&gt;A simpler way to define Jenkins Pipelines&lt;/strong&gt;&lt;/a&gt;
(&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-introducing_a_new_way_to_define_jenkins_pipelines_1.pdf&quot;&gt;Slides&lt;/a&gt;)
(&lt;a href=&quot;TODO&quot;&gt;Video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-3.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you to everyone who staffed the booth and gave demos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, thanks to everyone who attended the demos and came by to ask questions.
If you have more questions, you don’t have to wait until next year’s Jenkins World.
Join the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/content/mailing-lists/&quot;&gt;jenkinsci-users&lt;/a&gt; mailing list or the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/chat/&quot;&gt;#jenkins IRC channel&lt;/a&gt; to
get help from experts around the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, a special thanks to the Jenkins Events officer, &lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa Tong&lt;/a&gt;,
for getting the entire booth designed, prepared, and keeping everything
on track before, during, and after the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-4.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/</id>
<title>Jenkins World 2016 Wrap-up - Scaling</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-09-27T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








One of the great features of Jenkins is how far it
can scale, not only from a software perspective, but also from an
organizational one.  From a single Jenkins master with one or two agents to a
multiple master with thousands of agents, from a team of only a few people
to a whole company with multiple disparate departments and organizations,
you&#8217;ll find space where Jenkins is used.


Like any software or organization,
there are common challenges for increasing scale with Jenkins and some common best practices, but
there are also some unique solutions.  A big...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the great features of Jenkins is how far it
can scale, not only from a software perspective, but also from an
organizational one.  From a single Jenkins master with one or two agents to a
multiple master with thousands of agents, from a team of only a few people
to a whole company with multiple disparate departments and organizations,
you’ll find space where Jenkins is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like any software or organization,
there are common challenges for increasing scale with Jenkins and some common best practices, but
there are also some unique solutions.  A big conference like
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; brings users
from all scales together to see how people in other organizations at similar or
greater scale are solving similar problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a recap of the some of the sessions on scaling Jenkins,
with links to slides and videos shared by &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/159px-National_Public_Radio_logo.svg.png&quot; alt=&quot;159px National Public Radio logo.svg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/milespj&quot;&gt;Paul Miles&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/jgrantd&quot;&gt;Grant Dickie&lt;/a&gt; of
&lt;a href=&quot;https://www.npr.org/&quot;&gt;NPR&lt;/a&gt; talked about
&lt;a href=&quot;https://www.cloudbees.com/jenkinsops-initiative-streamline-and-automate-jenkins&quot;&gt;&lt;strong&gt;JenkinsOps: An Initiative to Streamline and Automate Jenkins&lt;/strong&gt;&lt;/a&gt;.
They shared ways their team has used Jenkins to automate many of the
administrative tasks related to managing feature code branches,
handling deployments, running tests, and properly configuring their environments.
They also showed code samples and talked about future challenges in their quest
to achieve
&lt;a href=&quot;https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff&quot;&gt;continuous deployment&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkinsops_at_npr_-_final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/qrAf5fjDTXI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/Riot_Games_logo.png&quot; alt=&quot;Riot Games logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/maxfields&quot;&gt;Maxfield F Stewart&lt;/a&gt; of
&lt;a href=&quot;http://www.riotgames.com&quot;&gt;Riot Games&lt;/a&gt; showed how they built an
integrated Docker solution using Jenkins in
&lt;a href=&quot;https://www.cloudbees.com/thinking-inside-container-continuous-delivery-story&quot;&gt;&lt;strong&gt;Thinking Inside the Container: A Continuous Delivery Story&lt;/strong&gt;&lt;/a&gt;
He showed how their system allows engineers around the company to
submit Docker images as build environments.
This has let their containerized farm now create over 10,000 containers per week
and handles nearly 1,000 jobs at a rate of about 100 jobs per hour.
And they have done this using readily available, open
source Jenkins plugins. He also talked about how they settled on this design,
lessons learned, best practices, and how to build and scale other similar system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-thinking_inside_the_container-_a_continuous_delivery_story.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/mMvFaEP5mP0&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;Red Hat&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;,
presented by
&lt;a href=&quot;https://github.com/jstrachan&quot;&gt;James Strachan&lt;/a&gt; of
&lt;a href=&quot;https://www.redhat.com&quot;&gt;Red Hat&lt;/a&gt;, showed how to use Jenkins Pipeline with
Docker and Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system using open source software for both microservices
and monolithic applications. He demonstrated how to
create or import projects, and have them automatically build, run
system and integration tests, stage, and finally deploy. He also showed to
manage and update those deployed applications using continuous
delivery practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins-at-redhat-final-final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/173353537&quot;&gt;&lt;strong&gt;Watch the Video Demo from the Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/carlossg&quot;&gt;Carlos Sanchez&lt;/a&gt; of
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; discussed
&lt;a href=&quot;https://www.cloudbees.com/scaling-jenkins-docker-swarm-kubernetes-or-mesos&quot;&gt;&lt;strong&gt;Scaling Jenkins with Docker: Swarm, Kubernetes or Mesos?&lt;/strong&gt;&lt;/a&gt;
He compared various Docker Swarm, Apache Mesos, and Kubernetes in terms of their
ability to dynamically scale in Jenkins by running jobs inside containers.
He also discussed the pros and cons, best practices, level of Jenkins support for each
of these technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-scaling_jenkins_with_docker_swarm_kubernetes_or_mesos_.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/24X18e4GVbk&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stephenc&quot;&gt;Stephen Connolly&lt;/a&gt; of
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; asked
&quot;&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;&lt;strong&gt;So, You Want to Build the World’s Biggest Jenkins Cluster?&lt;/strong&gt;&lt;/a&gt;&quot;
and explained how to do so.  He started with
real world results realized by Jenkins users who have built large clusters.
Next, he showed experiments around scaling some individual sub-components of Jenkins in
isolation to see what challenges have been faced when integrated. Finally,
he arrived at recipes for building Jenkins clusters with different scaling capabilities and
making existing Jenkins clusters more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-soyouwanttobuildtheworldslargestjenkinscluster_final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/eGA8UuijgA4&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/splunk-logo-300x100.gif&quot; alt=&quot;splunk logo 300x100&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/bill-houston-4909412&quot;&gt;Bill Houston&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/aliraza82&quot;&gt;Ali Raza&lt;/a&gt; of
&lt;a href=&quot;https://www.splunk.com/&quot;&gt;Splunk&lt;/a&gt;
gave a talk in two parts,
&lt;a href=&quot;https://www.cloudbees.com/jenkins-splunk-and-splunking-jenkins&quot;&gt;&lt;strong&gt;Jenkins at Splunk and Splunking Jenkins&lt;/strong&gt;&lt;/a&gt;
In the first part, Bill showed how Splunk uses Jenkins to implement their end-to-end CI system.
They discussed features and design goals, challenges they encountered, and how they addressed
these challenges.
In the second part, Ali showed how to use the Jenkins Splunk plugin.  Using plugin, he gathered
test results and Jenkins environment data, and delivered it to a Splunk indexer for analysis and presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_at_splunk.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/dlsEprySOrg&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/272px-Google_2015_logo.svg.png&quot; alt=&quot;272px Google 2015 logo.svg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/david-hoover-4265245&quot;&gt;David Hoover&lt;/a&gt; of
&lt;a href=&quot;https://www.google.com/about/&quot;&gt;Google&lt;/a&gt; talked about
&lt;a href=&quot;https://www.cloudbees.com/jenkins-inside-google&quot;&gt;&lt;strong&gt;Jenkins inside Google&lt;/strong&gt;&lt;/a&gt;.
Last year, they
&lt;a href=&quot;https://www.cloudbees.com/jenkins/juc-2015/abstracts/us-west/02-01-1600&quot;&gt;presented&lt;/a&gt;
their initial investigations and stress testing as they
prepared to deploy a large-scale Jenkins installation at Google. Now, with a
year of real-world use under their belts, they returned to present on how their
expectations held up, what new issues they encountered, how they have addressed those issues, and
the challenges and opportunities they see ahead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_inside_google.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/7ERV9C20GSE&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/</id>
<title>Jenkins World 2016 Wrap-up - Pipeline</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-09-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








As someone who has managed Jenkins for years and manually managed jobs, I think
pipeline is fantastic. I spent much of the conference manning the
Ask the Experts desk of the
"Open Source Hub" and was glad to find I was not alone in that sentiment.
The questions were not "Why should I use Pipeline?", but "How do I do this in Pipeline?"


Everyone was interested in showing what they have been able to accomplish,
learning about best practices, and seeing what new features were on the horizon.
The sessions and demos on Pipeline that
I saw were...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As someone who has managed Jenkins for years and manually managed jobs, I think
pipeline is fantastic. I spent much of the conference manning the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/&quot;&gt;Ask the Experts&lt;/a&gt; desk of the
&quot;Open Source Hub&quot; and was glad to find I was not alone in that sentiment.
The questions were not &quot;Why should I use Pipeline?&quot;, but &quot;How do I do this in Pipeline?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everyone was interested in showing what they have been able to accomplish,
learning about best practices, and seeing what new features were on the horizon.
The sessions and &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/30/ask-experts-demos/&quot;&gt;demos&lt;/a&gt; on Pipeline that
I saw were all well attended, but no one could have seen all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a recap of the some of the sessions on Jenkins Pipeline,
with links to slides and videos shared by &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt; discussed the past, present, and future of Jenkins Pipeline in
&lt;a href=&quot;https://www.cloudbees.com/directions-pipeline&quot;&gt;&lt;strong&gt;Directions for Pipeline&lt;/strong&gt;&lt;/a&gt;.
He reviewed a broad range of improvements made to Pipeline over the last year, including
syntax, documentation, plugin support, and stability.  He reviewed the changes
currently underway.  He also pointed out that many of the improvements have been
driven by user feedback and invited everyone to continue to participate in making
pipeline even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-directions_for_pipeline.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/51fndpAWpYQ&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/nextsource_logo.jpg&quot; alt=&quot;Nextsource&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In
&lt;a href=&quot;https://www.cloudbees.com/pipelining-devops-jenkins-and-aws&quot;&gt;&lt;strong&gt;Pipelining DevOps with Jenkins and AWS&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/iamjimmyray&quot;&gt;Jimmy Ray&lt;/a&gt;
of
&lt;a href=&quot;http://www.nextsource.com/&quot;&gt;nextSource&lt;/a&gt; showed how Pipeline can be used to automate CI/CD build processes,
and how to integrate Jenkins and Pipeline with AWS.
He also discussed some admin-level considerations,
such as how to install Jenkins on EC2
and the merits of &quot;LTS&quot; and &quot;latest build&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-pipelining_devops_with_jenkins_and_aws.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/vP8sNGGIEGY&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/android-pipeline.png&quot; alt=&quot;Continuous Build and Delivery Pipelines for Android&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt; examined how to create
&quot;&lt;a href=&quot;https://www.cloudbees.com/continuous-build-and-delivery-pipelines-android&quot;&gt;&lt;strong&gt;Continuous Build and Delivery Pipelines for Android&lt;/strong&gt;&lt;/a&gt;&quot;
applications.
He showed how to set up Android-capable build agents, ensure traceable application releases,
reporting warnings, run various types of tests, and deploy and app to Google Play.
This included live demonstrations and discussion of best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-continuous_build_delivery_pip.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Gn3ygjUMKUY&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/declarative-pipeline.png&quot; alt=&quot;A New Way to Define Jenkins Pipelines&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt; presented
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;&lt;strong&gt;A New Way to Define Jenkins Pipelines&lt;/strong&gt;&lt;/a&gt;.
He showed the next evolution for Pipeline, based on a simpler declarative model.
This declarative syntax for Pipeline still supports the creation of complex pipelines,
including complete build environments, post-build actions, and notifications, while
also being easier to understand. This declarative syntax also makes in it easier to
implement other interesting scenarios such as early validation of pipelines and
a visual pipeline editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-introducing_a_new_way_to_define_jenkins_pipelines_1.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/ALvg4KK25JU&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/perforce.png&quot; alt=&quot;Perforce&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In
&lt;a href=&quot;https://www.cloudbees.com/birds-feather-session-perfecting-your-development-tools-updates-helix-plugin-jenkins&quot;&gt;&lt;strong&gt;Perfecting Your Development Tools: Updates to the Helix Plugin for Jenkins&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/p4paul&quot;&gt;Paul Allen&lt;/a&gt; of
&lt;a href=&quot;https://www.perforce.com/&quot;&gt;Perforce&lt;/a&gt; walked through using Perforce’s &quot;Monorepo&quot; model with Jenkins Pipeline.
He explained in detail how to work with the Perforce
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/P4+Plugin&quot;&gt;P4&lt;/a&gt; in Jenkins,
including credential passing and workspace management.
Of particular interest was his side-by-side comparison the various actions done with the Jenkins UI vs Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-an_introduction_to_the_p4_plugin_and_update_on_the_latest_features.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/faster-pipelines-code.png&quot; alt=&quot;Building Pipelines To Be Faster&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/svanoort&quot;&gt;Sam Van Oort&lt;/a&gt;
demonstrated strategies for faster pipelines in
&lt;a href=&quot;https://www.cloudbees.com/need-speed-building-pipelines-be-faster&quot;&gt;&lt;strong&gt;The Need For Speed: Building Pipelines To Be Faster&lt;/strong&gt;&lt;/a&gt;.
He discussed various elements that contribute to making pipelines faster or slower,
such a number of resources and latency.  He then showed several best practices
for constructing pipelines that have lower turnaround times and reduced resource use.
He also reviewed plugins and tools that can help analyze and visualize pipeline
performance, including the Pipeline Stage View plugin and Blue Ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-the_need_for_speed-_building_pipelines_to_be_faster.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/7w2uFA5JPLI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rsandell&quot;&gt;Bobby Sandell&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jtnord&quot;&gt;James T. Nord&lt;/a&gt; talked about what not to do with Pipeline in
&lt;a href=&quot;https://www.cloudbees.com/no-you-shouldnt-do-lessons-using-pipeline&quot;&gt;&lt;strong&gt;No, You Shouldn’t Do That! Lessons from Using Pipeline&lt;/strong&gt;&lt;/a&gt;.
They told the story of their own experiences as early adopters of
Jenkins Pipeline at CloudBees. They described a number of key scenarios they attempted
to address, detailed various mistakes and false starts, and finally share what
they learned in each case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-no_you_shouldnt_do_that_lessons_from_using_pipeline.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/lLZwTMFf9GI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/google-summer-of-code.png&quot; alt=&quot;Google Summer of Code&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alexandru Somai&lt;/a&gt; gave a
&lt;a href=&quot;https://www.cloudbees.com/lightning-talks&quot;&gt;lightning talk&lt;/a&gt; on his
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC) 2016&lt;/a&gt; project,
&quot;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/External+Workspace+Manager+Plugin&quot;&gt;External Workspace Manager Plugin&lt;/a&gt; for Jenkins Pipeline&quot;.
The build workspace for Jenkins projects may become very large.
Alex showed how the External Workspace Manager plugin addresses this issue,
adding support for managing and reusing the same workspace between multiple pipeline builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A recording of his presentation for GSOC is available
&lt;a href=&quot;https://youtu.be/lo8sZJt2WhM?t=6m58s&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;Red Hat&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;,
presented by
&lt;a href=&quot;https://github.com/jstrachan&quot;&gt;James Strachan&lt;/a&gt; of
&lt;a href=&quot;https://www.redhat.com&quot;&gt;Red Hat&lt;/a&gt;, showed how to use Jenkins Pipeline with
Docker and Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system using open source software for both microservices
and monolithic applications. He demonstrated how to
create or import projects, and have them automatically build, run
system and integration tests, stage, and finally deploy. He also showed to
manage and update those deployed applications using continuous
delivery practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins-at-redhat-final-final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/173353537&quot;&gt;&lt;strong&gt;Stream Demo Video&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/21/jenkins-world-2016-wrap-up/</id>
<title>Jenkins World 2016 Wrap-up - Introduction</title>
<updated>2017-03-31T09:19:43-07:00</updated>
<published>2016-09-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/21/jenkins-world-2016-wrap-up/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








That&#8217;s a Wrap!

Any way you look at it, last week&#8217;s Jenkins World Conference 2016 was a huge success.


In 2011, a few hundred users gathered in San Francisco for the first "Jenkins User Conference".
Over successive years, this grew into several yearly regional Jenkins user conferences.
This year, over 1,300 people came from around the world to "Jenkins World 2016",
the first global event for the Jenkins community.





This year&#8217;s Jenkins World conference included:







Keynote presentation by Jenkins creator, Kohsuke Kawaguchi, announcing a number of great new Jenkins project features, such as "Blue Ocean".


More than 50...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;that-s-a-wrap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#that-s-a-wrap&quot;&gt;&lt;/a&gt;That’s a Wrap!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any way you look at it, last week’s Jenkins World Conference 2016 was a huge success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2011, a few hundred users gathered in San Francisco for the first &quot;Jenkins User Conference&quot;.
Over successive years, this grew into several yearly regional Jenkins user conferences.
This year, over 1,300 people came from around the world to &quot;Jenkins World 2016&quot;,
the first global event for the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/kohsuke-keynote.jpg&quot; alt=&quot;Kohsuke Kawaguchi Keynote&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s Jenkins World conference included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/blue-ocean-sticker.jpg&quot; alt=&quot;Stickers!&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keynote presentation by Jenkins creator, Kohsuke Kawaguchi, announcing a number of great new Jenkins project features, such as &quot;Blue Ocean&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More than 50 sessions on everything from the new &quot;Blue Ocean&quot; UI, to &quot;Continuous Security&quot; to &quot;Dockerizing Jenkins&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins Open-source Hub, with &quot;Ask the Experts&quot; and demos by 20+ Jenkins contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Booths from 30+ sponsors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stickers!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the next week, I’ll be posting highlights from the event,
including slides, videos, and links to other useful resources.  Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
