<?xml version="1.0" encoding="utf-8" ?>
<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
<id>https://rtyler.github.io/jenkins.io/</id>
<title>Jenkins Blog</title>
<updated>2016-12-30T12:07:48-08:00</updated>
<link rel="self" type="application/atom+xml" href="https://rtyler.github.io/jenkins.io/rss.xml" />
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/" />
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/31/what-a-year/</id>
<title>Thank you for an amazing 2016</title>
<updated>2016-12-30T12:07:48-08:00</updated>
<published>2016-12-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/31/what-a-year/" />
<author>
<name>rtyler</name>
</author>
<category term="jam"></category>
<category term="jenkins2"></category>
<category term="pipeline"></category>
<category term="blueocean"></category>
<category term="azure"></category>
<category term="gsoc"></category>
<summary>
I do not think it is an exaggeration to say: 2016 was the best year yet for the
Jenkins project. Since the first commit in 2006, the project has reached a
number of significant milestones in its ten years but we have never experienced
the breadth of major milestones in such a short amount of time. From
Jenkins 2
and
Blue Ocean
to the
Google Summer of Code
and
Jenkins World,


I wanted to take a moment and celebrate the myriad of accomplishments which
couldn&#8217;t have happened without the help from everybody who participates in the
Jenkins project. The 1,300+ contributors to the
jenkinsci GitHub organization,
the 4,000+ members of the
!forum/jenkinsci-dev">developers mailing list,
the 8,000+ members...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/jenkins-happy-new-year.png&quot; alt=&quot;Happy New Year from Jenkins&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not think it is an exaggeration to say: 2016 was the best year yet for the
Jenkins project. Since the first commit in 2006, the project has reached a
number of significant milestones in its ten years but we have never experienced
the breadth of major milestones in such a short amount of time. From
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/2.0/&quot;&gt;Jenkins 2&lt;/a&gt;
and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
to the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;
and
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt;,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to take a moment and celebrate the myriad of accomplishments which
couldn’t have happened without the help from everybody who participates in the
Jenkins project. The &lt;strong&gt;1,300+&lt;/strong&gt; contributors to the
&lt;a href=&quot;https://github.com/jenkinsci&quot;&gt;jenkinsci GitHub organization&lt;/a&gt;,
the &lt;strong&gt;4,000+&lt;/strong&gt; members of the
&lt;a href=&quot;https://groups.google.com/forum/&amp;lt;mark&amp;gt;!forum/jenkinsci-dev&quot;&gt;developers mailing list&lt;/a&gt;,
the &lt;strong&gt;8,000+&lt;/strong&gt; members of the
&lt;a href=&quot;https://groups.google.com/forum/&amp;lt;/mark&amp;gt;!forum/jenkinsci-users&quot;&gt;users mailing list&lt;/a&gt;,
and countless others who have reported issues, submitted pull requests, and
presented at meetups and conferences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-2&quot;&gt;&lt;/a&gt;Jenkins 2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Through the course of 2016, the Jenkins project published 16
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog-stable&quot;&gt;LTS releases&lt;/a&gt;
and 54
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog&quot;&gt;Weekly releases&lt;/a&gt;.
Of those 70 releases, the most notable may have been the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/04/26/jenkins-20-is-here/&quot;&gt;Jenkins 2.0 release&lt;/a&gt;
which was published in April.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins 2 made Pipeline as Code front-and-center in the user experience,
introduced a new &quot;Getting Started&quot; experience, and included a number of other
small UI improvements, all while maintaining backwards compatibility with
existing Jenkins environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since April, we have released a number of LTS
releases using Jenkins 2 as a baseline, meaning the Jenkins project no longer
maintains &lt;em&gt;any&lt;/em&gt; 1.x release lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/book/pipeline&quot;&gt;Pipeline&lt;/a&gt;
efforts have continuted to gain steam since April, covered on this blog with a
number of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/node/tags/pipeline/&quot;&gt;posts tagged &quot;pipeline&quot;&lt;/a&gt;. Closing out 2016 with the
announcement of the beta for
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/&quot;&gt;Declarative Pipeline syntax&lt;/a&gt;
which is expected in early 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blue-ocean&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#blue-ocean&quot;&gt;&lt;/a&gt;Blue Ocean&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hot on the heels of Jenkins 2 announcement
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean, a new user experience for Jenkins&lt;/a&gt;,
was
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/26/introducing-blue-ocean/&quot;&gt;open sourced in May&lt;/a&gt;.
Blue Ocean is a new project that rethinks the user experience of Jenkins.
Designed from the ground up for Jenkins Pipeline and compatible with Freestyle
jobs, The goal for the project is to reduce clutter and increase clarity for
every member of the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Blue Ocean beta can be installed from the Update Center and can be run in
production Jenkins environments alongside the existing UI, since it adds the new user experience under
&lt;a href=&quot;https://ci.jenkins.io/blue/&quot;&gt;/blue&lt;/a&gt;
in the environment. Blue Ocean is expected to reach &quot;1.0&quot; in the first half of
2017.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean/pipeline-run.png&quot; alt=&quot;Blue Ocean&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;azure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#azure&quot;&gt;&lt;/a&gt;Azure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also in May of 2016, the Jenkins project announced an exciting
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/18/announcing-azure-partnership/&quot;&gt;Partnership with Microsoft&lt;/a&gt;
to run our project infrastructure on
&lt;a href=&quot;https://azure.com&quot;&gt;Azure&lt;/a&gt;. While the migration of Jenkins project
infrastructure into Azure is still on-going, there have been some notable
milestones reached already:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;End-to-end TLS encrypted delivery for Debian/openSUSE/Red Hat repositories which are
configured to use &lt;code&gt;https://pkg.jenkins.io&lt;/code&gt; by the end-user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Major capacity improvements to
&lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt;
providing on-demand Ubuntu and Windows build/test infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A full continuous delivery Pipeline for all Azure-based infrastructure using
&lt;a href=&quot;https://twitter.com/agentdero/status/809467253548687360&quot;&gt;Terraform from Jenkins&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The migration to Azure is expected to complete in 2017.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google-summer-of-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#google-summer-of-code&quot;&gt;&lt;/a&gt;Google Summer of Code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first time in the history of the project, Jenkins was accepted into
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt;
2016. Google Summer of Code (GSoC) is an annual, international, program
which encourages college-aged students to participate with open source projects
during the summer break between classes. Students accepted into the program
receive a stipend, paid by Google, to work well-defined projects to improve or
enhance the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In exchange, numerous Jenkins community members volunteered as &quot;mentors&quot; for
students to help integrate them into the open source community and succeed in
completing their summer projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot was learned during the summer which we look forward to applying to Google
Summer of Code 2017&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-world&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-world&quot;&gt;&lt;/a&gt;Jenkins World&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In September, over &lt;strong&gt;one thousand&lt;/strong&gt; people attended
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt;,
in Santa Clara, California.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NXjeHeIYRRI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/demo-crowd.jpg&quot; alt=&quot;Demo Crowd&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Following the event,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam&lt;/a&gt;
posted a series of blog posts which highlight some of the fantastic content
shared by Jenkins users and contributors from around the world, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/&quot;&gt;The demos from the &quot;Experts&quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;Sessions on Scaling Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/&quot;&gt;Using Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/&quot;&gt;The Contributor Summit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins World was the first global event of its kind for Jenkins, it brought users
and contributors together to exchange ideas on the current state of the
project, celebrate accomplishments of the past year, and look ahead at all the
exiting enhancements coming down the pipe(line).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was such a smashing success that
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World 2017&lt;/a&gt;
is already scheduled for &lt;strong&gt;August 30-31st&lt;/strong&gt; in San Francisco, California.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jam&quot;&gt;&lt;/a&gt;JAM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, 2016 saw tremendous growth in the number of
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Jenkins Area Meetups&lt;/a&gt;
(JAMs) hosted around the world. JAMs are local meetups intended to bring
Jenkins users and contributors together for socializing and learning. JAMs are
organized by local Jenkins community members who have a passion for sharing new
Jenkins concepts, patterns and tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Driven by current Jenkins Events Officer,
&lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa Tong&lt;/a&gt;,
and the dozens of passionate organizers, JAMs have become a great way to meet
other Jenkins users near you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-in-review/jam-worldwide-2016.png&quot; alt=&quot;Jenkins Around the World Meetups&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we don’t yet have JAMs on each of the seven continents, we’re optimistic
for more groups to be founded in 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am personally grateful for the variety and volume of contributions made by
thousands of people to the Jenkins project this year. I believe I can speak for
project founder,
&lt;a href=&quot;https://github.com/kohsuke&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;,
in stating that the Jenkins community has grown beyond our anything we could
have imagined five years ago, let alone ten!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are number of ways to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/participate/&quot;&gt;participate&lt;/a&gt;
in the Jenkins project, so if you didn’t have an opportunity to join in during
2016, we hope to see you next year!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/20/jenkins-puppet-enterprise-plugin/</id>
<title>Continuous Delivery with Jenkins and Puppet Enterprise</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-12-20T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/20/jenkins-puppet-enterprise-plugin/" />
<author>
<name>ccaum</name>
</author>
<category term="continuousdelivery"></category>
<category term="puppet"></category>
<category term="pipeline"></category>
<category term="puppetenterprise"></category>
<summary>
This is a guest post by Carl Caum,
who works at Puppet and created the
Puppet Enterprise Pipeline plugin.






During PuppetConf 2016, myself and Brian Dawson from CloudBees announced the
Puppet Enterprise
plugin for Jenkins Pipeline.
Let&#8217;s take a look at how the plugin makes it trivial to use Puppet to perform
some or all of the deployment tasks in continuous delivery pipelines.


Jenkins Pipeline introduced an amazing world where the definition for a
pipeline is managed from the same version control repository as the code
delivered by the pipeline. This is a powerful idea, and one I felt complemented
Puppet&#8217;s automation strengths. I wanted to make it trivial to control...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com/ccaum&quot;&gt;Carl Caum&lt;/a&gt;,
who works at &lt;a href=&quot;http://puppet.com&quot;&gt;Puppet&lt;/a&gt; and created the
&lt;a href=&quot;https://plugins.jenkins.io/puppet-enterprise-pipeline&quot;&gt;Puppet Enterprise Pipeline plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During PuppetConf 2016, myself and Brian Dawson from CloudBees announced the
&lt;a href=&quot;https://plugins.jenkins.io/puppet-enterprise-pipeline&quot;&gt;Puppet Enterprise
plugin for Jenkins Pipeline&lt;/a&gt;.
Let’s take a look at how the plugin makes it trivial to use Puppet to perform
some or all of the deployment tasks in continuous delivery pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins Pipeline introduced an amazing world where the definition for a
pipeline is managed from the same version control repository as the code
delivered by the pipeline. This is a powerful idea, and one I felt complemented
Puppet’s automation strengths. I wanted to make it trivial to control Puppet
Enterprise’s orchestration and infrastructure code management capabilities, as
well as set hierarchical configuration data and use Puppet’s inventory data
system as a source of truth – all from a Pipeline script. The result was the
Puppet Enterprise plugin, which fully buys into the Pipeline ideals by
providing methods to control the different capabilities in Puppet Enterprise.
The methods provide ways to query
&lt;a href=&quot;https://docs.puppet.com/puppetdb/4.3/&quot;&gt;PuppetDB&lt;/a&gt;, set
&lt;a href=&quot;https://docs.puppet.com/hiera/3.2/&quot;&gt;Hiera&lt;/a&gt; key/value pairs, deploy
Puppet code environments with
&lt;a href=&quot;https://docs.puppet.com/pe/latest/code_mgr.html&quot;&gt;Code Management&lt;/a&gt;, and kick off orchestrated Puppet runs with the
&lt;a href=&quot;https://docs.puppet.com/pe/latest/app_orchestration_overview.html&quot;&gt;Orchestrator&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-puppet-enterprise-for-jenkins-pipeline-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-puppet-enterprise-for-jenkins-pipeline-plugin&quot;&gt;&lt;/a&gt;The Puppet Enterprise for Jenkins Pipeline plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Puppet Enterprise for Jenkins Pipeline plugin itself has zero system
dependencies. You need only to install the plugin from the update center. The
plugin uses APIs available in Puppet Enterprise to do its work. Since the
PuppetDB query, Code Management, and Orchestrator APIs are all
backed by Puppet Enterprise’s role-based access control (RBAC) system, it’s
easy to restrict what pipelines are allowed to control in Puppet Enterprise. To
learn more about RBAC in Puppet Enterprise,
&lt;a href=&quot;https://docs.puppet.com/pe/latest/rbac_intro.html&quot;&gt;read the docs here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring&quot;&gt;&lt;/a&gt;Configuring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuring the plugin is fairly straight forward. It takes three simple steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Set the address of the Puppet server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Jenkins credential with a Pupppet Enterprise RBAC authentication token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the Hiera backend&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;set-the-puppet-enterprise-server-address&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#set-the-puppet-enterprise-server-address&quot;&gt;&lt;/a&gt;Set the Puppet Enterprise Server Address&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to Jenkins &amp;gt; Manage Jenkins &amp;gt; Puppet Enterprise page. Put the DNS address of
the Puppet server in the &lt;strong&gt;Puppet Master Address&lt;/strong&gt; text field. Click the &lt;strong&gt;Test
Connection&lt;/strong&gt; button to verify the server is reachable, the Puppet CA certificate
is retrievable, and HTTPS connections are successful. Once the test succeeds,
Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-jenkins-credentials-entry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#create-a-jenkins-credentials-entry&quot;&gt;&lt;/a&gt;Create a Jenkins Credentials Entry&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin uses the Jenkins built-in credentials system (the plain-credentials
plugin) to store and refer RBAC tokens to Puppet Enterprise for authentication
and authorization. First, generate an RBAC token in Puppet Enterprise by
following
&lt;a href=&quot;https://docs.puppet.com/pe/latest/rbac_token_auth.html#generating-a-token-for-use-by-a-service&quot;&gt;the
instructions on the docs site.&lt;/a&gt; Next, create a new Jenkins Credentials item
with Kind &lt;strong&gt;Secret text&lt;/strong&gt; and the &lt;strong&gt;Secret&lt;/strong&gt; value the Puppet Enterprise RBAC
token. It’s highly recommended to give the credential an ID value that’s
descriptive and identifiable. You’ll use it in your Pipeline scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In your Jenkinsfile, use the &lt;code&gt;puppet.credentials&lt;/code&gt; method to set all future Puppet
methods to use the RBAC token. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.credentials &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pe-team-token&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;configure-the-hiera-backend&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configure-the-hiera-backend&quot;&gt;&lt;/a&gt;Configure the Hiera Backend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin exposes an HTTP API for performing Hiera data lookups for key/value
pairs managed by Pipeline jobs. To configure Hiera on the Puppet compile
master(s) to query the Jenkins Hiera data store backend, use the
&lt;a href=&quot;https://github.com/crayfishx/hiera-http&quot;&gt;hiera-http&lt;/a&gt; backend. On the
Puppet Enterprise compile master(s), run the following commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;/opt/puppetlabs/puppet/bin/gem install hiera-http
/opt/puppetlabs/bin/puppetserver gem install hiera-http&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can configure the /etc/puppetlabs/puppet/hiera.yaml file. The following
configuration instructs Hiera to first look to the Hiera yaml files in the
Puppet code’s environment, then fall back to the http backend. The http backend
will first query the Hiera data store API looking for the key in the scope with
the same name as the node. If nothing’s found, look for the key in the node’s
environments. You can use any Facter fact to match scope names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;:backends:
  - yaml
  - http

:http:
  :host: jenkins.example.com
  :port: 8080
  :output: json
  :use_auth: true
  :auth_user: &amp;lt;user&amp;gt;
  :auth_pass: &amp;lt;pass&amp;gt;
  :cache_timeout: 10
  :failure: graceful
  :paths:
    - /hiera/lookup?path=%{clientcert}&amp;amp;key=%{key}
    - /hiera/lookup?path=%{environment}&amp;amp;key=%{key}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, restart the pe-puppetserver process to pick up the new configs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=stopped
/opt/puppetlabs/bin/puppet resource service pe-puppetserver ensure=running&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;hiera-http-authentication&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hiera-http-authentication&quot;&gt;&lt;/a&gt;Hiera HTTP Authentication&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Jenkins' Global Security is configured to allow unauthenticated read-only
access, the &lt;em&gt;use_auth&lt;/em&gt;, &lt;em&gt;auth_pass&lt;/em&gt;, and &lt;em&gt;auth_user&lt;/em&gt; parameters are
unnecessary. Otherwise, create a local Jenkins user that has permissions to
view the Hiera Data Lookup page and use that user’s credentials for the
hiera.yaml configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;querying-the-infrastructure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#querying-the-infrastructure&quot;&gt;&lt;/a&gt;Querying the infrastructure&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PuppetDB is an extensive data store that holds every bit of information Puppet
generates and collects across every system Puppet is installed on. PuppetDB
provides a sweet query language called
&lt;a href=&quot;https://docs.puppet.com/puppetdb/4.3/api/query/v4/pql.html&quot;&gt;PQL.&lt;/a&gt; With PQL,
you can ask complex questions of your infrastructure such as &quot;How many
production Red Hat systems are there with the openssl package installed?&quot; or
&quot;What us-west-2c nodes with the MyApp role that were created in the last 24
hours?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be a powerful tool for parts of your pipeline where you need to
perform specific operations on subsets of the infrastructure like draining a
loadbalancer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s an example using the &lt;code&gt;puppet.query&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;results = puppet.query &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
  inventory[certname] {
    facts.os.name = &quot;RedHat&quot; and
    facts.ec2_metadata.placement.availability-zone = &quot;us-west-2c&quot; and
    facts.uptime_hours &amp;lt; 24
  }&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'''&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The query returns an array of matching items. The results can be
iterated on, and even passed to a series of &lt;code&gt;puppet.job&lt;/code&gt; calls. For example, the
following code will query all nodes in production that experienced a failure on
the last Puppet run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;results = puppet.query &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;nodes { latest_report_status = &quot;failed&quot; and catalog_environment = &quot;production&quot;}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that once you can use closures in Pipeline scripts, doing the above
example will be much simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-an-orchestrator-job&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-an-orchestrator-job&quot;&gt;&lt;/a&gt;Creating an orchestrator job&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The orchestration service in Puppet Enterprise is a tool to perform
orchestrated Puppet runs across as broad or as targeted an infrastructure as
you need at different parts of a pipeline. You can use the orchestrator to
update applications in an environment, or update a specific list of nodes, or
update nodes across a set of nodes that match certain criteria. In each
scenario, Puppet will always push distributed changes in the correct order by
respecting the cross-node dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create a job in the Puppet orchestrator from a Jenkins pipeline, use the
&lt;code&gt;puppet.job&lt;/code&gt; method. The &lt;code&gt;puppet.job&lt;/code&gt; method will create a new orchestrator job,
monitor the job for completion, and determine if any Puppet runs failed. If
there were failures, the pipeline will fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following are just some examples of how to run Puppet orchestration jobs against the infrastructure you need to target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target an entire environment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target instances of an application in production:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;application&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Myapp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target a specific list of nodes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;nodes&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;db.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;appserver01.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;appserver02.example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Target nodes matching a complex set if criteria:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.job &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;production&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;query&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;inventory[certname] { facts.os.name = &quot;RedHat&quot; and facts.ec2_metadata.placement.availability-zone = &quot;us-west-2c&quot; and uptime_hours &amp;lt; 24 }&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the &lt;code&gt;puppet.job&lt;/code&gt; command means you can be as broad or as targeted
as you need to be for different parts of your pipeline. There are many other
options you can add to the &lt;code&gt;puppet.job&lt;/code&gt; method call, such as setting the Puppet
runs to noop, or giving the orchestrator a maximum concurrency limit.
&lt;a href=&quot;https://puppet.com/product/capabilities/application-orchestration&quot;&gt;Learn
more about the orchestrator here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;updating-puppet-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#updating-puppet-code&quot;&gt;&lt;/a&gt;Updating Puppet code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re using Code Management in Puppet Enterprise (and you should), you can
ensure that all the modules, site manifests, Hiera data, and roles and profiles
are staged, synced, and ready across all your Puppet masters, direct from your
Jenkins pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update Puppet code across all Puppet masters, use the &lt;code&gt;puppet.codeDeploy&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.codeDeploy &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://puppet.com/product/capabilities/code-management&quot;&gt;Learn more Code Management in Puppet Enterprise here.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-hiera-values&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-hiera-values&quot;&gt;&lt;/a&gt;Setting Hiera values&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin includes an experimental feature to set Hiera key/value pairs. There
are many cases where you need to promote information through a pipeline, such
as a build version or artifact location. Doing so is very difficult in Puppet,
since data promotion almost always involves changing Hiera files and committing
to version control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin exposes an HTTP API endpoint that Hiera can query using the
hiera-http backend. With the backend configured on the Puppet master(s),
key/value pairs can be set to scopes. A scope is arbitrary and can be anything
you like, such as a Puppet environment, a node’s certname, or the name of a
Facter fact like operatingsystem or domain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To set a Hiera value from a pipeline, use the &lt;code&gt;puppet.hiera&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;puppet.hiera &lt;span style=&quot;color:#606&quot;&gt;scope&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staging&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;key&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build-version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;value&lt;/span&gt;: env.BUILD_ID&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can set the same key with the same value to the production scope later
in the pipeline, followed by a call to &lt;code&gt;puppet.job&lt;/code&gt; to push the change out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;examples&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://github.com/jenkinsci/puppet-enterprise-pipeline-plugin/tree/master/examples&quot;&gt;plugin’s
Github repository&lt;/a&gt; contains a set of example Pipeline scripts. Feel free to
issue pull requests to add your own scripts!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m pretty excited to see how this is going to help simplify continuous
delivery pipelines. I encourage everyone to get started with continuous
delivery today, even if it’s just a simple pipeline. As your practices evolve,
you can begin to add automated tests, automate away manual checkpoints, start
to incorporate InfoSec tests, and include phases for practices like patch
management that require lots of manual approvals, verifications and rollouts.
You’ll be glad you did.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/</id>
<title>Announcing the beta of Declarative Pipeline Syntax</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-12-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/19/declarative-pipeline-beta/" />
<author>
<name>hrmpw</name>
</author>
<category term="pipeline"></category>
<category term="blueocean"></category>
<summary>
Last week we released version 0.7.1 of the
Pipeline-Model-Defintion
plugin and wanted to crown it as the official Beta version of the Declarative
Pipeline syntax. Although it has been available in the update center
since August,
we continue to solidify the syntax. We feel this release is getting
very close to the final version and should not change much before 1.0. However,
it is still a Beta so further tweaks are possible.









A release (0.8.0) is planned for early January 2017 which will finalize the
syntax with the following changes:
JENKINS-40524,
JENKINS-40370,
JENKINS-40462,
JENKINS-40337






What is Declarative Pipeline?


All the way back at Jenkins World in September, Andrew Bayer presented a
sneak peak
of a new syntax...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week we released version 0.7.1 of the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Model+Definition+Plugin&quot;&gt;&lt;em&gt;Pipeline-Model-Defintion&lt;/em&gt;&lt;/a&gt;
plugin and wanted to crown it as the official Beta version of the Declarative
Pipeline syntax. Although it has been available in the update center
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/&quot;&gt;since August&lt;/a&gt;,
we continue to solidify the syntax. We feel this release is getting
very close to the final version and should not change much before 1.0. However,
it is still a Beta so further tweaks are possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A release (0.8.0) is planned for early January 2017 which will finalize the
syntax with the following changes:
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40524&quot;&gt;JENKINS-40524&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40370&quot;&gt;JENKINS-40370&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40462&quot;&gt;JENKINS-40462&lt;/a&gt;,
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40337&quot;&gt;JENKINS-40337&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-declarative-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-is-declarative-pipeline&quot;&gt;&lt;/a&gt;What is Declarative Pipeline?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the way back at Jenkins World in September, Andrew Bayer presented a
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;sneak peak&lt;/a&gt;
of a new syntax for constructing Pipelines. We are calling this new syntax
Declarative Pipeline to differentiate it from the existing Scripted Pipeline
syntax that has always been a part of Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After listening to many Jenkins users over the last year we felt that, while
Pipeline Script provides tremendous power, flexibility, and extensibility, the
learning curve for Scripted Pipeline was steep for users new to either Jenkins
or Pipeline. Beginning users wanting to take advantage of all the features
provided by Pipeline and Jenkinsfiles were required to learn Scripted Pipeline
or remain limited to the functionality provided by Freestyle jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline does not replace Scripted Pipeline but extends Pipeline it
with a pre-defined structure to let users focus entirely on the &lt;code&gt;steps&lt;/code&gt;
required at each &lt;code&gt;stage&lt;/code&gt; without needing to worry about scripting every aspect
of the pipeline. Granular flow-control is extremely powerful and Scripted
Pipeline syntax will always be part of Pipeline but it’s not for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline enables all users to connect simple, declarative blocks
that define build agents (including Docker), post build actions, environment
settings, credentials and all stages that make up the pipeline. Best of all,
because this Declarative syntax is part of Pipeline, all build steps and build
wrappers available in Plugins or loaded from Shared Libraries are also
available as &lt;code&gt;steps&lt;/code&gt; in Declarative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Below is an example of a pipeline in Declarative syntax. You can also switch the view to show the same pipeline in Scripted syntax.
 The Declarative syntax has a more straightforward structure that is easier to grok by users not versed in Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent  &lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;has-docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;dockerfile&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;
  environment {
    GIT_COMMITTER_NAME = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    GIT_COMMITTER_EMAIL = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkins@jenkins.io&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
  stages {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
      steps {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Archive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;){
      steps {
        archive &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/**/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      }
    }
  }
  post {
    always {
      deleteDir()
    }
    success {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Yay, we passed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    failure {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Boo, we failed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Pipeline Script&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_COMMITTER_NAME = jenkins&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GIT_COMMITTER_EMAIL = jenkins@jenkins.io&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]) {
  node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;has-docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
      checkout scm &lt;span style=&quot;color:#777&quot;&gt;// checks out Dockerfile and source code&lt;/span&gt;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; myImage = docker.build &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;my-environment:snapshot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      myImage.inside {
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
          sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Archive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
          archive &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/**/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt; || currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Yay, we passed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      }
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (exc) {
      mail &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;me@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE: &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;currentBuild.fullDisplayName&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Boo, we failed.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt; {
      deleteDir()
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-can-you-help&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-can-you-help&quot;&gt;&lt;/a&gt;How can you help?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Install the lastest version of the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Model+Definition+Plugin&quot;&gt;&lt;em&gt;Pipeline-Model-Defintion&lt;/em&gt;&lt;/a&gt; plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read the documentation:
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/getting%20started&quot;&gt;Getting Started&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/master/SYNTAX.md&quot;&gt;Syntax overview&lt;/a&gt;.
(These documents will be incorporated into the Jenkins.io documentation.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert some of your existing Pipeline scripts into Declarative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Log any issues or enhancements you have
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-40493&quot;&gt;here&lt;/a&gt;
for the syntax, the execution, or the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask questions. You can send questions to the
&lt;a href=&quot;mailto:jenkinsci-users@googlegroups.com&quot;&gt;users mailing list&lt;/a&gt;
or visit the &lt;code&gt;#jenkins&lt;/code&gt; channel on IRC.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how-will-this-work-with-blue-ocean&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how-will-this-work-with-blue-ocean&quot;&gt;&lt;/a&gt;How will this work with Blue Ocean?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Blue Ocean is all about Pipelines in Jenkins. Running, displaying, and soon,
creating Pipelines.  Blue Ocean will be able to run and display Pipelines
written in this new syntax just like any other Pipeline works today. However,
because Declarative Pipeline includes a pre-defined structure, or model, it is
now possible to create and edit pipelines with a GUI editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean/pipeline-editor.png&quot; alt=&quot;Pipeline Editor&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although we plan to launch 1.0 of Declarative Pipeline before Blue Ocean 1.0 is
officially available, we expect to have a working Beta of the Editor available
to play with. The combination of a simple syntax and an intuitive editor
should make creating Jenkisn Pipelines a breeze.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;happy-holidays&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#happy-holidays&quot;&gt;&lt;/a&gt;Happy Holidays&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope everyone has a great end of the year and a Happy New Year. With
Declarative Pipeline and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
we expect great things for Jenkins in 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/10/monthly-jam-recap-november/</id>
<title>Monthly JAM Recap - November 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-12-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/10/monthly-jam-recap-november/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="jam"></category>
<category term="meetup"></category>
<summary>
As we near the end of the year, the number of November JAMs show that the
Jenkins community isn&#8217;t slowing down for holiday season. We had a number of
excellent events hosted around the world this November with plenty of great
stories and presentations shared by the various members of the world-wide
Jenkins community.


Melbourne, Australia JAM

Melbourne JAM leaders,
Raisa
and
Bhuva
hosted Blue Ocean for the inaugural meeting. Attendees learned the values of
Blue Ocean, a project that rethinks the user experience of Jenkins, modeling
and presenting the process of software delivery by surfacing information that
is important to development teams with as few clicks as possible, while still
staying true to...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we near the end of the year, the number of November JAMs show that the
Jenkins community isn’t slowing down for holiday season. We had a number of
excellent events hosted &lt;em&gt;around the world&lt;/em&gt; this November with plenty of great
stories and presentations shared by the various members of the world-wide
Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;melbourne-australia-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#melbourne-australia-jam&quot;&gt;&lt;/a&gt;Melbourne, Australia JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Melbourne JAM leaders,
&lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/members/192742554/&quot;&gt;Raisa&lt;/a&gt;
and
&lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/members/77780422/&quot;&gt;Bhuva&lt;/a&gt;
hosted Blue Ocean for the inaugural meeting. Attendees learned the values of
Blue Ocean, a project that rethinks the user experience of Jenkins, modeling
and presenting the process of software delivery by surfacing information that
is important to development teams with as few clicks as possible, while still
staying true to the extensibility that Jenkins always has had as a core value.
Thank you &lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt; for stopping by to take part in
the inauguration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/melbourne.png&quot; alt=&quot;Melbourne JAM&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;singapore-singapore-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#singapore-singapore-jam&quot;&gt;&lt;/a&gt;Singapore, Singapore JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the members  who had several years of experience using Jenkins (since
Hudson days in fact) to present some basics on Continuous Integration with
GitHub. It was targeted at new members who are starting out with Jenkins. We
understand that we cannot always serve advanced topics to cater to the
experienced users and neglect the newbies so this session was targeted to help
give new users an introduction to Jenkins. It went well with about 15-20
attendees and we hope to run some hands-on workshops in 2017. Some members were
looking forward to freebies like stickers and T-shirts too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/singapore-prep.png&quot; alt=&quot;Singapore JAM prep&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/singapore-jam.png&quot; alt=&quot;Singapore JAM&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;moscow-russia-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moscow-russia-jam&quot;&gt;&lt;/a&gt;Moscow, Russia JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moscow JAM leaders,
&lt;a href=&quot;https://twitter.com/tolkv&quot;&gt;Kirill Tolkachev&lt;/a&gt;
and
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;
led the inaugural meeting with
a packed full agenda. Oleg began the meeting with an update on Jenkins 2 what improvements users can expect and what
enhancements are in the works within the Jenkins project. Following Oleg, Kirill shared
how his team in Alfa Laboratory used Jenkins to improve CD/DevOps in their
projects (with Jenkins Pipeline, Job DSL and
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
), the problems they experienced and how they fixed them. Then Oleg talked
about Jenkins Pipeline internals, main features and recent changes in the
ecosystem. It was followed up by a discussion of large-scale Jenkins instances
at the after-party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recording of the event can be found
&lt;a href=&quot;https://www.youtube.com/playlist?list=PLTur3n9C14XFbfD2gT3CRcwBwobKOvRHJ&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;milan-italy-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milan-italy-jam&quot;&gt;&lt;/a&gt;Milan, Italy JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first meetup was a great opportunity to meet local Jenkins fans to learn
and share Jenkins experiences at a local cafe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-california-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-california-jam&quot;&gt;&lt;/a&gt;San Francisco, California JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;
performed a 30 minutes live Pipeline coding demo to a relatively novice
audience (though all had used Jenkins). A good amount of questions from the
audience  which conveyed an appetite for the content being presented.
&lt;a href=&quot;https://twitter.com/RyanWallner&quot;&gt;Ryan Wallner&lt;/a&gt;,
presenter from ClusterHQ, also gave a demo based around Pipeline talking about
ClusterHQ’s &quot;Fli&quot; integration with a delivery pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/IMG_0999.JPG&quot; alt=&quot;ClusterHQ &amp;amp; Jenkins stickers&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/monthly-jam-nov-2016/IMG_1004.JPG&quot; alt=&quot;Tyler presenting&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;washington-dc-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#washington-dc-jam&quot;&gt;&lt;/a&gt;Washington, DC JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There was a fantastic 90% showup rate at this month’s meetup - 58 RSVPs and 52
in attendance was pretty impressive. All this may be due to Fannie Mae’s story
- the success of how they used Jenkins for CI/CD as part of their DevOps
adoption. Afterwards, there was a lot of interests and further discussions
taking place. Next month’s host will be Freddie Mac.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;seattle-washington-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#seattle-washington-jam&quot;&gt;&lt;/a&gt;Seattle, Washington JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Long time Jenkins community member and Seattle JAM leader,
&lt;a href=&quot;https://github.com/khaido&quot;&gt;Khai Do&lt;/a&gt; showed how OpenStack uses &quot;Jenkins Job
Builder&quot; to manage and run thousands of Jenkins jobs per day in their
multi-master CI/CD system.  He also compared
&lt;a href=&quot;http://docs.openstack.org/infra/jenkins-job-builder/&quot;&gt;Jenkins Job Builder&lt;/a&gt;
with other Jenkins &quot;Infrastructure-as-code&quot; technologies - Jenkins Pipeline and
Jenkins JobDSL. It was followed by an in-depth Q&amp;amp;A and discussion session.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;/a&gt;Dallas/Forth Worth, Texas (DFW) JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The November DFW JAM was the most strongly attended of the year! DFW JAM leader,
&lt;a href=&quot;https://github.com/ericsmalling&quot;&gt;Eric Smalling&lt;/a&gt; discussed the benefits of
dynamic build agents and demonstrated various ways to implement them such as
the EC2 and Docker plugins. There was a lot of interest and discussion,
especially around Docker and the ability it provides to have ephemeral agents
with very little provisioning time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recording can be downloaded from
&lt;a href=&quot;https://drive.google.com/file/d/0BzW9GvvtcA5naDRNeXVDOTY0X28/view&quot;&gt;Gooel Drive&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Area+Meetup&quot;&gt;JAM member&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be a JAM speaker or sponsor. Let us know &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/12/09/december-jenkins-events/</id>
<title>Upcoming December Jenkins Events</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-12-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/12/09/december-jenkins-events/" />
<author>
<name>alyssat</name>
</author>
<category term="events"></category>
<category term="jam"></category>
<summary>
Happy Holidays! A special shout out to all JAM leaders who continue to keep
local activities going in December.


Online JAM



December 14 | Live Demos: Pipeline, Git, and Blue Ocean





North America



December 7 | Seattle JAM: Jenkins at Microsoft


December 14 | Los Angeles JAM: Jenkins Days


December 14 | Guadalajara JAM: Jenkins &amp; Docker





Australia



December 14 | Melbourne JAM: Meeting at AWS Office





Links



Start a JAM in your city if there isn&#8217;t one already.


Become a JAM member


Become an online JAM member


Speak or sponsor at a JAM. Contact us at jenkinsci-jam@googlegroups.com


Become a Jenkins project contributor...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happy Holidays! A special shout out to all JAM leaders who continue to keep
local activities going in December.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;online-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#online-jam&quot;&gt;&lt;/a&gt;Online JAM&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 14 | &lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/235898656/&quot;&gt;Live Demos: Pipeline, Git, and Blue Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;north-america&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#north-america&quot;&gt;&lt;/a&gt;North America&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 7 | Seattle JAM: &lt;a href=&quot;https://www.meetup.com/Seattle-Jenkins-Area-Meetup/events/235189240/&quot;&gt;Jenkins at Microsoft&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Los Angeles JAM: &lt;a href=&quot;https://www.meetup.com/Los-Angeles-Jenkins-Area-Meetup/events/235925065/&quot;&gt;Jenkins Days&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Guadalajara JAM: &lt;a href=&quot;https://www.meetup.com/Guadalajara-Jenkins-Area-Meetup/events/234929920/&quot;&gt;Jenkins &amp;amp; Docker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;australia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#australia&quot;&gt;&lt;/a&gt;Australia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;December 14 | Melbourne JAM: &lt;a href=&quot;https://www.meetup.com/Melbourne-Jenkins-Area-Meetup/events/235872607/&quot;&gt;Meeting at AWS Office&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speak or sponsor at a JAM. Contact us at &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/</id>
<title>What JVM versions are running Jenkins? 2016 Update!</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/22/what-jvm-versions-are-running-jenkins-the-return/" />
<author>
<name>batmat</name>
</author>
<category term="statistics"></category>
<summary>
Like for last year&#8217;s article about the same subject, yet another recent discussion about finally requiring Java 8 to run future versions Jenkins pushed me to gather some more factual data around it.








What follows contains some opinions or statements which may not be seen as purely factual or neutral. Note that this represents by no mean the general position of the Jenkins governance board. This is solely my opinion as a contributor based on the data I gathered, and what I feel from the feedback of the community at large.





Java 8 now the most used version, and growing


If we look...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like for &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2015/11/03/what-jvm-versions-are-running-jenkins/&quot;&gt;last year’s article about the same subject&lt;/a&gt;, yet another &lt;a href=&quot;https://groups.google.com/forum/?utm_medium=email&amp;amp;utm_source=footer#!msg/jenkinsci-dev/fo5nKLhZK5U/Zb9jHpBJBQAJ&quot;&gt;recent discussion about finally requiring Java 8 to run future versions Jenkins&lt;/a&gt; pushed me to gather some more factual data around it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
What follows contains some opinions or statements which may not be seen as purely factual or neutral. Note that this represents by no mean the general position of the Jenkins governance board. This is solely my opinion as a contributor based on the data I gathered, and what I feel from the feedback of the community at large.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java-8-now-the-most-used-version-and-growing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-8-now-the-most-used-version-and-growing&quot;&gt;&lt;/a&gt;Java 8 now the most used version, and growing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we look at the global numbers, Java 8 runtimes now represent 52.8% of the Jenkins instances running, which have not opted out of anonymous usage statistics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jvm-versions/2016-jvm-stats-all.png&quot; alt=&quot;2016 jvm stats all&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if you look at the trend, Java 8 is clearly growing fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;zooming-into-the-jenkins-2-x-instances-subset&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zooming-into-the-jenkins-2-x-instances-subset&quot;&gt;&lt;/a&gt;Zooming into the Jenkins 2.x instances subset&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, if you look at that picture, though already interesting and showing a clear trend towards Java 8 runtime adoption, some might argue it’s being too nice to older JREs.
The reasoning could be: instances running (very) old Jenkins versions may not be the ones you want to look at when trying to plan the future of an opensource project:
those are indeed probably not going to upgrade in general anyway, or when they do, upgrading the JRE would be a small thing compared to the rest to be tested with such a gap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if we only keep the instances running Jenkins 2.x, then the proportion of Java 8 goes to almost 70% compared to Java 7 (Jenkins 2.x requires Java 7)
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jvm-versions/2016-jvm-stats-only-2.x.png&quot; alt=&quot;2016 jvm stats only 2.x&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java 8 adoption numbers are getting bigger, while every other JREs are going down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are still using a JRE 7 to run Jenkins, it is seriously time to think
about upgrading to 8.  Knowing that it’s definitely not a bleeding-edge path
might help you go that way, especially if you generally do not like upgrades.
Also, as a reminder, the most used JDK,
&lt;a href=&quot;https://java.com/en/download/faq/java_7.xml&quot;&gt;Oracle JDK 7 now got end-of-lifed more than 18 months ago&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contrary to the past attempts the previous years, the discussion on the Jenkins
development mailing list did not trigger strong rebutals by many people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perhaps it’s finally time for Mr. Jenkins to upgrade to Java 8!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
All numbers shown below are derived from the new &lt;a href=&quot;stats.jenkins.io/plugin-installation-trend/jvms.json&quot;&gt;&lt;code&gt;jvms.json&lt;/code&gt;&lt;/a&gt; file now generated automatically every month, after the two related pull-requests  &lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/pull/21&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/pull/22&quot;&gt;2&lt;/a&gt; got merged.
&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. 69% for October, 67% in September
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. You are more than welcome to review those Pull-Requests and shout if you see something wrong in the calculations.
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/21/gc-tuning/</id>
<title>Tuning Jenkins GC For Responsiveness and Stability with Large Instances</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/21/gc-tuning/" />
<author>
<name>svanoort</name>
</author>
<category term="performance"></category>
<category term="scalability"></category>
<category term="administration"></category>
<summary>
This is a
cross
post by Sam Van Oort, Software Engineer at
CloudBees and contributor to the Jenkins project.






Today I&#8217;m going to show you how easy it is to tune Jenkins Java settings to
make your masters more responsive and stable, especially with large heap sizes.


The Magic Settings:



Basics: -server -XX:+AlwaysPreTouch


GC Logging: -Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy


G1 GC settings: -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1


Heap settings: set your minimum heap size (-Xms) to at least 1/2 of your maximum size (-Xmx).




Now, let&#8217;s look at where those came from!  We&#8217;re going to focus on garbage
collection (GC)...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a
&lt;a href=&quot;https://www.cloudbees.com/blog/joining-big-leagues-tuning-jenkins-gc-responsiveness-and-stability&quot;&gt;cross
post&lt;/a&gt; by &lt;a href=&quot;https://github.com/svanoort&quot;&gt;Sam Van Oort&lt;/a&gt;, Software Engineer at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; and contributor to the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today I’m going to show you how easy it is to tune Jenkins Java settings to
make your masters more responsive and stable, especially with large heap sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-magic-settings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-magic-settings&quot;&gt;&lt;/a&gt;The Magic Settings:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basics:&lt;/strong&gt; &lt;code&gt;-server -XX:+AlwaysPreTouch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GC Logging:&lt;/strong&gt; &lt;code&gt;-Xloggc:$JENKINS_HOME/gc-%t.log -XX:NumberOfGCLogFiles=5 -XX:+UseGCLogFileRotation -XX:GCLogFileSize=20m -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -XX:+PrintGCCause -XX:+PrintTenuringDistribution -XX:+PrintReferenceGC -XX:+PrintAdaptiveSizePolicy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;G1 GC settings:&lt;/strong&gt; &lt;code&gt;-XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20 -XX:+UnlockDiagnosticVMOptions -XX:G1SummarizeRSetStatsPeriod=1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Heap settings:&lt;/strong&gt; set your minimum heap size (&lt;code&gt;-Xms&lt;/code&gt;) to at least 1/2 of your maximum size (&lt;code&gt;-Xmx&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let’s look at where those came from!  We’re going to focus on garbage
collection (GC) here and dig fast and deep to strike for gold; if you’re not
familiar with GC fundamentals
&lt;a href=&quot;http://blog.takipi.com/garbage-collectors-serial-vs-parallel-vs-cms-vs-the-g1-and-whats-new-in-java-8/&quot;&gt;take a look at this source&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Because performance tuning is data driven, I’m going to use real-world data
selected three very large Jenkins instances that I help support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;What we’re not going to do:&lt;/strong&gt; Jenkins basics, or play with max heap.  See the
section &quot;what should I do before tuning.&quot;  This is for cases where we really
&lt;strong&gt;do&lt;/strong&gt; need a big heap and can’t easily split our Jenkins masters into smaller
ones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-problem-hangups&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-problem-hangups&quot;&gt;&lt;/a&gt;The Problem: Hangups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Symptom: Users report that the Jenkins instance periodically hangs, taking
several seconds to handle normally fast requests.  We may even see lockups or
timeouts from systems communicating with the Jenkins master (build agents,
etc).  In long periods of heavy load, users may report Jenkins running slowly.
Application monitoring shows that during lockups all or most of the CPU cores
are fully loaded, but there’s not enough activity to justify it.  Process and
JStack dumps will reveal that the most active Java threads are doing garbage
collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Instance A, they had this problem.  Their Jenkins Java arguments are very
close to the default, aside from sizing the heap:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;24 GB max heap, 4 GB initial, default GC settings (ParallelGC)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A few flags set (some coming in as defaults): &lt;code&gt;-XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:+ReduceSignalUsage -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After enabling garbage collection (GC) logging we see the following rough stats:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-bulkstats-CompanyA-red-parallelgc.png&quot; alt=&quot;HeapStats Instance A System Red CPU use-parallelGC&quot; /&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diving deeper, we get this chart of GC pause durations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyA-red-parallelgc.png&quot; alt=&quot;Instance A Jenkins Red GC duration use-parallelGC&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.64%  (percent of time spent executing application code, not doing garbage collection)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 348 ms (ugh!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 36 (2.7%)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 263 ms / 2.803 sec&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 42.4 MB/s &amp;amp; 1.99 MB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Explanations:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, young GC cycles very quickly clear away freshly-created
garbage, but the deeper old-gen GC cycles run very slowly: 2-4 seconds. This is
where our problems happen.  The default Java garbage collection algorithm
(ParallelGC) pauses everything when it has to collect garbage (often called a
&quot;stop the world pause&quot;). During that period, Jenkins is fully halted: normally
(with small heaps) these pauses are too brief to be an issue.  With heaps of 4
GB or larger, the time required becomes long enough to be a problem: several
seconds over short windows, and over a longer interval you occasionally see
much longer pauses (tens of seconds, or minutes.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is where the user-visible hangs and lock-ups happen.  It also adds
significant latency to those build/deploy tasks.  In periods of heavy load, the
system was even experiencing hangs of 30+ seconds for a single full GC cycle.
This was long enough to trigger network timeouts (or internal Jenkins thread
timeouts) and cause even larger problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately there’s a solution: the concurrent low-pause garbage collection
algorithms, Concurrent Mark Sweep (CMS) and Garbage First (G1). These attempt
to do much of the garbage collection concurrently with application threads,
resulting in much shorter pauses (at a slight cost in extra CPU use).  We’re
going to focus on G1, because it is slated to become the default in Java 9 and
is the official recommendation for large heap sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Let’s see what happens when someone uses G1 on a similarly-sized Jenkins
master with Instance B (17 GB heap):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Their settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;16 GB max heap, 0.5 GB initial size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java flags (mostly defaults, except for G1): &lt;code&gt;-XX:+UseG1GC -XX:+UseCompressedClassPointers -XX:+UseCompressedOops&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the GC log analysis:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyB-g1.png&quot; alt=&quot;Instance B Jenkins G1 duration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 98.76%  (not great, but still only slowing things down a bit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 128 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 11, 0.27%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 122 ms / 1 sec 232 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 132.53 MB/s &amp;amp; 522 KB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, &lt;strong&gt;much better&lt;/strong&gt;: some improvement may be expected from a 30% smaller
heap, but not as much as we’ve seen.  Most of the GC pauses are well
under 2 seconds, but we have 11 outliers - long Full GC pauses of 2-12 seconds.
Those are troubling; we’ll take a deeper dive into their causes in a second.
First, let’s look at the big picture and at how Jenkins behaves with G1 GC for
a second instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 Garbage Collection with Instance C (24 GB heap):&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Their settings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;24 GB max heap, 24 GB initial heap, 2 GB max metaspace&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some custom flags: `-XX:+UseG1GC -XX:+AlwaysPreTouch -XX:+UseStringDeduplication  -XX:+UseCompressedClassPointers -XX:+UseCompressedOops `&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clearly they’ve done some garbage collection tuning and optimization.  The
AlwaysPreTouch pre-zeros allocated heap pages, rather than waiting until
they’re first used. This is suggested especially for large heap sizes, because
it trades slightly slower startup times for improved runtime performance.  Note
also that they pre-allocated the whole heap.  This is a common optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They also enabled StringDeduplication, a G1 option introduced in Java 8 Update
20 that transparently replaces identical character arrays with pointers to the
original, reducing memory use (and improving cache performance).  Think of it
like &lt;code&gt;String.intern()&lt;/code&gt; but it silently happens during garbage collection.  This
is a concurrent operation added on to normal GC cycles, so it doesn’t pause the
application.  We’ll look at its impacts later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking at the basics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyC-g1.png&quot; alt=&quot;Instance C G1 duration&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similar picture to Instance B, but it’s hidden by the sheer number of points
(this is a longer period here, 1 month).  Those same occasional Full GC
outliers are present!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Key stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.93%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 127 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 235 (1.56%)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor/Full GC average time: 56 ms / 3.97 sec&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 34.06 MB/s &amp;amp; 286 kb/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall fairly similar to Instance B: ~100 ms GC cycles, all the minor GC
cycles are very fast.  Object promotion rates sound similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Remember those random long pauses?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s find out what caused them and how to get rid of them.  Instance B had 11
super-long pause outliers.  Let’s get some more detail, by opening GC Logs in
&lt;a href=&quot;https://github.com/chewiebug/GCViewer&quot;&gt;GCViewer&lt;/a&gt;.
This tool gives a tremendous amount of information.  Too much, in fact —  I
prefer to use
&lt;a href=&quot;http://gceasy.io/&quot;&gt;GCEasy.io&lt;/a&gt;
except where needed.  Since GC logs do not contain compromising information
(unlike heap dumps or some stack traces), web apps are a great tool for
analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyB-g1-highlighted.png&quot; alt=&quot;Instance B Jenkins G1 causes&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What we care about are at the Full GC times in the middle (highlighted).  See
how much longer they are vs. the young and concurrent GC cycles up top (2
seconds or less)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, I lied a bit earlier - sorry!  For concurrent garbage collectors, there
are actually 3 modes: young GC, concurrent GC, and full GC.  Concurrent GC
replaces the Full GC mode in Parallel GC with a faster concurrent operation
that runs in parallel with the application.  But in a few cases, we are
forced to fall back to a non-concurrent Full GC operation, which will use the
serial  (single-threaded) garbage collector.  That means that even if we have
30+ CPU cores, only one is working. This is what is happening here, and on a
large-heap, multicore system it is S  L  O  W.  How slow?  280 MB/s vs. 12487
MB/s for Instance B (for instance C, the difference is also about 50:1).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What triggers a full GC instead of concurrent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explicit calls to &lt;code&gt;System.gc()&lt;/code&gt;  (most common culprit, often tricky to trace down)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metadata GC Threshold: Metaspace (used for Class data mostly) has hit the
defined size to force garbage collection or increase it.  Documentation is
terrible for this,
&lt;a href=&quot;http://stackoverflow.com/questions/25251388/what-is-the-metadata-gc-threshold-and-how-do-i-tune-it&quot;&gt;Stack Overflow&lt;/a&gt;
will be your friend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrent mode failure: concurrent GC can’t complete fast enough to keep up
with objects the application is creating (there are JVM arguments to trigger
concurrent GC earlier)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;How do we fix this?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For explicit GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-XX:+DisableExplicitGC&lt;/code&gt; will turn off Full GC triggered by &lt;code&gt;System.gc()&lt;/code&gt;.  Often set in production, but the below option is safer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can trigger a concurrent GC in place of a full one with &lt;code&gt;-XX:+ExplicitGCInvokesConcurrent&lt;/code&gt; - this will take the explicit call as a hint to do deeper cleanup, but with less performance cost.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Gotcha for people who’ve used CMS:&lt;/strong&gt; if you have used CMS in the past, you
may have used the option &lt;code&gt;-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses&lt;/code&gt; — which does what it says.  This option will silently fail in G1, meaning you
still see the very long pauses from Full GC cycles as if it wasn’t set (no
warning is generated).  I have logged a JVM bug for this issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Metadata GC threshold:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Increase your initial metaspace to the final amount to avoid resizing. For example: &lt;code&gt;-XX:MetaspaceSize=500M&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instance C also suffered the same problem with explicit GC calls, with almost
all our outliers accounted for (230 out of 235) by slow, nonconcurrent Full GC
cycles (all from explicit &lt;code&gt;System.gc()&lt;/code&gt; calls, since they tuned metaspace):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyC-g1-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 GC causes&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what GC pause durations look like if we remove the log entries for the
explicit &lt;code&gt;System.gc()&lt;/code&gt; calls, assuming that they’ll blend in with the other
concurrent GC pauses (not 100% accurate, but a good approximation):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Instance B:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyB-g1-explicitremoved.png&quot; alt=&quot;Instance B Jenkins GC duration - G1 - no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The few long Full GC cycles at the start are from metaspace expansion — they
can be removed by increasing initial Metaspace size, as noted above. The
spikes?  That’s when we’re about to resize the Java heap, and memory pressure
is high.  &lt;strong&gt;You can avoid this by setting the minimum/initial heap to at least
half of the maximum, to limit resizing.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 98.93%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 111 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor &amp;amp; Full or concurrent GC average time: 122 ms / 25 ms (yes, faster than minor!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 132.07 MB/s &amp;amp; 522 kB/s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Instance C:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-duration-CompanyC-g1-ExplicitRemoved.png&quot; alt=&quot;Instance C Jenkins G1 - no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Stats:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Throughput: 99.97%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Average GC time: 56 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC cycles over 2 seconds: 0 (!!!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor &amp;amp; Full or concurrent GC average time: 56 ms &amp;amp; 10 ms (yes, faster than minor!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object creation &amp;amp; promotion rate: 33.31 MB/s &amp;amp; 286 kB/s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Side point: GCViewer is claiming GC performance of 128 GB/s (not unreasonable, we clear ~10 GB of young generation in under 100 ms usually)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Okay, so we’ve tamed the long worst-case pauses!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;but-what-about-those-long-minor-gc-pauses-we-saw&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#but-what-about-those-long-minor-gc-pauses-we-saw&quot;&gt;&lt;/a&gt;But What About Those Long Minor GC Pauses We Saw?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, now we’re in the home stretch!  We’ve tamed the old-generation GC pauses
with concurrent collection, but what about those longer young-generation
pauses?  Lets look at stats for the different phases and causes again in
GCViewer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyB-g1-NOEXPLICIT-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 causes -no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Highlighted in yellow we see the culprit: the remark phase of G1 garbage
collection. This stop-the-world phase ensures we’ve identified all live
objects, and process references (
&lt;a href=&quot;https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All&quot;&gt;more info&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s look at a sample execution to get more info:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;2016-09-07T15:28:33.104+0000: 26230.652: [GC remark 26230.652: [GC ref-proc, 1.7204585 secs], 1.7440552 secs]

 [Times: user=1.78 sys=0.03, real=1.75 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This turns out to be typical for the GC log: the longest pauses are spent in
reference processing. This is not surprising because Jenkins internally uses
references heavily for caching, especially weak references, and the default
reference processing algorithm is single-threaded.  Note that user (CPU) time
matches real time, and it would be higher if we were using multiple cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we add the GC flag &lt;code&gt;-XX:+ParallelRefProcEnabled&lt;/code&gt; which enables us to use the multiple cores more effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Tuning young-generation GC further based on Instance C:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Back to GCViewer we go, to see what’s time consuming with the GC for Instance C.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-gccauses-CompanyC-g1-NOEXPLICIT-highlighted.png&quot; alt=&quot;Instance C Jenkins G1 causes -no explicit pauses&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s good, because most of the time is just sweeping out the trash
(evacuation pause).  But the 1.8 second pause looks odd.  Let’s look at the raw
GC log for the longest pause:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;2016-09-24T16:31:27.738-0700: 106414.347: [GC pause (G1 Evacuation Pause) (young), 1.8203527 secs]
[Parallel Time: 1796.4 ms, GC Workers: 8]
 [GC Worker Start (ms): Min: 106414348.2, Avg: 106414348.3, Max: 106414348.6, Diff: 0.4]
[Ext Root Scanning (ms): Min: 0.3, Avg: 1.7, Max: 5.7, Diff: 5.4, Sum: 14.0]
  [Update RS (ms): Min: 0.0, Avg: 7.0, Max: 19.6, Diff: 19.6, Sum: 55.9]
    [Processed Buffers: Min: 0, Avg: 45.1, Max: 146, Diff: 146, Sum: 361]
 [Scan RS (ms): Min: 0.2, Avg: 0.4, Max: 0.7, Diff: 0.6, Sum: 3.5]
 [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.2]
 [Object Copy (ms): Min: 1767.1, Avg: 1784.4, Max: 1792.6, Diff: 25.5, Sum: 14275.2]
 [Termination (ms): Min: 0.3, Avg: 2.4, Max: 3.5, Diff: 3.2, Sum: 19.3]
    [Termination Attempts: Min: 11, Avg: 142.5, Max: 294, Diff: 283, Sum: 1140]
 [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.3, Sum: 0.8]
 [GC Worker Total (ms): Min: 1795.9, Avg: 1796.1, Max: 1796.2, Diff: 0.3, Sum: 14368.9]
 [GC Worker End (ms): Min: 106416144.4, Avg: 106416144.5, Max: 106416144.5, Diff: 0.1]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;…​oh, well dang. Almost the entire time (1.792 s out of 1.820) is walking
through the live objects and copying them.  And wait, what about this line,
showing the summary statistics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;Eden: 13.0G(13.0G)-&amp;gt;0.0B(288.0M) Survivors: 1000.0M-&amp;gt;936.0M Heap: 20.6G(24.0G)-&amp;gt;7965.2M(24.0G)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good grief, we flushed out 13 GB (!!!) of freshly-allocated garbage in one
swoop and compacted the leftovers!  No wonder it was so slow.  I wonder how we
accumulated so much…​&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/gc-tuning/s-younggen-CompanyC-g1-ExplicitRemoved.png&quot; alt=&quot;Instance C Jenkins G1-ExplictGC removed&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oh, right…​ we set up for 24 GB of heap initially, and each minor GC clears
most of the young generation.  Okay, so we’ve set aside tons of space for trash
to collect, which means longer but less frequent GC periods.  This also gets
the best performance from Jenkins memory caches which are using WeakReferences
(survives until collected by GC) and SoftReferences (more long-lived). Those
caches boost performance a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could take actions to prevent those rare longer pauses. The best ways are to
limit total heap size or reduce the value of &lt;code&gt;-XX:MaxGCPauseMillis=200&lt;/code&gt; from
its default (200).  A more advanced way (if those don’t help enough) is to
explicitly set the maximum size of the young generation smaller (say
&lt;code&gt;-XX:G1MaxNewSizePercent=45&lt;/code&gt; instead of the default of 60).  We could also
throw more CPUs at the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But if we look up, most pauses are around 100 ms (200 ms is the default value
for MaxGCPauseMillis).  For Jenkins on this hardware, this appears to work
&lt;strong&gt;just fine&lt;/strong&gt; and a rare longer pause is OK as long as they don’t get too
big.  Also remember, if this happens often, G1 GC will try to autotune for
lower pauses and more predictable performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a-few-final-settings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a-few-final-settings&quot;&gt;&lt;/a&gt;A Few Final Settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We mentioned StringDeduplication was on with Instance C, what is the impact?
This only triggers on Strings that have survived a few generations (most of our
garbage does not), has limits on the CPU time it can use, and replaces
duplicate references to their immutable backing character arrays.
&lt;a href=&quot;http://java-performance.info/java-string-deduplication/&quot;&gt;For more info, look here&lt;/a&gt;.
So, we should be trading a little CPU time for improved memory efficiently
(similarly to string interning).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the beginning, this has a huge impact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[GC concurrent-string-deduplication, 375.3K-&amp;gt;222.5K(152.8K), avg 63.0%, 0.0     024966 secs]
[GC concurrent-string-deduplication, 4178.8K-&amp;gt;965.5K(3213.2K), avg 65.3%, 0     .0272168 secs]
[GC concurrent-string-deduplication, 36.1M-&amp;gt;9702.6K(26.6M), avg 70.3%, 0.09     65196 secs]
[GC concurrent-string-deduplication, 4895.2K-&amp;gt;394.9K(4500.3K), avg 71.9%, 0     .0114704 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This peaks at an average of about ~90%:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After running for a month, less of an impact - many of the strings that can be
deduplicated already are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code&gt;[GC concurrent-string-deduplication, 138.7K-&amp;gt;39.3K(99.4K), avg 68.2%, 0.0007080 secs]
[GC concurrent-string-deduplication, 27.3M-&amp;gt;21.5M(5945.1K), avg 68.1%, 0.0554714 secs]
[GC concurrent-string-deduplication, 304.0K-&amp;gt;48.5K(255.5K), avg 68.1%, 0.0021169 secs]
[GC concurrent-string-deduplication, 748.9K-&amp;gt;407.3K(341.7K), avg 68.1%, 0.0026401 secs]
[GC concurrent-string-deduplication, 3756.7K-&amp;gt;663.1K(3093.6K), avg 68.1%, 0.0270676 secs]
[GC concurrent-string-deduplication, 974.3K-&amp;gt;17.0K(957.3K), avg 68.1%, 0.0121952 secs]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However it’s cheap to use: in average, each dedup cycle takes 8.8 ms and
removes 2.4 kB of duplicates.  The median takes 1.33 ms and removes 17.66 kB
from the old generation.  A small change per cycle, but in aggregate it adds up
quickly — in periods of heavy load, this can save hundreds of megabytes of
data. But that’s still small, relative to multi-GB heaps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Conclusion: turn string deduplication on&lt;/strong&gt; string deduplication is fairly
cheap to use, and reduces the steady-state memory needed for Jenkins.  That
frees up more room for the young generation, and should overall reduce GC time
by removing duplicate objects.  I think it’s worth turning on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Soft reference flushing:&lt;/strong&gt; Jenkins uses soft references for caching build
records and in pipeline FlowNodes.  The only guarantee for these is that they
will be removed instead of causing an OutOfMemoryError…​ however Java
applications can slow to a crawl from memory pressure long before that happens.
There’s an option that provides a hint to the JVM based on time &amp;amp; free memory,
controlled by &lt;code&gt;-XX:SoftRefLRUPolicyMSPerMB&lt;/code&gt; (default 1000).  The SoftReferences
become eligible for garbage collection after this many milliseconds have
elapsed since last touch…​ per MB of unused heap (vs the maximum).  The
referenced objects don’t count towards that target.  So, with 10 GB of heap
free and the default 1000 ms setting, soft references stick around for ~2.8
hours (!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the system is continuously allocating more soft references, it may trigger
heavy GC activity, rather than clearing out soft references. See the open bug
&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-6912889&quot;&gt;JDK-6912889&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Jenkins consumes excessive old generation memory, it &lt;strong&gt;may&lt;/strong&gt; help to make soft
references easier to flush  by reducing -XX:SoftRefLRUPolicyMSPerMB from its
default (1000) to something smaller (say 10-200).  The catch is that
SoftReferences are often used for objects that are relatively expensive to
load, such lazy-loaded build records and pipeline FlowNode data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;caveats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#caveats&quot;&gt;&lt;/a&gt;Caveats&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 vs. CMS:&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;G1 was available on later releases of JRE 7, but unstable and slow.&lt;/strong&gt;  If you
use it you absolutely must be using JRE 8, and the later the release the better
(it’s gotten a lot of patches).  Googling around will show horrible G1 vs CMS
benchmarks from around 2014: these are probably best ignored, since the G1
implementation was still immature then. There’s probably a niche for CMS use
still, especially on midsized heaps (1-3 GB) or where settings are already
tuned.  With appropriate tuning it &lt;strong&gt;can&lt;/strong&gt; still perform generally well for
Jenkins (which mostly generates short-lived garbage), but CMS eventually suffer
from heap fragmentation and need a slow, non-concurrent Full GC to clear this.
It also needs considerably more tuning than G1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;General GC tuning caveats&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No single setting is perfect for everybody.  We avoid tweaking settings that we
don’t have strong evidence for here, but there are of course many additional
settings to tweak.  One shouldn’t change them without evidence though, because
it can cause unexpected side effects.  The GC logs we enabled earlier will
collect this evidence.  The only setting that jumps out as a likely candidate
for further tuning is G1 region size (too small and there are many humungous
object allocations, which hurt performance).  Running on smaller systems,
I’ve seen evidence that regions shouldn’t be smaller than 4 MB because
there are 1-2 MB objects allocated somewhat regularly — but it’s not
enough to make solid guidance without more data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-should-i-do-before-tuning-jenkins-gc&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-should-i-do-before-tuning-jenkins-gc&quot;&gt;&lt;/a&gt;What Should I Do Before Tuning Jenkins GC:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’ve seen
&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;Stephen Connolly’s excellent Jenkins World talk&lt;/a&gt;,
you know that most Jenkins instances can and should get by with 4 GB or less of
allocated heap, even up to very large sizes.  You will want to turn on GC
logging (suggested above) and look at stats over a few weeks (remember
&lt;a href=&quot;http://gceasy.io/&quot;&gt;GCeasy.io&lt;/a&gt;).
If you’re not seeing periodic longer pause times, you’re probably okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this post we assume we’ve already done the basic performance work for Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Jenkins is running on fast, SSD-backed storage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve set up build rotation for your Jobs, to delete old builds so they don’t pile up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The weather column is already disabled for folders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All builds/deploys are running on build agents (formerly slaves), not on the master. If the master has executors allocated, they are exclusively used for backup tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve verified that Jenkins really does need the large heap size and can’t easily be split into separate masters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If not, we need to do that FIRST before looking at GC tuning, because those will have larger impacts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;&lt;/a&gt;Conclusions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve gone from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Average 350 ms pauses (bad user experience) including less frequent 2+ second generation pauses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To an average pause of ~50 ms, with almost all under 250 ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced total memory footprint from String deduplication&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Use Garbage First (G1) garbage collection, which performs generally very well for Jenkins.  Usually there’s enough spare CPU time to enable concurrent running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure explicit &lt;code&gt;System.gc()&lt;/code&gt; and metaspace resizing do not trigger a Full GC because this can trigger a very long pause&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Turn on parallel reference processing for Jenkins to use all CPU cores fully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use String deduplication, which generates a tidy win for Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable GC logging, which can then be used for the next level of tuning and diagnostics, if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There’s still a little unpredictability, but using appropriate settings gives a
&lt;strong&gt;much&lt;/strong&gt; more stable, responsive CI/CD server…​ even up to 20 GB heap sizes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;further-reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-reading&quot;&gt;&lt;/a&gt;Further Reading:&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://product.hubspot.com/blog/g1gc-fundamentals-lessons-from-taming-garbage-collection&quot;&gt;G1GC fundamentals&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://mechanical-sympathy.blogspot.com/2013/07/java-garbage-collection-distilled.html&quot;&gt;MechanicalSympathy: Garbage Collection Distilled&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html&quot;&gt;Oracle Garbage First Garbage Collector Tuning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;one-additional-thing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#one-additional-thing&quot;&gt;&lt;/a&gt;One additional thing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve added &lt;code&gt;-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=20&lt;/code&gt; to our
options above.  This is covering a complex and usually infrequent case where G1
self-tuning can trigger bad performance for Jenkins — but that’s material for
another post…​&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/16/security-updates-addressing-zero-day/</id>
<title>Security updates addressing zero day vulnerability</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/16/security-updates-addressing-zero-day/" />
<author>
<name>daniel-beck</name>
</author>
<category term="core"></category>
<category term="security"></category>
<summary>
A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last
week
we provided an immediate mitigation
and today we are releasing updates to Jenkins which fix the vulnerability. We
strongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as
soon as possible.


Today&#8217;s
security advisory
contains more information on the exploit, affected versions, and fixed
versions, but in short:




An unauthenticated remote code execution vulnerability allowed attackers to
transfer a serialized Java object to the Jenkins CLI, making Jenkins connect to
an attacker-controlled LDAP server, which in turn can send a serialized payload
leading to code execution, bypassing existing protection mechanisms.




Moving forward, the Jenkins security team is...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A zero-day vulnerability in Jenkins was published on Friday, November 11.  Last
week
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli&quot;&gt;we provided an immediate mitigation&lt;/a&gt;
and today we are releasing updates to Jenkins which fix the vulnerability. We
strongly recommend you update Jenkins to 2.32 (main line) or 2.19.3 (LTS) as
soon as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today’s
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2016-11-16&quot;&gt;security advisory&lt;/a&gt;
contains more information on the exploit, affected versions, and fixed
versions, but in short:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An unauthenticated remote code execution vulnerability allowed attackers to
transfer a serialized Java object to the Jenkins CLI, making Jenkins connect to
an attacker-controlled LDAP server, which in turn can send a serialized payload
leading to code execution, bypassing existing protection mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moving forward, the Jenkins security team is revisiting the design of the
Jenkins CLI over the coming weeks to prevent this class of vulnerability in the
future. If you are interested in participating in that discussion, please join
in on the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-dev&quot;&gt;jenkinsci-dev@&lt;/a&gt;
mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project encourages administrators to subscribe to the
&lt;a href=&quot;https://groups.google.com/forum/#!forum/jenkinsci-advisories&quot;&gt;jenkinsci-advisories@&lt;/a&gt;
mailing list to receive future Jenkins security notifications.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/13/november-jenkins-events/</id>
<title>Upcoming November Jenkins Events</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-13T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/13/november-jenkins-events/" />
<author>
<name>alyssat</name>
</author>
<category term="events"></category>
<category term="jam"></category>
<summary>
November is packed full of meetups and events. If you are in any of the areas
below please stop by to say "Hi" and talk Jenkins over beer.


North America



November 15 | SF JAM: Let’s Talk CI/CD and DevOps with ClusterHQ and Jenkins


November 15 | DC JAM: Jenkins and Fannie Mae


November 30 | Albuquerque JAM: Learn About Blue Ocean


November 30 | Guadalajara JAM: Jenkins Install and Setup





Europe



November 10 | Amsterdam JAM: Jenkins and Docker - Multiple Uses for Containers and Jenkins


November 10 | Milano JAM: Meet and Greet





Australia



November 15 | Melbourne JAM: Blue Ocean - A New User Experience





Asia



November 17 | Singapore...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/jams/guadalahara.jpg&quot; alt=&quot;Guadalahara JAM&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;November is packed full of meetups and events. If you are in any of the areas
below please stop by to say &quot;Hi&quot; and talk Jenkins over beer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;north-america&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#north-america&quot;&gt;&lt;/a&gt;North America&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 15 | SF JAM: &lt;a href=&quot;http://www.meetup.com/San-Francisco-Jenkins-Area-Meetup/events/235423503/&quot;&gt;Let’s Talk CI/CD and DevOps with ClusterHQ and Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 15 | DC JAM: &lt;a href=&quot;http://www.meetup.com/Washington-DC-Jenkins-Area-Meetup/events/235329896/&quot;&gt;Jenkins and Fannie Mae&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 30 | Albuquerque JAM: &lt;a href=&quot;http://www.meetup.com/Albuquerque-Jenkins-Area-Meetup/events/234807265/&quot;&gt;Learn About Blue Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 30 | Guadalajara JAM: &lt;a href=&quot;http://www.meetup.com/Guadalajara-Jenkins-Area-Meetup/events/234929834/&quot;&gt;Jenkins Install and Setup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;europe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#europe&quot;&gt;&lt;/a&gt;Europe&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 10 | Amsterdam JAM: &lt;a href=&quot;http://www.meetup.com/Amsterdam-Jenkins-Area-Meetup/events/234471476/&quot;&gt;Jenkins and Docker - Multiple Uses for Containers and Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;November 10 | Milano JAM: &lt;a href=&quot;http://www.meetup.com/Milano-Jenkins-Area-Meetup/events/235320492/&quot;&gt;Meet and Greet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;australia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#australia&quot;&gt;&lt;/a&gt;Australia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 15 | Melbourne JAM: &lt;a href=&quot;http://www.meetup.com/Melbourne-Jenkins-Area-Meetup/events/235070768/&quot;&gt;Blue Ocean - A New User Experience&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;asia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#asia&quot;&gt;&lt;/a&gt;Asia&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;November 17 | Singapore JAM: &lt;a href=&quot;http://www.meetup.com/Jenkins-User-Group-Singapore/events/235128133/&quot;&gt;CI Using Source Code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speak or sponsor at a JAM. Contact us at &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/</id>
<title>Addressing recently disclosed vulnerabilities in the Jenkins CLI</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-12T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/12/addressing-remote-vulnerabilities-in-cli/" />
<author>
<name>rtyler</name>
</author>
<category term="security"></category>
<category term="lts"></category>
<summary>
The Jenkins
security team
has been made aware of a new attack vector for a remote code execution
vulnerability in the
Jenkins CLI,
according to
this
advisory
by Daniel Beck:




We have received a report of a possible unauthenticated remote code execution
vulnerability in Jenkins (all versions).


We strongly advise anyone running a Jenkins instance on a public network
disable the CLI for now.


As this uses the same attack vector as SECURITY-218, you can reuse the script
and instructions published in this repository: https://github.com/jenkinsci-cert/SECURITY-218




We have since been able to confirm the vulnerability and strongly recommend
that everyone follow the instructions in the linked repository.


As Daniel mentions in the security advisory, the advised mitigation strategy...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/security&quot;&gt;security team&lt;/a&gt;
has been made aware of a new attack vector for a remote code execution
vulnerability in the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+CLI&quot;&gt;Jenkins CLI&lt;/a&gt;,
according to
&lt;a href=&quot;https://groups.google.com/forum/#!msg/jenkinsci-advisories/-fc-w9tNEJE/GRvEzWoJBgAJ&quot;&gt;this
advisory&lt;/a&gt;
by Daniel Beck:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have received a report of a possible unauthenticated remote code execution
vulnerability in Jenkins (all versions).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We strongly advise anyone running a Jenkins instance on a public network
disable the CLI for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As this uses the same attack vector as SECURITY-218, you can reuse the script
and instructions published in this repository: &lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218&quot; class=&quot;bare&quot;&gt;https://github.com/jenkinsci-cert/SECURITY-218&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have since been able to confirm the vulnerability and strongly recommend
that everyone follow the instructions in the linked repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Daniel mentions in the security advisory, the advised mitigation strategy is
to disable the CLI subsystem via
&lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218/blob/master/cli-shutdown.groovy&quot;&gt;this
Groovy script&lt;/a&gt;.
If you are a Jenkins administrator, navigate to the &lt;em&gt;Manage Jenkins&lt;/em&gt; page and
click on the &lt;em&gt;Script Console&lt;/em&gt;, which will allow you to run the Groovy script to
immediately disable the CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to persist this change across restarts of your Jenkins master, place
&lt;a href=&quot;https://github.com/jenkinsci-cert/SECURITY-218/blob/master/cli-shutdown.groovy&quot;&gt;the
Groovy script&lt;/a&gt;
in &lt;code&gt;$JENKINS_HOME/init.groovy.d/cli-shutdown.groovy&lt;/code&gt; so that Jenkins executes
the script on each boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are expecting to have a fix implemented, tested and included in an updated
weekly and LTS release this upcoming &lt;strong&gt;Wednesday, November 16th&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For users who are operating Jenkins on public, or otherwise hostile, networks,
we suggest hosting Jenkins behind reverse proxies such as Apache or Nginx.
These can help provide an additional layer of security, when used appropriately,
to cordon off certain URLs such as &lt;code&gt;/cli&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we strongly recommend that &lt;strong&gt;all&lt;/strong&gt; Jenkins administrators subscribe
to the
&lt;a href=&quot;mailto:jenkinsci-advisories+subscribe@googlegroups.com&quot;&gt;jenkinsci-advisories@googlegroups.com&lt;/a&gt;
mailing list to receive future advisories.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins project has a responsible disclosure policy, which we strongly
encourage anybody who believes they have discovered a potential vulnerability
to follow. You can learn more about this policy and our processes on our
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/security&quot;&gt;security page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/11/11/monthly-jam-recap-october/</id>
<title>Monthly JAM Recap - October 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-11-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/11/11/monthly-jam-recap-october/" />
<author>
<name>alyssat</name>
</author>
<category term="event"></category>
<category term="JAM"></category>
<category term="meetup"></category>
<summary>
October has proven to be a busy month within the Jenkins Area Meetup groups.
Below is a recap of topics discussed at various JAMS in the month of October.


Dallas Forth Worth, Texas (DFW) JAM

James Dumay
took time out of his vacation to present Blue Ocean, a project that rethinks
the user experience of Jenkins, modeling and presenting the process of software
delivery by surfacing information that is important to development teams with
as few clicks as possible, while still staying true to the extensibility that
Jenkins always has had as a core value.


See recording HERE.



San Francisco, CA JAM

Andrey Falko from Salesforce shared how he and his...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;October has proven to be a busy month within the Jenkins Area Meetup groups.
Below is a recap of topics discussed at various JAMS in the month of October.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dallas-forth-worth-texas-dfw-jam&quot;&gt;&lt;/a&gt;Dallas Forth Worth, Texas (DFW) JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt;
took time out of his vacation to present Blue Ocean, a project that rethinks
the user experience of Jenkins, modeling and presenting the process of software
delivery by surfacing information that is important to development teams with
as few clicks as possible, while still staying true to the extensibility that
Jenkins always has had as a core value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See recording &lt;a href=&quot;https://www.youtube.com/watch?v=ZdRYnuwouI4&quot;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;san-francisco-ca-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#san-francisco-ca-jam&quot;&gt;&lt;/a&gt;San Francisco, CA JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Andrey Falko from Salesforce shared how he and his Diagnostics team used
Jenkins to deliver software securely and reliably to production within
Salesforce.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See videos &lt;a href=&quot;https://www.youtube.com/watch?v=kSnR-B-3EuY&quot;&gt;HERE&lt;/a&gt; and
&lt;a href=&quot;https://www.youtube.com/watch?v=_e71fw7eeQU&quot;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.37.08%20PM.png&quot; alt=&quot;Salesforce&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;boulder-co-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#boulder-co-jam&quot;&gt;&lt;/a&gt;Boulder, CO JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a meetup with CA Technologies and included
&lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite&lt;/a&gt;, maintainer of the Jenkins git plugin
and a director at CA Technologies in Fort Collins.
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;Tyler&lt;/a&gt; did a great presentation about Jenkins
Pipeline and Blue Ocean and showed off how the community is using Blue Ocean to
build Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;barcelona-spain-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#barcelona-spain-jam&quot;&gt;&lt;/a&gt;Barcelona, Spain JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this meetup, there were plenty of engaging discussions surrounding the
Jenkins Certification and DevOps 2.1 Toolkit: Continuous Deployment with
Jenkins and Docker Swarm.  Guillem Sola shared his Jenkins certification
experience &lt;a href=&quot;https://www.youtube.com/watch?v=fJgG-ZC_vwE&quot;&gt;HERE&lt;/a&gt; while Viktor
Farcic presented his thoughts on the aspects of building, testing, deploying,
and monitoring services inside Docker Swarm clusters and Jenkins
&lt;a href=&quot;https://www.youtube.com/watch?v=fs1ED_y5mUc&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=fs1ED_y5mUc&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.24.35%20PM.png&quot; alt=&quot;Viktor Farcic&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.24.51%20PM.png&quot; alt=&quot;Guillem Sola&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.42.44%20PM.png&quot; alt=&quot;Barcelona JAM&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lima-peru-jam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lima-peru-jam&quot;&gt;&lt;/a&gt;Lima, Peru JAM&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/Screen%20Shot%202016-11-08%20at%204.27.57%20PM.png&quot; alt=&quot;Lima JAM&quot; width=&quot;350&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;October’s meetup was a joint effort with collaboration from Perú JUG, and
Docker Lima. The first talk was an Introduction to
&lt;a href=&quot;https://github.com/mario21ic/DockerJava&quot;&gt;Docker Ecosystem&lt;/a&gt;, second was
&lt;a href=&quot;https://github.com/eddumelendez/javaee7-docker-gradle&quot;&gt;Building and Testing Apps with Docker&lt;/a&gt; and
&lt;a href=&quot;https://github.com/eddumelendez/arquillian-cube-maven-demos&quot;&gt;Arquillian Cube&lt;/a&gt;
and the last one was
&lt;a href=&quot;https://github.com/jenkinsperu/javaee8-mvc#using-jenkins&quot;&gt;CI/CD using Docker and Jenkins Pipelines&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We had a full house at the meetup. Now, everyone in the room has a Mr. Jenkins
branded on their laptop :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/mario21ic&quot;&gt;Mario Inga&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/hdanniel&quot;&gt;Héctor Paz&lt;/a&gt; for their collaborations during the
last meetups.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;Start a JAM&lt;/a&gt; in your city if there isn’t one already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Area+Meetup&quot;&gt;JAM member&lt;/a&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become an &lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;online JAM member&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be a JAM speaker or sponsor. Let us know &lt;a href=&quot;mailto:jenkinsci-jam@googlegroups.com&quot;&gt;jenkinsci-jam@googlegroups.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Become a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Beginners+Guide+to+Contributing&quot;&gt;Jenkins project contributor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/31/xunit-reporting/</id>
<title>xUnit and Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-10-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/31/xunit-reporting/" />
<author>
<name>lnewman</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="xunit"></category>
<category term="nightwatch"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





The
JUnit plugin
is the go-to test result reporter for many Jenkins projects,
but the it is not the only one available.  The
xUnit plugin
is a viable alternative that supports JUnit and many other test result file formats.


Introduction

No matter the project, you need to gather and report test results.
JUnit is one of the most widely supported formats for recording test results.
For a scenarios where your tests are stable and your framework can produce JUnit output,
this makes the JUnit plugin ideal for reporting results in Jenkins.
It will consume results from a specified file or...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&quot;&gt;JUnit plugin&lt;/a&gt;
is the go-to test result reporter for many Jenkins projects,
but the it is not the only one available.  The
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;
is a viable alternative that supports JUnit and many other test result file formats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No matter the project, you need to gather and report test results.
JUnit is one of the most widely supported formats for recording test results.
For a scenarios where your tests are stable and your framework can produce JUnit output,
this makes the JUnit plugin ideal for reporting results in Jenkins.
It will consume results from a specified file or path, create a report,
and if it finds test failures it will set the the job state to &quot;unstable&quot; or &quot;failed&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-7-report.png&quot; alt=&quot;Test reporting with JUnit&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also plenty of scenarios where the JUnit plugin is not enough.
If your project has some failing tests that will take some time to fix,
or if there are some flaky tests,
the JUnit plugin’s simplistic view of test failures may be difficult to work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No problem, the Jenkins plugin model lets us replace the JUnit
plugin functionality with similar
functionality from another plugin and Jenkins Pipeline lets us do this in safe
stepwise fashion where we can test and debug each of our changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will show you how to replace the JUnit plugin with the
xUnit plugin in Pipeline code to address a few common test reporting scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initial-setup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial-setup&quot;&gt;&lt;/a&gt;Initial Setup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m going to use the &quot;JS-Nightwatch.js&quot; sample project from my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/29/sauce-pipeline/&quot;&gt;previous post&lt;/a&gt; to demonstrate a couple
common scenarios that the xUnit handles better.
I already have the latest
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&quot;&gt;JUnit plugin&lt;/a&gt;
and
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;
installed on my Jenkins server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll be keeping my changes in
link:&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;my fork&lt;/a&gt;
of the &quot;JS-Nightwatch.js&quot; sample project on GitHub, under the
&quot;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/xunit&quot;&gt;blog/xunit&lt;/a&gt;&quot; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what the Jenkinsfile looked like at the end of that previous post and what
the report page looks like after a few runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    checkout scm

    &lt;span style=&quot;color:#777&quot;&gt;// Install dependencies&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {

            &lt;span style=&quot;color:#777&quot;&gt;// List of browser configs we'll be testing against.&lt;/span&gt;
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; platform_configs = [
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ].join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

            &lt;span style=&quot;color:#777&quot;&gt;// Nightwatch.js supports color ouput, so wrap this step for ansi color&lt;/span&gt;
            wrap([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AnsiColorBuildWrapper&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;colorMapName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XTerm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) {
                &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;platform_configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }

            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SauceOnDemandTestPublisher&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-7-console.png&quot; alt=&quot;JUnit plugin console output&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;switching-from-junit-to-xunit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#switching-from-junit-to-xunit&quot;&gt;&lt;/a&gt;Switching from JUnit to xUnit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by replacing JUnit with xUnit in my pipeline.
I use the Snippet Generator to create the step with the right parameters.
The main downside of using the xUnit plugin is that while it is Pipeline compatible,
it still uses the more verbose &lt;code&gt;step()&lt;/code&gt; syntax and has some very rough edges around that, too.
I’ve filed
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-37611&quot;&gt;JENKINS-37611&lt;/a&gt;
but in the meanwhile, we’ll work with what we have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// Original JUnit step&lt;/span&gt;
junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;// Equivalent xUnit step - generated (reformatted)&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;testTimeMargin&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;3000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;thresholdMode&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,
    &lt;span style=&quot;color:#606&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableNewThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;deleteOutputFiles&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;failIfNotNew&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;skipNoTestFiles&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;stopProcessingIfError&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;]]
    ])

&lt;span style=&quot;color:#777&quot;&gt;// Equivalent xUnit step - cleaned&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I replace the &lt;code&gt;junit&lt;/code&gt; step in my Jenkinsfile with that last step above,
it produces a report and job result identical to the JUnit plugin but using the xUnit plugin.  Easy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {

            &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

            &lt;span style=&quot;color:#777&quot;&gt;// junit 'reports/**'&lt;/span&gt;
            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;unstableThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
                &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])

            &lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-8-summary.png&quot; alt=&quot;Test reporting with xUnit&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-8-console.png&quot; alt=&quot;xUnit plugin console output&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;accept-a-baseline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#accept-a-baseline&quot;&gt;&lt;/a&gt;Accept a Baseline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most projects don’t start off with automated tests passing or even running.
They start with a people hacking and prototyping, and eventually they start to write tests.
As new tests are written, having tests checked-in, running, and failing can be valuable information.
With the xUnit plugin we can accept a baseline of failed cases and drive that number down over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by changing the Jenkinsfile to fail jobs only if the number of failures is greater than an expected baseline,
in this case four failures. When I run the job with this change, the reported numbers remain the same, but the job passes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;4&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-9-summary.png&quot; alt=&quot;Accept a baseline of failing tests.&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, I can also check that the plugin reports the job as failed if more failures occur.
Since this is sample code, I’ll do this by adding another failing test and checking the job
reports as failed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - D&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            &lt;span style=&quot;color:#777&quot;&gt;//.assert.title('I am a page title - Sauce Labs');&lt;/span&gt;
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs - Cause a Failure&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-10-summary.png&quot; alt=&quot;All tests pass!&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a real project, we’d make fixes over a number of commits bringing the number of failures down and adjusting our baseline.
Since this is a sample, I’ll just make all tests pass and set the job failure threshold for failed and skipped cases to zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - D&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig_1.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 1 - A&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
    },

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-12-summary.png&quot; alt=&quot;All tests pass!&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;allow-for-flakiness&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#allow-for-flakiness&quot;&gt;&lt;/a&gt;Allow for Flakiness&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We’ve all known the frustration of having one flaky test that fails once every ten jobs.
You want to keep it active so you can working isolating the source of the problem,
but you also don’t want to destablize your CI pipeline or reject commits that are actually okay.
You could move the test to a separate job that runs the &quot;flaky&quot; tests,
but in my experience that just leads to a job that is always in a failed state
and a pile of flaky tests no one looks at.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the xUnit plugin, we can keep the this flaky test in main test suite but allow
the our job to still pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll start by adding a sample flaky test.  After a few runs, we can see the test
fails intermittently and causes the job to fail too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPigFlaky.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// New test file: tests/guineaPigFlaky.js&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; https = require(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; SauceLabs = require(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;saucelabs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);

module.exports = {

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;@tags&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;guineaPig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Flaky Assert Title 0&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; expectedTitle = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I am a page title - Sauce Labs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
        &lt;span style=&quot;color:#777&quot;&gt;// Fail every fifth minute&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (Math.floor(Date.now() / (&lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt; * &lt;span style=&quot;color:#00D&quot;&gt;60&lt;/span&gt;)) % &lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt; === &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;) {
            expectedTitle += &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; - Cause failure&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
        }

        client
            .url(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https://saucelabs.com/test/guinea-pig&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
            .waitForElementVisible(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;body&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;)
            .assert.title(expectedTitle);
    }

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) {
        client.customSauceEnd();

        setTimeout(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
            done();
        }, &lt;span style=&quot;color:#00D&quot;&gt;1000&lt;/span&gt;);

    }

};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-17-summary.png&quot; alt=&quot;The pain of flaky tests failing the build&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can almost hear my teammates screaming in frustration just looking at this report.
To allow specific tests to be unstable but not others,
I’m going to add a guard &quot;suite completed&quot; test to the suites that should be stable,
and keep flaky test on it’s own.
Then I’ll tell xUnit to allow for a number of failed tests, but no skipped ones.
If any test fails other than the ones I allow to be flaky,
it will also result in one or more skipped tests and will fail the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// The rest of the Jenkinsfile is unchanged.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only the xUnit step() call is modified.&lt;/span&gt;
step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XUnitBuilder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
    &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;thresholds&lt;/span&gt;: [
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SkippedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
        &lt;span style=&quot;color:#777&quot;&gt;// Allow for a significant number of failures&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// Keeping this threshold so that overwhelming failures are guaranteed&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;//     to still fail the build&lt;/span&gt;
        [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FailedThreshold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;failureThreshold&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]],
    &lt;span style=&quot;color:#606&quot;&gt;tools&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitType&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;pattern&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 0 - E&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 0 - Suite Completed&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
      &lt;span style=&quot;color:#777&quot;&gt;// No assertion needed&lt;/span&gt;
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;tests/guineaPig_1.js&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;

    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Guinea Pig Assert Title 1 - E&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; },

    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;span&gt;Guinea Pig Assert Title 1 - Suite Completed&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client) {
      &lt;span style=&quot;color:#777&quot;&gt;// No assertion needed&lt;/span&gt;
    },

    &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;afterEach&lt;/span&gt;: &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(client, done) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }

&lt;span style=&quot;color:#777&quot;&gt;// ... snip ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After a few more runs, you can see the flaky test is still being flaky,
but it is no longer failing the build.  Meanwhile, if another test fails,
it will cause the &quot;suite completed&quot; test to be skipped, failing the job.
If this were a real project, the test owner could instrument and eventually fix
the test.  When they were confident they had stabilized the test the could add
a &quot;suite completed&quot; test after it to enforce it passing without changes to other
tests or framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-19-summary.png&quot; alt=&quot;Flaky tests don&amp;apos;t have to fail the build&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-10-27/job-18-report.png&quot; alt=&quot;Results from flaky test&quot; width=&quot;800&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post has shown how to migrate from the JUnit plugin to the
xUnit plugin on an existing project in Jenkins pipeline.  It also covered how to
use the features of xUnit plugin to get more meaningful and effective Jenkins
reporting behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I didn’t show was how many other formats xUnit supports - from CCPUnit to MSTest.  You can
also write your own XSL for result formats not on the known/supported list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin&quot;&gt;xUnit plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;bitwiseman/JS-Nightwatch.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saucelabs-sample-test-frameworks&quot;&gt;saucelabs-sample-test-frameworks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/18/jenkins-world-2016-videos/</id>
<title>Jenkins World 2016 Session Videos</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-10-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/18/jenkins-world-2016-videos/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





The videos of the sessions from
Jenkins World 2016 are up!


I&#8217;ve updated the wrap-up posts with links to each of the sessions mentioned:




Jenkins Pipeline


Scaling Jenkins


Ask the Experts &amp; Demos




You can also find video from all the sessions
here.  Enjoy!...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The videos of the sessions from
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2016&lt;/a&gt; are up!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve updated the wrap-up posts with links to each of the sessions mentioned:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;Scaling Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/&quot;&gt;Ask the Experts &amp;amp; Demos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also find video from all the sessions
&lt;a href=&quot;https://www.cloudbees.com/juc/agenda&quot;&gt;here&lt;/a&gt;.  Enjoy!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/10/16/stage-lock-milestone/</id>
<title>Controlling the Flow with Stage, Lock, and Milestone</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-10-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/10/16/stage-lock-milestone/" />
<author>
<name>hrmpw</name>
</author>
<category term="pipeline"></category>
<category term="newfeatures"></category>
<summary>
This is a guest post by Patrick Wolf,
Director of Product Management at CloudBees.





Recently the Pipeline team began making several changes to improve the stage step and increase control of concurrent builds in Pipeline. Until now the stage step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.


In order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed stage step.




stage - the stage...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/hrmpw&quot;&gt;Patrick Wolf&lt;/a&gt;,
Director of Product Management at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently the Pipeline team began making several changes to improve the &lt;code&gt;stage&lt;/code&gt; step and increase control of concurrent builds in Pipeline. Until now the &lt;code&gt;stage&lt;/code&gt; step has been the catch-all for functionality related to the flow of builds through the Pipeline: grouping build steps into visualized stages, limiting concurrent builds, and discarding stale builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to improve upon each of these areas independently we decided to break this functionality into discrete steps rather than push more and more features into an already packed &lt;code&gt;stage&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Stage+Step+Plugin&quot;&gt;stage&lt;/a&gt; - the &lt;code&gt;stage&lt;/code&gt; step remains but is now focused on grouping steps and providing boundaries for Pipeline segments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Lockable+Resources+Plugin&quot;&gt;lock&lt;/a&gt; - the &lt;code&gt;lock&lt;/code&gt; step throttles the number of concurrent builds in a defined section of the Pipeline.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Milestone+Step+Plugin&quot;&gt;milestone&lt;/a&gt; - the &lt;code&gt;milestone&lt;/code&gt; step automatically discards builds that will finish out of order and become stale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separating these concerns into explicit, independent steps allows for much greater control of Pipelines and broadens the set of possible use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;stage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stage&quot;&gt;&lt;/a&gt;Stage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;stage&lt;/code&gt; step is a primary building block in Pipeline, dividing the steps of a Pipeline into explicit units and helping to visualize the progress using the &quot;Stage View&quot; plugin or &lt;a href=&quot;https://jenkins.io/projects/blueocean/&quot;&gt;Blue Ocean&lt;/a&gt;. Beginning with version 2.2 of &quot;Pipeline Stage Step&quot; plugin, the &lt;code&gt;stage&lt;/code&gt; step now requires a block argument, wrapping all steps within the defined stage. This makes the boundaries of where each &lt;code&gt;stage&lt;/code&gt; begins and ends obvious and predictable. In addition, the concurrency argument of &lt;code&gt;stage&lt;/code&gt; has now been removed to make this step more concise; responsibility for concurrency control has been delegated to the &lt;code&gt;lock&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  doSomething()
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;$&lt;/span&gt;PATH&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Omitting the block from &lt;code&gt;stage&lt;/code&gt; and using the concurrency argument are now deprecated in Pipeline. Pipelines using this syntax will continue to function but will produce a warning in the console log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;nowrap&quot;&gt;Using the 'stage' step without a block argument is deprecated&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This message is only a reminder to update your Pipeline scripts; none of your Pipelines will stop working. If we reach a point where the old syntax is to be removed we will make an announcement prior to the change. We do, however, recommend that you update your existing Pipelines to utilize the new syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; Stage View and Blue Ocean will both work with either the old &lt;code&gt;stage&lt;/code&gt; syntax or the new.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lock&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lock&quot;&gt;&lt;/a&gt;Lock&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than attempt to limit the number of concurrent builds of a job using the &lt;code&gt;stage&lt;/code&gt;, we now rely on the &quot;Lockable Resources&quot; plugin and the &lt;code&gt;lock&lt;/code&gt; step to control this. The &lt;code&gt;lock&lt;/code&gt; step limits concurrency to a single build and it provides much greater flexibility in designating where the concurrency is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lock&lt;/code&gt; can be used to constrain an entire &lt;code&gt;stage&lt;/code&gt; or just a segment:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  doSomething()
  lock(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;locked build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lock&lt;/code&gt; can be also used to wrap multiple stages into a single concurrency unit:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;lock(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
  stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Testing&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;milestone&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#milestone&quot;&gt;&lt;/a&gt;Milestone&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;milestone&lt;/code&gt; step is the last piece of the puzzle to replace functionality originally intended for &lt;code&gt;stage&lt;/code&gt; and adds even more control for handling concurrent builds of a job. The &lt;code&gt;lock&lt;/code&gt; step limits the number of builds running concurrently in a section of your Pipeline while the &lt;code&gt;milestone&lt;/code&gt; step ensures that older builds of a job will not overwrite a newer build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concurrent builds of the same job do not always run at the same rate. Depending on the network, the node used, compilation times, test times, etc. it is always possible for a newer build to complete faster than an older build. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build 1 is triggered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build 2 is triggered&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build 2 builds faster than Build 1 and enters the Test stage sooner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than allowing Build 1 to continue and possibly overwrite the newer artifact produced in Build 2, you can use the &lt;code&gt;milestone&lt;/code&gt; step to abort Build 1:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  milestone()
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  milestone()
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Testing&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using the &lt;code&gt;input&lt;/code&gt; step or the &lt;code&gt;lock&lt;/code&gt; step a backlog of concurrent builds can easily stack up, either waiting for user input or waiting for a resource to become free. The &lt;code&gt;milestone&lt;/code&gt; step will automatically prune all older jobs that are waiting at these junctions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;milestone()
input &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Proceed?&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
milestone()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bookending an &lt;code&gt;input&lt;/code&gt; step like this allows you to select a specific build to proceed and automatically abort all antecedent builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;milestone()
lock(&lt;span style=&quot;color:#606&quot;&gt;resource&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;inversePrecedence&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;) {
  echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;locked step&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  milestone()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly a pair of &lt;code&gt;milestone&lt;/code&gt; steps used with a &lt;code&gt;lock&lt;/code&gt; will discard all old builds waiting for a shared resource. In this example, &lt;code&gt;inversePrecedence: true&lt;/code&gt; instructs the &lt;code&gt;lock&lt;/code&gt; to begin most recent waiting build first, ensuring that the most recent code takes precedence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;putting-it-all-together&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#putting-it-all-together&quot;&gt;&lt;/a&gt;Putting it all together&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of these steps can be used independently of the others to control one aspect of a Pipeline or they can be combined to provide powerful, fine-grained control of every aspect of multiple concurrent builds flowing through a Pipeline. Here is a very simple example utilizing all three:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  &lt;span style=&quot;color:#777&quot;&gt;// The first milestone step starts tracking concurrent build order&lt;/span&gt;
  milestone()
  node {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Building&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}

&lt;span style=&quot;color:#777&quot;&gt;// This locked resource contains both Test stages as a single concurrency Unit.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Only 1 concurrent build is allowed to utilize the test resources at a time.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// Newer builds are pulled off the queue first. When a build reaches the&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// milestone at the end of the lock, all jobs started prior to the current&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// build that are still waiting for the lock will be aborted&lt;/span&gt;
lock(&lt;span style=&quot;color:#606&quot;&gt;resource&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myResource&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;inversePrecedence&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;){
  node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Unit Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Unit Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;System Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;System Tests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
  milestone()
}

&lt;span style=&quot;color:#777&quot;&gt;// The Deploy stage does not limit concurrency but requires manual input&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// from a user. Several builds might reach this step waiting for input.&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// When a user promotes a specific build all preceding builds are aborted,&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;// ensuring that the latest code is always deployed.&lt;/span&gt;
stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  input &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy?&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  milestone()
  node {
    echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploying&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a more complete and complex example utilizing all these steps in a Pipeline check out the  &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/blob/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo/repo/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt; provided with the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/tree/8a69bb4506d270c4a1fc58580519a0bcac1b8bce/demo&quot;&gt;Docker image for demonstrating Pipeline&lt;/a&gt;. This is a working demo that can be quickly set up and run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/</id>
<title>Jenkins World 2016, That's a Wrap!</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/30/jenkins-world-2016-wrap-up-complete/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








This year&#8217;s Jenkins World conference
was a huge milestone for the Jenkins project - the first global event for the Jenkins community.
It brought users and contributors together to exchange ideas on the current state
of the project, celebrate accomplishments of the past year, and look ahead at all the exiting enhancements
coming down the pipe(line).


Contributor Summit

To kick off Jenkins World, we had a full day "Contributor Summit".
Jenkins is a distributed project with contributors from all over the globe.
Conferences like this are perfect time to get contributors together face-to-face,
to talk through current issues and...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/jenkins-world-banner-pic.jpg&quot; alt=&quot;Jenkins World 2016&quot; height=&quot;200&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; conference
was a huge milestone for the Jenkins project - the first global event for the Jenkins community.
It brought users and contributors together to exchange ideas on the current state
of the project, celebrate accomplishments of the past year, and look ahead at all the exiting enhancements
coming down the pipe(line).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contributor-summit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-summit&quot;&gt;&lt;/a&gt;Contributor Summit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To kick off Jenkins World, we had a full day &quot;Contributor Summit&quot;.
Jenkins is a distributed project with contributors from all over the globe.
Conferences like this are perfect time to get contributors together face-to-face,
to talk through current issues and upcoming plans for the the project.
Some key topics discussed during this summit were:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt; - In the past year, the Jenkins project has moved new domain name,
a statically generated website, and has entered a
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/18/announcing-azure-partnership.adoc&quot;&gt;partnership with Microsoft&lt;/a&gt;
to host to host infrastructure on Azure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt; - A year ago, there were five
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam/&quot;&gt;Jenkins Area Meetups&lt;/a&gt;, today there are 37 around the
world, with ~7000 members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; - Daniel Beck has done a great job a &quot;Security Officer&quot; for the project over the last year.
Jenkins 2 includes tighter security out of the box, 9 security alerts have been addressed, and the
&lt;a href=&quot;https://jenkins.io/security/&quot;&gt;Security Team&lt;/a&gt; is continuing to evaluate threats as they are reported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline&lt;/strong&gt; - Pipeline has been a success and there many improvements on the way, including better
Pipeline Library support, a UI-based Pipeline Editor, and Declarative Pipeline syntax.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blue Ocean&lt;/strong&gt; - Blue Ocean announced their &quot;1.0 Beta&quot; release and discussed their roadmap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage Pluggability&lt;/strong&gt; - One of the big upcoming goals is reducing Jenkins'
dependence on local file system storage on the server system
(job configuration, build logs, etc.).  There was extensive
discussion of how to accomplish this goal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/contributors.jpg&quot; alt=&quot;Contributors Summit&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keynote-the-state-of-jenkins-2016&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keynote-the-state-of-jenkins-2016&quot;&gt;&lt;/a&gt;Keynote: The State of Jenkins 2016&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next day,
&lt;a href=&quot;https://github.com/kohsuke&quot;&gt;Kohsuke&lt;/a&gt; gave a great
&lt;a href=&quot;https://www.cloudbees.com/jenkins-community-keynote&quot;&gt;keynote&lt;/a&gt;,
showing how far the project as come this year and where it is headed.
You can get the slides
&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_world_keynote.pdf&quot;&gt;here&lt;/a&gt;
or see the full video below.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NXjeHeIYRRI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s Next?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, Jenkins World was a very enjoyable event. I’m sure everyone came away having
learned a lot and made many new connections.  I know I’m excited to see
what the coming year brings for Jenkins and the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t forget that there are many ways to continue
to build connections to the rest of the Jenkins community throughout the year, such as the
&lt;a href=&quot;http://www.meetup.com/Jenkins-online-meetup/&quot;&gt;Jenkins Online Meetup&lt;/a&gt; which
hosts online events year-round.  Or, see if there is a
&lt;a href=&quot;http://www.meetup.com/pro/jenkins/&quot;&gt;Jenkins Area Meetup (JAM)&lt;/a&gt; near you.  If
there isn’t, take a look at the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam/&quot;&gt;Jenkins Area Meetup page&lt;/a&gt; to see about starting one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks, and I hope to see you all and Jenkins World 2017!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/mural-end.jpg&quot; alt=&quot;CommitStrip Mural&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/</id>
<title>Jenkins World 2016 Wrap-up - Ask the Experts &amp; Demos</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/29/jenkins-world-2016-wrap-up-experts-demos/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








As I mentioned in my
previous post,
Jenkins World brought together
Jenkins users from organizations of all sizes.  It also brought together Jenkins
users of all skill levels; from beginners to experts (including to JAM
organizers, board members, and long time contributors).  A number
of those experts also volunteered to staff the Open Source Hub&#8217;s
"Ask the Experts" desk throughout the conference to answer Jenkins questions.
This included, but was not limited to:
Paul Allen,
R Tyler Croy,
James Dumay,
Jesse Glick,
Eddú Meléndez Gonzales,
Jon Hermansen,
Owen Mehegan,
Oleg Nenashev,
Liam Newman,
Christopher Orr,
Casey Vega,
Mark Waite,
Dean Yu,
and
Keith Zantow.





I actually chose to spend the majority of...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I mentioned in my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/&quot;&gt;previous post&lt;/a&gt;,
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; brought together
Jenkins users from organizations of all sizes.  It also brought together Jenkins
users of all skill levels; from beginners to experts (including to &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;JAM&lt;/a&gt;
organizers, board members, and long time contributors).  A number
of those experts also volunteered to staff the Open Source Hub’s
&quot;Ask the Experts&quot; desk throughout the conference to answer Jenkins questions.
This included, but was not limited to:
&lt;a href=&quot;https://github.com/p4paul&quot;&gt;Paul Allen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;,
&lt;a href=&quot;https://github.com/i386&quot;&gt;James Dumay&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;,
&lt;a href=&quot;https://github.com/eddumelendez&quot;&gt;Eddú Meléndez Gonzales&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt;,
&lt;a href=&quot;https://github.com/omehegan&quot;&gt;Owen Mehegan&lt;/a&gt;,
&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;,
&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt;,
&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt;,
&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt;,
&lt;a href=&quot;https://github.com/dty&quot;&gt;Dean Yu&lt;/a&gt;,
and
&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-0.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I actually chose to spend the majority of my time at the booth. It was
fantastic to hear all the different ways people are using
Jenkins and wanting use Jenkins to do even more. I answered dozens of questions
on both days of the conference, often learning new things in the process of answering them.
And for questions that were beyond any one person’s knowledge, there was such a
breadth of expertise, very few questions were beyond our combined abilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-2.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While &quot;Ask the Experts&quot; saw a lot traffic, the Open Source Hub’s lunch-time demos drew
really big crowds. They covered wide range of subjects in a quick succession and offered people
a chance to be introduced to new areas of in Jenkins without spending a whole session on them.
Some demos were only presented at lunch while others were abbreviated versions of
longer talks presented at other times during the conference.  Here’s the full list with related links:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/demo-crowd.jpg&quot; alt=&quot;Demo Crowd&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt; gave a live demo of
&lt;strong&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; in Action&lt;/strong&gt; on their
&lt;a href=&quot;https://ci.blueocean.io/blue&quot;&gt;live Jenkins instance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt; presented a lightning version of his talk
&lt;a href=&quot;https://www.cloudbees.com/continuous-build-and-delivery-pipelines-android&quot;&gt;&lt;strong&gt;Pipelines for building and deploying Android apps&lt;/strong&gt;&lt;/a&gt;
(&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-continuous_build_delivery_pip.pdf&quot;&gt;Slides&lt;/a&gt;)
(&lt;a href=&quot;https://youtu.be/Gn3ygjUMKUY&quot;&gt;video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt; showed a different way to
manage security with the
&lt;strong&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Ownership+Plugin&quot;&gt;Ownership plugin&lt;/a&gt; for Jenkins&lt;/strong&gt;
(&lt;a href=&quot;https://speakerdeck.com/onenashev/jw2016-ownership-plugin-demo&quot;&gt;Slides&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alex Somai&lt;/a&gt; presented his
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC) 2016&lt;/a&gt; project, the
&lt;strong&gt;External Workspace Manager plugin for Jenkins Pipeline&lt;/strong&gt; (&lt;a href=&quot;https://youtu.be/lo8sZJt2WhM?t=6m58s&quot;&gt;GSOC Video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt; discussed
&lt;strong&gt;Git plugin - large repos, submodule authentication and more&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/large-git-repos.pdf&quot;&gt;Slides&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt; gave a live demo of
&lt;strong&gt;Notifications with Jenkins Pipeline&lt;/strong&gt;
(based on &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/&quot;&gt;this blog post&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt; talked about
&lt;strong&gt;Extending Pipeline with Libraries&lt;/strong&gt; using the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Shared+Groovy+Libraries+Plugin&quot;&gt;Pipeline Shared Groovy Libraries Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt; demonstrated some cool ways to use
&lt;strong&gt;Multibranch Pipelines + Git symbolic-ref&lt;/strong&gt; to optimize build times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt; showed the power of
&lt;strong&gt;Docker and Pipeline&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/jenkins-and-docker.pdf&quot;&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt; also showed how easy it can be to migrate from
&lt;strong&gt;Freestyle to Pipeline&lt;/strong&gt;
(&lt;a href=&quot;https://rtyler.github.io/jenkins.io/files/2016/jenkins-world/freestyle-to-pipelines.pdf&quot;&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt; gave a live demo,
&lt;strong&gt;&lt;code&gt;package.json&lt;/code&gt; and Jenkins&lt;/strong&gt;, on using &lt;code&gt;package.json&lt;/code&gt; to control all aspects of Jenkins builds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt; presented at lightning version of his talk,
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;&lt;strong&gt;A simpler way to define Jenkins Pipelines&lt;/strong&gt;&lt;/a&gt;
(&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-introducing_a_new_way_to_define_jenkins_pipelines_1.pdf&quot;&gt;Slides&lt;/a&gt;)
(&lt;a href=&quot;TODO&quot;&gt;Video&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-3.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thank you to everyone who staffed the booth and gave demos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, thanks to everyone who attended the demos and came by to ask questions.
If you have more questions, you don’t have to wait until next year’s Jenkins World.
Join the
&lt;a href=&quot;https://jenkins.io/content/mailing-lists/&quot;&gt;jenkinsci-users&lt;/a&gt; mailing list or the
&lt;a href=&quot;https://jenkins.io/content/chat/&quot;&gt;#jenkins IRC channel&lt;/a&gt; to
get help from experts around the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, a special thanks to the Jenkins Events officer, &lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa Tong&lt;/a&gt;,
for getting the entire booth designed, prepared, and keeping everything
on track before, during, and after the conference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/experts-4.jpg&quot; alt=&quot;Ask the Experts&quot; width=&quot;480&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/</id>
<title>Jenkins World 2016 Wrap-up - Scaling</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-27T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/27/jenkins-world-2016-wrap-up-scaling/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








One of the great features of Jenkins is how far it
can scale, not only from a software perspective, but also from an
organizational one.  From a single Jenkins master with one or two agents to a
multiple master with thousands of agents, from a team of only a few people
to a whole company with multiple disparate departments and organizations,
you&#8217;ll find space where Jenkins is used.


Like any software or organization,
there are common challenges for increasing scale with Jenkins and some common best practices, but
there are also some unique solutions.  A big...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the great features of Jenkins is how far it
can scale, not only from a software perspective, but also from an
organizational one.  From a single Jenkins master with one or two agents to a
multiple master with thousands of agents, from a team of only a few people
to a whole company with multiple disparate departments and organizations,
you’ll find space where Jenkins is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like any software or organization,
there are common challenges for increasing scale with Jenkins and some common best practices, but
there are also some unique solutions.  A big conference like
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; brings users
from all scales together to see how people in other organizations at similar or
greater scale are solving similar problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a recap of the some of the sessions on scaling Jenkins,
with links to slides and videos shared by &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/159px-National_Public_Radio_logo.svg.png&quot; alt=&quot;159px National Public Radio logo.svg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/milespj&quot;&gt;Paul Miles&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/jgrantd&quot;&gt;Grant Dickie&lt;/a&gt; of
&lt;a href=&quot;https://www.npr.org/&quot;&gt;NPR&lt;/a&gt; talked about
&lt;a href=&quot;https://www.cloudbees.com/jenkinsops-initiative-streamline-and-automate-jenkins&quot;&gt;&lt;strong&gt;JenkinsOps: An Initiative to Streamline and Automate Jenkins&lt;/strong&gt;&lt;/a&gt;.
They shared ways their team has used Jenkins to automate many of the
administrative tasks related to managing feature code branches,
handling deployments, running tests, and properly configuring their environments.
They also showed code samples and talked about future challenges in their quest
to achieve
&lt;a href=&quot;https://puppet.com/blog/continuous-delivery-vs-continuous-deployment-what-s-diff&quot;&gt;continuous deployment&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkinsops_at_npr_-_final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/qrAf5fjDTXI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/Riot_Games_logo.png&quot; alt=&quot;Riot Games logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/maxfields&quot;&gt;Maxfield F Stewart&lt;/a&gt; of
&lt;a href=&quot;http://www.riotgames.com&quot;&gt;Riot Games&lt;/a&gt; showed how they built an
integrated Docker solution using Jenkins in
&lt;a href=&quot;https://www.cloudbees.com/thinking-inside-container-continuous-delivery-story&quot;&gt;&lt;strong&gt;Thinking Inside the Container: A Continuous Delivery Story&lt;/strong&gt;&lt;/a&gt;
He showed how their system allows engineers around the company to
submit Docker images as build environments.
This has let their containerized farm now create over 10,000 containers per week
and handles nearly 1,000 jobs at a rate of about 100 jobs per hour.
And they have done this using readily available, open
source Jenkins plugins. He also talked about how they settled on this design,
lessons learned, best practices, and how to build and scale other similar system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-thinking_inside_the_container-_a_continuous_delivery_story.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/mMvFaEP5mP0&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;Red Hat&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;,
presented by
&lt;a href=&quot;https://github.com/jstrachan&quot;&gt;James Strachan&lt;/a&gt; of
&lt;a href=&quot;https://www.redhat.com&quot;&gt;Red Hat&lt;/a&gt;, showed how to use Jenkins Pipeline with
Docker and Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system using open source software for both microservices
and monolithic applications. He demonstrated how to
create or import projects, and have them automatically build, run
system and integration tests, stage, and finally deploy. He also showed to
manage and update those deployed applications using continuous
delivery practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins-at-redhat-final-final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/173353537&quot;&gt;&lt;strong&gt;Watch the Video Demo from the Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/carlossg&quot;&gt;Carlos Sanchez&lt;/a&gt; of
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; discussed
&lt;a href=&quot;https://www.cloudbees.com/scaling-jenkins-docker-swarm-kubernetes-or-mesos&quot;&gt;&lt;strong&gt;Scaling Jenkins with Docker: Swarm, Kubernetes or Mesos?&lt;/strong&gt;&lt;/a&gt;
He compared various Docker Swarm, Apache Mesos, and Kubernetes in terms of their
ability to dynamically scale in Jenkins by running jobs inside containers.
He also discussed the pros and cons, best practices, level of Jenkins support for each
of these technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-scaling_jenkins_with_docker_swarm_kubernetes_or_mesos_.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/24X18e4GVbk&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stephenc&quot;&gt;Stephen Connolly&lt;/a&gt; of
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; asked
&quot;&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;&lt;strong&gt;So, You Want to Build the World’s Biggest Jenkins Cluster?&lt;/strong&gt;&lt;/a&gt;&quot;
and explained how to do so.  He started with
real world results realized by Jenkins users who have built large clusters.
Next, he showed experiments around scaling some individual sub-components of Jenkins in
isolation to see what challenges have been faced when integrated. Finally,
he arrived at recipes for building Jenkins clusters with different scaling capabilities and
making existing Jenkins clusters more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-soyouwanttobuildtheworldslargestjenkinscluster_final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/eGA8UuijgA4&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/splunk-logo-300x100.gif&quot; alt=&quot;splunk logo 300x100&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/bill-houston-4909412&quot;&gt;Bill Houston&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/aliraza82&quot;&gt;Ali Raza&lt;/a&gt; of
&lt;a href=&quot;https://www.splunk.com/&quot;&gt;Splunk&lt;/a&gt;
gave a talk in two parts,
&lt;a href=&quot;https://www.cloudbees.com/jenkins-splunk-and-splunking-jenkins&quot;&gt;&lt;strong&gt;Jenkins at Splunk and Splunking Jenkins&lt;/strong&gt;&lt;/a&gt;
In the first part, Bill showed how Splunk uses Jenkins to implement their end-to-end CI system.
They discussed features and design goals, challenges they encountered, and how they addressed
these challenges.
In the second part, Ali showed how to use the Jenkins Splunk plugin.  Using plugin, he gathered
test results and Jenkins environment data, and delivered it to a Splunk indexer for analysis and presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_at_splunk.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/dlsEprySOrg&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/272px-Google_2015_logo.svg.png&quot; alt=&quot;272px Google 2015 logo.svg&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/david-hoover-4265245&quot;&gt;David Hoover&lt;/a&gt; of
&lt;a href=&quot;https://www.google.com/about/&quot;&gt;Google&lt;/a&gt; talked about
&lt;a href=&quot;https://www.cloudbees.com/jenkins-inside-google&quot;&gt;&lt;strong&gt;Jenkins inside Google&lt;/strong&gt;&lt;/a&gt;.
Last year, they
&lt;a href=&quot;https://www.cloudbees.com/jenkins/juc-2015/abstracts/us-west/02-01-1600&quot;&gt;presented&lt;/a&gt;
their initial investigations and stress testing as they
prepared to deploy a large-scale Jenkins installation at Google. Now, with a
year of real-world use under their belts, they returned to present on how their
expectations held up, what new issues they encountered, how they have addressed those issues, and
the challenges and opportunities they see ahead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins_inside_google.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/7ERV9C20GSE&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/</id>
<title>Jenkins World 2016 Wrap-up - Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/24/jenkins-world-2016-wrap-up-pipeline/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








As someone who has managed Jenkins for years and manually managed jobs, I think
pipeline is fantastic. I spent much of the conference manning the
Ask the Experts desk of the
"Open Source Hub" and was glad to find I was not alone in that sentiment.
The questions were not "Why should I use Pipeline?", but "How do I do this in Pipeline?"


Everyone was interested in showing what they have been able to accomplish,
learning about best practices, and seeing what new features were on the horizon.
The sessions and demos on Pipeline that
I saw were...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at CloudBees.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As someone who has managed Jenkins for years and manually managed jobs, I think
pipeline is fantastic. I spent much of the conference manning the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/&quot;&gt;Ask the Experts&lt;/a&gt; desk of the
&quot;Open Source Hub&quot; and was glad to find I was not alone in that sentiment.
The questions were not &quot;Why should I use Pipeline?&quot;, but &quot;How do I do this in Pipeline?&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everyone was interested in showing what they have been able to accomplish,
learning about best practices, and seeing what new features were on the horizon.
The sessions and &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/30/ask-experts-demos/&quot;&gt;demos&lt;/a&gt; on Pipeline that
I saw were all well attended, but no one could have seen all of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a recap of the some of the sessions on Jenkins Pipeline,
with links to slides and videos shared by &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt; discussed the past, present, and future of Jenkins Pipeline in
&lt;a href=&quot;https://www.cloudbees.com/directions-pipeline&quot;&gt;&lt;strong&gt;Directions for Pipeline&lt;/strong&gt;&lt;/a&gt;.
He reviewed a broad range of improvements made to Pipeline over the last year, including
syntax, documentation, plugin support, and stability.  He reviewed the changes
currently underway.  He also pointed out that many of the improvements have been
driven by user feedback and invited everyone to continue to participate in making
pipeline even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-directions_for_pipeline.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/51fndpAWpYQ&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/nextsource_logo.jpg&quot; alt=&quot;Nextsource&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In
&lt;a href=&quot;https://www.cloudbees.com/pipelining-devops-jenkins-and-aws&quot;&gt;&lt;strong&gt;Pipelining DevOps with Jenkins and AWS&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://www.linkedin.com/in/iamjimmyray&quot;&gt;Jimmy Ray&lt;/a&gt;
of
&lt;a href=&quot;http://www.nextsource.com/&quot;&gt;nextSource&lt;/a&gt; showed how Pipeline can be used to automate CI/CD build processes,
and how to integrate Jenkins and Pipeline with AWS.
He also discussed some admin-level considerations,
such as how to install Jenkins on EC2
and the merits of &quot;LTS&quot; and &quot;latest build&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-pipelining_devops_with_jenkins_and_aws.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/vP8sNGGIEGY&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/android-pipeline.png&quot; alt=&quot;Continuous Build and Delivery Pipelines for Android&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt; examined how to create
&quot;&lt;a href=&quot;https://www.cloudbees.com/continuous-build-and-delivery-pipelines-android&quot;&gt;&lt;strong&gt;Continuous Build and Delivery Pipelines for Android&lt;/strong&gt;&lt;/a&gt;&quot;
applications.
He showed how to set up Android-capable build agents, ensure traceable application releases,
reporting warnings, run various types of tests, and deploy and app to Google Play.
This included live demonstrations and discussion of best practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-continuous_build_delivery_pip.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/Gn3ygjUMKUY&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/declarative-pipeline.png&quot; alt=&quot;A New Way to Define Jenkins Pipelines&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt; presented
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;&lt;strong&gt;A New Way to Define Jenkins Pipelines&lt;/strong&gt;&lt;/a&gt;.
He showed the next evolution for Pipeline, based on a simpler declarative model.
This declarative syntax for Pipeline still supports the creation of complex pipelines,
including complete build environments, post-build actions, and notifications, while
also being easier to understand. This declarative syntax also makes in it easier to
implement other interesting scenarios such as early validation of pipelines and
a visual pipeline editor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-introducing_a_new_way_to_define_jenkins_pipelines_1.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/ALvg4KK25JU&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/perforce.png&quot; alt=&quot;Perforce&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In
&lt;a href=&quot;https://www.cloudbees.com/birds-feather-session-perfecting-your-development-tools-updates-helix-plugin-jenkins&quot;&gt;&lt;strong&gt;Perfecting Your Development Tools: Updates to the Helix Plugin for Jenkins&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://github.com/p4paul&quot;&gt;Paul Allen&lt;/a&gt; of
&lt;a href=&quot;https://www.perforce.com/&quot;&gt;Perforce&lt;/a&gt; walked through using Perforce’s &quot;Monorepo&quot; model with Jenkins Pipeline.
He explained in detail how to work with the Perforce
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/P4+Plugin&quot;&gt;P4&lt;/a&gt; in Jenkins,
including credential passing and workspace management.
Of particular interest was his side-by-side comparison the various actions done with the Jenkins UI vs Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-an_introduction_to_the_p4_plugin_and_update_on_the_latest_features.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/faster-pipelines-code.png&quot; alt=&quot;Building Pipelines To Be Faster&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/svanoort&quot;&gt;Sam Van Oort&lt;/a&gt;
demonstrated strategies for faster pipelines in
&lt;a href=&quot;https://www.cloudbees.com/need-speed-building-pipelines-be-faster&quot;&gt;&lt;strong&gt;The Need For Speed: Building Pipelines To Be Faster&lt;/strong&gt;&lt;/a&gt;.
He discussed various elements that contribute to making pipelines faster or slower,
such a number of resources and latency.  He then showed several best practices
for constructing pipelines that have lower turnaround times and reduced resource use.
He also reviewed plugins and tools that can help analyze and visualize pipeline
performance, including the Pipeline Stage View plugin and Blue Ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-the_need_for_speed-_building_pipelines_to_be_faster.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/7w2uFA5JPLI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rsandell&quot;&gt;Bobby Sandell&lt;/a&gt; and
&lt;a href=&quot;https://github.com/jtnord&quot;&gt;James T. Nord&lt;/a&gt; talked about what not to do with Pipeline in
&lt;a href=&quot;https://www.cloudbees.com/no-you-shouldnt-do-lessons-using-pipeline&quot;&gt;&lt;strong&gt;No, You Shouldn’t Do That! Lessons from Using Pipeline&lt;/strong&gt;&lt;/a&gt;.
They told the story of their own experiences as early adopters of
Jenkins Pipeline at CloudBees. They described a number of key scenarios they attempted
to address, detailed various mistakes and false starts, and finally share what
they learned in each case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-no_you_shouldnt_do_that_lessons_from_using_pipeline.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/lLZwTMFf9GI&quot;&gt;&lt;strong&gt;Stream Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/google-summer-of-code.png&quot; alt=&quot;Google Summer of Code&quot; width=&quot;240&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alexandru Somai&lt;/a&gt; gave a
&lt;a href=&quot;https://www.cloudbees.com/lightning-talks&quot;&gt;lightning talk&lt;/a&gt; on his
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code (GSoC) 2016&lt;/a&gt; project,
&quot;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/External+Workspace+Manager+Plugin&quot;&gt;External Workspace Manager Plugin&lt;/a&gt; for Jenkins Pipeline&quot;.
The build workspace for Jenkins projects may become very large.
Alex showed how the External Workspace Manager plugin addresses this issue,
adding support for managing and reusing the same workspace between multiple pipeline builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A recording of his presentation for GSOC is available
&lt;a href=&quot;https://youtu.be/lo8sZJt2WhM?t=6m58s&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;Red Hat&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;,
presented by
&lt;a href=&quot;https://github.com/jstrachan&quot;&gt;James Strachan&lt;/a&gt; of
&lt;a href=&quot;https://www.redhat.com&quot;&gt;Red Hat&lt;/a&gt;, showed how to use Jenkins Pipeline with
Docker and Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system using open source software for both microservices
and monolithic applications. He demonstrated how to
create or import projects, and have them automatically build, run
system and integration tests, stage, and finally deploy. He also showed to
manage and update those deployed applications using continuous
delivery practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/sites/default/files/2016-jenkins-world-jenkins-at-redhat-final-final.pdf&quot;&gt;&lt;strong&gt;Download Presentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/173353537&quot;&gt;&lt;strong&gt;Stream Demo Video&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/21/jenkins-world-2016-wrap-up/</id>
<title>Jenkins World 2016 Wrap-up - Introduction</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/21/jenkins-world-2016-wrap-up/" />
<author>
<name>lnewman</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.








That&#8217;s a Wrap!

Any way you look at it, last week&#8217;s Jenkins World Conference 2016 was a huge success.


In 2011, a few hundred users gathered in San Francisco for the first "Jenkins User Conference".
Over successive years, this grew into several yearly regional Jenkins user conferences.
This year, over 1,300 people came from around the world to "Jenkins World 2016",
the first global event for the Jenkins community.





This year&#8217;s Jenkins World conference included:







Keynote presentation by Jenkins creator, Kohsuke Kawaguchi, announcing a number of great new Jenkins project features, such as "Blue Ocean".


More than 50...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 2016&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;that-s-a-wrap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#that-s-a-wrap&quot;&gt;&lt;/a&gt;That’s a Wrap!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any way you look at it, last week’s Jenkins World Conference 2016 was a huge success.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2011, a few hundred users gathered in San Francisco for the first &quot;Jenkins User Conference&quot;.
Over successive years, this grew into several yearly regional Jenkins user conferences.
This year, over 1,300 people came from around the world to &quot;Jenkins World 2016&quot;,
the first global event for the Jenkins community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/kohsuke-keynote.jpg&quot; alt=&quot;Kohsuke Kawaguchi Keynote&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year’s Jenkins World conference included:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-jenkins-world-wrap/blue-ocean-sticker.jpg&quot; alt=&quot;Stickers!&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keynote presentation by Jenkins creator, Kohsuke Kawaguchi, announcing a number of great new Jenkins project features, such as &quot;Blue Ocean&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More than 50 sessions on everything from the new &quot;Blue Ocean&quot; UI, to &quot;Continuous Security&quot; to &quot;Dockerizing Jenkins&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins Open-source Hub, with &quot;Ask the Experts&quot; and demos by 20+ Jenkins contributors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Booths from 30+ sponsors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stickers!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the next week, I’ll be posting highlights from the event,
including slides, videos, and links to other useful resources.  Stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/20/jom-plugin-development/</id>
<title>Jenkins Online Meetup report. Plugin Development - WebUI</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-20T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/20/jom-plugin-development/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="meetup"></category>
<category term="event"></category>
<summary>
On September 6th we had a Jenkins Online Meetup.
This meetup was the second event in the series of Plugin Development meet ups.
At this meetup we were talking about Jenkins Web UI development.







Talks

1) Classic Jenkins UI framework -
Daniel Beck


In the first part of his talk, Daniel presented how Stapler, the web framework used in Jenkins, works, and how you can add to the set of URLs handled by Jenkins.
In the second part he was talking about creating new views using Jelly and Groovy, and how to add new content to existing views.


Keywords:
Stapler,
Jelly,
Groovy-defined UIs


2) Developing modern Jenkins UIs with Javascript -
Tom Fennelly


Feel...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On September 6th we had a Jenkins Online Meetup.
This meetup was the &lt;strong&gt;second&lt;/strong&gt; event in the series of Plugin Development meet ups.
At this meetup we were talking about Jenkins Web UI development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/jams/OnlineMeetup/logo.png&quot; alt=&quot;logo&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;talks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#talks&quot;&gt;&lt;/a&gt;Talks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1) Classic Jenkins UI framework -
&lt;a href=&quot;https://github.com/daniel-beck/&quot;&gt;Daniel Beck&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the first part of his talk, Daniel presented how Stapler, the web framework used in Jenkins, works, and how you can add to the set of URLs handled by Jenkins.
In the second part he was talking about creating new views using Jelly and Groovy, and how to add new content to existing views.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt;
&lt;a href=&quot;http://stapler.kohsuke.org/&quot;&gt;Stapler&lt;/a&gt;,
Jelly,
Groovy-defined UIs&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2) Developing modern Jenkins UIs with Javascript -
&lt;a href=&quot;https://github.com/tfennelly&quot;&gt;Tom Fennelly&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel that Jenkins UI is a bit old? You are not alone.
In addition to the old stack Jenkins offers a framework for writing UI components in Javascript with help of Node.js.
Tom presented this new engine, which is being used in new Jenkins Web UI components like Jenkins installation wizard.
He also provided several examples from the BlueOcean project he is working on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Keywords:&lt;/strong&gt;
Node.js,
ReactJS,
&lt;a href=&quot;https://www.npmjs.com/package/jenkins-js-builder&quot;&gt;Jenkins JS Builder&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language&quot;&gt;Jenkins Design Language&lt;/a&gt;,
&lt;a href=&quot;https://jenkins.io/projects/blueocean/&quot;&gt;Blue Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/&quot;&gt;Meetup page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.meetup.com/Jenkins-online-meetup/events/233378840/&quot;&gt;Event page: Plugin Development. Web UI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plus.google.com/events/c8vnv4esvvmg1u83fhugc86meuo&quot;&gt;Webinar recording&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;want-to-conduct-a-meetup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#want-to-conduct-a-meetup&quot;&gt;&lt;/a&gt;Want to conduct a meetup?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are looking for speakers, who would be interested to share their experience about Jenkins best-practices, war stories and plugin development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested to conduct a presentation,
please contact meetup organizers using meetup.com “contact organizers” feature
or via the &lt;a href=&quot;mailto:events@lists.jenkins-ci.org&quot;&gt;events@lists.jenkins-ci.org&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/</id>
<title>Announcing the Blue Ocean beta, Declarative Pipeline and Pipeline Editor</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/19/blueocean-beta-declarative-pipeline-pipeline-editor/" />
<author>
<name>i386</name>
</author>
<category term="blueocean"></category>
<category term="ux"></category>
<category term="pipeline"></category>
<category term="jenkinsworld"></category>
<summary>
At Jenkins World on Wednesday 14th of September, the Jenkins project was happy to
introduce the beta release of Blue Ocean. Blue Ocean is the new user experience
for Jenkins, built from the ground up to take advantage of Jenkins Pipeline.
It is an entire rethink of the the way that modern developers will use Jenkins.


Blue Ocean is available today via the Jenkins Update Center for Jenkins users
running 2.7.1 and above.


Get the beta

Just search for BlueOcean beta in the Update Center, install it,
browse to the dashboard, and then click the Try BlueOcean UI button on the dashboard.



Whats included?

Back in April we open sourced...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Jenkins World on Wednesday 14th of September, the Jenkins project was happy to
introduce the beta release of Blue Ocean. Blue Ocean is the new user experience
for Jenkins, built from the ground up to take advantage of Jenkins Pipeline.
It is an entire rethink of the the way that modern developers will use Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Blue Ocean is available today via the Jenkins Update Center for Jenkins users
running 2.7.1 and above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;get-the-beta&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#get-the-beta&quot;&gt;&lt;/a&gt;Get the beta&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just search for &lt;em&gt;BlueOcean beta&lt;/em&gt; in the Update Center, install it,
browse to the dashboard, and then click the &lt;em&gt;Try BlueOcean UI&lt;/em&gt; button on the dashboard.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;whats-included&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-included&quot;&gt;&lt;/a&gt;Whats included?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/26/introducing-blue-ocean/&quot;&gt;Back in April we open sourced Blue Ocean&lt;/a&gt;
and shared our vision with the community. We’re very happy that all the things we showed you then have
shipped in the beta (software projects run &lt;strong&gt;on time&lt;/strong&gt;?!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a refresher on Blue Ocean, watch this short video:&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube-nocookie.com/embed/3dITffteCD4?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;declarative-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#declarative-pipeline&quot;&gt;&lt;/a&gt;Declarative Pipeline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have heard from the community about the usability of &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Jenkins
Pipeline&lt;/a&gt;. Much of the feedback we received was to a desire to
&lt;strong&gt;configure&lt;/strong&gt; Pipelines rather than &lt;strong&gt;script&lt;/strong&gt; them, and to make it easy for beginners
to get started with their first Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how &lt;strong&gt;Declarative Pipeline&lt;/strong&gt; was born. We’ve introduced a new method whereby
you declare how you want your Pipeline to look rather than using Pipeline Script
 - it’s configuration rather than code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a small example of a Declarative Pipeline for nodejs that runs the whole
Pipeline inside a Docker container:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pipeline {
  agent &lt;span style=&quot;color:#606&quot;&gt;docker&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node:6.3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  stages {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm --version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    stage (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Pipeline Script&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node:6.3&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).inside {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm --version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }

    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker support in Declarative Pipeline allows you to version your application code,
Jenkins Pipeline configuration, and the environment where your pipeline will run,
all in a single repository. It’s a crazy powerful combination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Declarative Pipeline introduces the &lt;code&gt;postBuild&lt;/code&gt; section that makes it
easy to run things conditionally at the end of your Pipeline without the
complexity of the &lt;code&gt;try... catch&lt;/code&gt; of Pipeline script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;pipeline-block&quot;&gt;  &lt;div class=&quot;listingblock pipeline-declarative&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Declarative Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;postBuild {
  always {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will always run&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
  success {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if successful&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
  failure {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if failed&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
  unstable {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if the run was marked as unstable&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
  changed {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if the state of the Pipeline has changed&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;For example, the Pipeline was previously failing but is now successful&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;... or the other way around :)&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;  &lt;div class=&quot;pipeline-script-expand&quot;&gt;
    &lt;a href=&quot;#&quot; onclick=&quot;javascript:$(this).parent().siblings(&amp;apos;.pipeline-script&amp;apos;).toggle(); return false;&quot;&gt;Toggle Pipeline Script&lt;/a&gt;
    &lt;em&gt;(Advanced)&lt;/em&gt;
  &lt;/div&gt;
  &lt;div class=&quot;listingblock pipeline-script&quot; style=&quot;display: none&quot;&gt;
    &lt;div class=&quot;title&quot;&gt;Jenkinsfile (Scripted Pipeline)&lt;/div&gt;
    &lt;div class=&quot;content&quot;&gt;
  &lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span style=&quot;color:#777&quot;&gt;/* .. snip .. */&lt;/span&gt;
    }
    stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      &lt;span style=&quot;color:#777&quot;&gt;/* .. snip .. */&lt;/span&gt;
    }

    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if successful&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (exc) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;UNSTABLE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if the run was marked as unstable&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
      sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will run only if failed&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
  }
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt; {
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &quot;This will always run&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And there is so much more!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have the Blue Ocean beta installed you already have Declarative Pipeline.
While Declarative Pipeline is still alpha at the moment, we do encourage you to
&lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki/getting%20started&quot;&gt;follow our getting started guide&lt;/a&gt;,
 give us feedback on the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/content/mailing-lists/&quot;&gt;Jenkins Users mailing list&lt;/a&gt;
 or file bugs &lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;against the &lt;em&gt;pipeline-model-definition&lt;/em&gt; component in JIRA&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introducing-the-pipeline-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introducing-the-pipeline-editor&quot;&gt;&lt;/a&gt;Introducing the Pipeline Editor&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline Editor is a graphical user interface that gives Jenkins users the
simplest way yet to get started with creating Pipelines in Jenkins. It will also
save a lot of time for intermediate and advanced Jenkins users as a way to author
Pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you build your Pipeline in the Editor and click the save button, the editor
will commit a new &lt;strong&gt;Jenkinsfile&lt;/strong&gt; back to your repository in the form of the new
Declarative Pipeline. When you want to edit again, Jenkins will read it from
your repository exactly how you saw it previously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Pipeline Editor is a work in progress and should arrive in a beta release soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blueocean/pipeline-editor.png&quot; alt=&quot;Personalized dashboard&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thank-you&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thank-you&quot;&gt;&lt;/a&gt;Thank you&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading our news from Jenkins World and be sure to check the blog
for regular updates!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d also like to thank our amazing community for their feedback and support
as we change the way software teams around the world use Jenkins. We couldn’t
do this without you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/09/take-the-2016-jenkins-survey-blog/</id>
<title>Take the 2016 Jenkins Survey!</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/09/take-the-2016-jenkins-survey-blog/" />
<author>
<name>bvdawson</name>
</author>
<category term="jenkins"></category>
<summary>
This is a guest post by Brian
Dawson on behalf of CloudBees, where he works as a DevOps Evangelist
responsible for developing and sharing continuous delivery and DevOps best
practices. He also serves as the CloudBees Product Marketing Manager for
Jenkins.





Once again it’s that time of year when CloudBees sponsors the
Jenkins Community Survey to
assist the community with gathering objective insights into how jenkins is
being used and what users would like to see in the Jenkins project.


Your personal information (name, email address and company) will NOT be used by CloudBees for
sales or marketing.


As an added incentive to take the survey, CloudBees will enter participants
into a...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://twitter.com/brianvdawson&quot;&gt;Brian
Dawson&lt;/a&gt; on behalf of CloudBees, where he works as a DevOps Evangelist
responsible for developing and sharing continuous delivery and DevOps best
practices. He also serves as the CloudBees Product Marketing Manager for
Jenkins.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once again it’s that time of year when CloudBees sponsors the
&lt;a href=&quot;https://www.surveymonkey.com/r/jenkins2016&quot;&gt;Jenkins Community Survey&lt;/a&gt; to
assist the community with gathering objective insights into how jenkins is
being used and what users would like to see in the Jenkins project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Your personal information (name, email address and company) will NOT be used by CloudBees for
sales or marketing.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an added incentive to take the survey, &lt;strong&gt;CloudBees will enter participants
into a drawing for a free pass to Jenkins World 2017 (1st prize) and a $100
Amazon Gift Card (2nd prize).&lt;/strong&gt; The survey will close at the end of September, so
click the link at the end of the blog post to get started!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All participants will be able to access reports summarizing survey results. If
you’re curious about what insights your input will provide, see the results of
last year’s 2015 survey:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/files/2015-Jenkins-Community-Survey-Results.pdf&quot;&gt;2015 Community Survey Results (PDF)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/files/State-of-Jenkins-Infographic-2015.pdf&quot;&gt;State of Jenkins Infographic (PDF)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your feedback helps capture a bigger picture of
community trends and needs. There are laws that govern prize giveaways and
eligibility; CloudBees has compiled all those fancy
&lt;a href=&quot;https://www.cloudbees.com/blog/2016-jenkins-community-survey&quot;&gt;terms and conditions here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please take the survey and let your voice be heard - it will take less than 10
minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.surveymonkey.com/r/jenkins2016&quot;&gt;&lt;strong&gt;Take me to the survey&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/08/continuous-delivery-of-infra/</id>
<title>Continuous Delivery of Infrastructure with Jenkins</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/08/continuous-delivery-of-infra/" />
<author>
<name>rtyler</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by Jenkins World speaker
R Tyler Croy, infrastructure maintainer for the
Jenkins project.








I don&#8217;t think I have ever met a tools, infrastructure, or operations team that
did not have a ton of work to do. The Jenkins project&#8217;s
infrastructure
"team" is no different; too much work, not enough time. In lieu of hiring more
people, which isn&#8217;t always an option, I have found heavy automation and
continuous delivery pipelines to be two solutions within reach of the
over-worked infrastructure team.


As a big believer in the concept of "Infrastructure as Code", I have been,
slowly but surely, moving the project&#8217;s infrastructure from manual tasks to
code,...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Jenkins World speaker
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;, infrastructure maintainer for the
Jenkins project.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don’t think I have ever met a tools, infrastructure, or operations team that
did not have a ton of work to do. The Jenkins project’s
&lt;a href=&quot;https://github.com/jenkins-infra&quot;&gt;infrastructure&lt;/a&gt;
&quot;team&quot; is no different; too much work, not enough time. In lieu of hiring more
people, which isn’t always an option, I have found heavy automation and
continuous delivery pipelines to be two solutions within reach of the
over-worked infrastructure team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a big believer in the concept of &quot;Infrastructure as Code&quot;, I have been,
slowly but surely, moving the project’s infrastructure from manual tasks to
code, whether implemented in our
&lt;a href=&quot;https://github.com/jenkins-infra/jenkins-infra&quot;&gt;Puppet code-base&lt;/a&gt;,
&lt;a href=&quot;https://github.com/jenkins-infra/ircbot&quot;&gt;Docker containers&lt;/a&gt;,
or even as
&lt;a href=&quot;https://github.com/jenkins-infra/azure/tree/master/machines&quot;&gt;machine specifications&lt;/a&gt;
with
&lt;a href=&quot;http://packer.io&quot;&gt;Packer&lt;/a&gt;.
The more of our infrastructure that is &lt;em&gt;code&lt;/em&gt;, the more we can apply continuous
delivery practices to consistently and reliably build, test and deliver our
infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach integrates nicely with
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt;,
allowing us to also define our continuous delivery pipelines themselves as
code. For example, by sanity-checking our BIND zone files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; dockerImage = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rtyler/jenkins-infra-builder&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    checkout scm
    docker.image(dockerImage).inside {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/usr/sbin/named-checkzone jenkins-ci.org dist/profile/files/bind/jenkins-ci.org.zone&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/usr/sbin/named-checkzone jenkins.io dist/profile/files/bind/jenkins.io.zone&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or delivering our Docker containers automatically to
&lt;a href=&quot;http://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt;
, with a &lt;code&gt;Jenkinsfile&lt;/code&gt; such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Jenkinsfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    checkout scm

    &lt;span style=&quot;color:#777&quot;&gt;/* Get our abbreviated SHA-1 to uniquely identify this build */&lt;/span&gt;
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; shortCommit = sh(&lt;span style=&quot;color:#606&quot;&gt;script&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;git rev-parse HEAD&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;returnStdout&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;).take(&lt;span style=&quot;color:#00D&quot;&gt;6&lt;/span&gt;)

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build ircbot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; {
        withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JAVA_HOME=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;tool &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+MVN=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;tool &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]) }
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;make bot&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }

    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; whale
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build container&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; {
        whale = docker.build(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jenkinsciinfra/ircbot:build&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;shortCommit&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    }

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy container&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; {
        &lt;span style=&quot;color:#777&quot;&gt;/* Push to Docker Hub */&lt;/span&gt;
        whale.push()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In
&lt;a href=&quot;https://www.cloudbees.com/continuous-delivery-infrastructure-jenkins&quot;&gt;my talk at Jenkins World&lt;/a&gt;
(September 14th, 3:00 - 3:45pm in Exhibit Hall A-1) I will discuss these
Jenkinsfiles along with some of the strategies, patterns and code used with the
Jenkins project’s
&lt;a href=&quot;https://github.com/jenkins-infra&quot;&gt;open source&lt;/a&gt;
infrastructure to get the most out of the team’s limited time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;R Tyler will be
&lt;a href=&quot;https://www.cloudbees.com/continuous-delivery-infrastructure-jenkins&quot;&gt;presenting&lt;/a&gt;
more about continous delivery of infrastructure at
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt;
in September.  Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for 20% off your full conference
pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/07/pipeline-at-jenkins-world/</id>
<title>Pipeline at Jenkins World 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/07/pipeline-at-jenkins-world/" />
<author>
<name>rtyler</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by R. Tyler Croy, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
CloudBees, Inc.









I have been heavily using Jenkins Pipeline for just about
every Jenkins-related project I have contributed to over the past year. Whether I am
building and publishing Docker
containers, testing
infrastructure code or
publishing this very web
site, I have been adding a Jenkinsfile to nearly every Git repository I
touch.


Implementing Pipeline has been rewarding, but has not been without its own
challenges. That&#8217;s why I&#8217;m excited to see lots of different Jenkins Pipeline
related content in the agenda at
Jenkins...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https;//github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been heavily using &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Jenkins Pipeline&lt;/a&gt; for just about
every Jenkins-related project I have contributed to over the past year. Whether I am
building and publishing &lt;a href=&quot;https://github.com/jenkins-infra/ircbot&quot;&gt;Docker
containers&lt;/a&gt;, &lt;a href=&quot;https://github.com/jenkins-infra/jenkins-infra&quot;&gt;testing
infrastructure code&lt;/a&gt; or
&lt;a href=&quot;https://github.com/jenkins-infra/jenkins.io&quot;&gt;publishing this very web
site&lt;/a&gt;, I have been adding a &lt;code&gt;Jenkinsfile&lt;/code&gt; to nearly every Git repository I
touch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Implementing Pipeline has been rewarding, but has not been without its own
challenges. That’s why I’m excited to see &lt;em&gt;lots&lt;/em&gt; of different Jenkins Pipeline
related content in the &lt;a href=&quot;https://www.cloudbees.com/juc/agenda&quot;&gt;agenda&lt;/a&gt; at
Jenkins World.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don’t think it’s possible for a single person to attend all of the Pipeline
talks, or the Pipeline-related &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/30/ask-experts-demos/&quot;&gt;demos&lt;/a&gt;
in the &quot;Open Source Hub&quot;, but fortunately &lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;
will be recording the sessions. If you have Pipeline-related questions unanswered by
all these presentations, feel free to join us at the &quot;Open Source Hub&quot; in the
expo hall and &lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/&quot;&gt;Ask the
Experts&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the first day of Jenkins World (September 13th), Isaac Cohen is hosting a
workshop titled
&lt;a href=&quot;https://www.cloudbees.com/let%E2%80%99s-build-jenkins-pipeline&quot;&gt;&lt;strong&gt;Let’s
Build a Jenkins Pipeline&lt;/strong&gt;&lt;/a&gt; which may be interesting to you if you haven’t yet
worked with Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/pipelining-devops-jenkins-and-aws&quot;&gt;&lt;strong&gt;Pipelining
DevOps with Jenkins and AWS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 14th 2:00 PM - 2:45 PM, Exhibit Hall A-1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/nextsource_logo.jpg&quot; alt=&quot;nextsource logo&quot; /&gt;&lt;/span&gt;
Automated workflow is a proven method for removing process variability. DevOps
pipelines are the next step in the evolution of CI/CD/DevOps. This talk covers
Jenkins pipelines, both with and without AWS integration, and explains how
Jenkins can be used to create, execute and manage pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Jimmy Ray of nextSource
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/perfecting-your-development-tools-updates-helix-plugin-jenkins&quot;&gt;&lt;strong&gt;Perfecting
Your Development Tools: Updates to the Helix Plugin for Jenkins&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 14th 5:00 PM - 6:00 PM, Exhibit Hall C&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Considering a mono repo that can manage all your source code, binary and other
assets? Join us at the Perforce Birds of a Feather Session for updates and
discussions around the Helix Plugin for Jenkins (or ‘P4 plugin’).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/perforce.png&quot; alt=&quot;perforce&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This session will look at the latest DSL PipeLine support in the ‘P4 plugin’
for Jenkins and will include a live demo. We will show you how to map your
Branches and Streams into a Jenkins Workspace, publish assets back into
Helix, and more. You may even get a sneak preview at the latest ‘P4 plugin’
for Jenkins that allows you the freedom to query and run commands from
within Jenkins directly against your Helix connection.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Paul Allen of Perforce
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/continuously-deploying-containers-jenkins-pipeline-docker-swarm-cluster&quot;&gt;&lt;strong&gt;Continuously
Deploying Containers with Jenkins Pipeline to Docker Swarm Cluster&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 14th 3:00 PM - 3:45 PM, Exhibit Hall A-3&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
Many of us have already experimented with Docker - for example, by running one
of the pre-built images from Docker Hub. It is possible that your team might
have recognized the benefits that Docker provides in building microservices and
the advantages the technology could bring to development, testing, integration
and, ultimately, production. However, you must create a comprehensive build
pipeline before deploying any containers into a live environment. Integrating
containers into a CD pipeline is far from easy. Along with the benefits Docker
brings, there are challenges both technically and process-related. This
presentation attempts to outline the steps you need to take for a
fully-automated Jenkins pipeline that continuously builds, tests and deploys
microservices into a Docker Swarm cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Viktor Farcic
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/no-you-shouldnt-do-lessons-using-pipeline&quot;&gt;&lt;strong&gt;No,
You Shouldn’t Do That! Lessons from Using Pipeline&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 10:30 AM - 11:15 AM, Exhibit Hall A-1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
Pipeline is as powerful as a loaded gun, but with skill can be as delicate as a
surgeon’s knife. This talk will give an overview of health and safety so that
you can avoid shooting yourself in the head and walk the path to medical
school. It will cover not only what not to do, but also why, and share some
solutions so you are not left high and dry. Both James and Bobby have bullet
wounds from “Champagning” pipeline to automate the test and release of several
of the CloudBees products and can occasionally still be seen walking with a
limp from shooting for the moon and hitting their feet.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Bobby Sandell and James T. Nord of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/docker-image-lifecycle-implemented-jenkins-pipeline&quot;&gt;&lt;strong&gt;Docker
Image Lifecycle Implemented with Jenkins Pipeline&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 11:30 AM - 12:15 PM, Exhibit Hall A-2&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/jfrog.png&quot; alt=&quot;jfrog&quot; /&gt;&lt;/span&gt;
While Docker has enabled an unprecedented velocity of software production, it
is all too easy to spin out of control. A promotion-based model is required to
control and track the flow of Docker images as much as it is required for a
traditional software development lifecycle. We will demonstrate how to go from
development to containerization to distribution utilizing binary management
promotion in a framework implemented on Jenkins, using the Pipeline
functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Mark Galpin
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/directions-pipeline&quot;&gt;&lt;strong&gt;Directions for Pipeline&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 11:30 AM - 12:15 PM, Exhibit Hall A-1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
The Pipeline feature has matured and is now included in Jenkins 2.0. During the
time since its release, copious user feedback has been received about missing
features and pain points. Come hear about some things we know should be worked
on - or are already in progress - and bring your suggestions.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Jesse Glick of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How
to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 2:30 PM - 3:15 PM, Great America J&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;redhat&quot; /&gt;&lt;/span&gt;
In this talk, we’ll show how to use Jenkins Pipeline together with Docker and
Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system for microservices and monolithic applications
using open source software. We’ll demonstrate how to easily create new
microservices projects or import existing projects, have them automatically
built, system and integration tested, staged and then deployed. Once deployed,
we will also see how to manage and update applications using continuous
delivery practices along with integrated ChatOps - all completely automated!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— James Strachan of Red Hat
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;&lt;strong&gt;Introducing
a New Way to Define Jenkins Pipelines&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 3:45 PM - 4:30 PM, Great America J&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
Pipeline is quickly establishing itself as the direction that Jenkins jobs are
going, enabling the definition of a complete CD pipeline in a single job;
Pipeline as Code via the “Jenkinsfile”; job durability across master restarts;
and more. I’ll be talking here about the next evolution for Pipeline: a simple,
declarative model to define your Pipelines with no need to write scripts. This
configuration syntax for Pipeline allows you to automatically configure all
stages of your pipeline, the complete build environment, post-build actions,
notifications and more. All while providing syntactic and semantic validation
before the build actually gets going.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Andrew Bayer of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/need-speed-building-pipelines-be-faster&quot;&gt;&lt;strong&gt;The
Need For Speed: Building Pipelines To Be Faster&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 4:45 PM - 5:30 PM, Exhibit Hall A-1&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
Response time is paramount for a CI/CD system. In this session, you will see
how a few best practices in constructing pipelines can yield faster turnaround
times and reduced resource use. We’ll also run through plugins and tools to
analyze and visualize performance, including the Pipeline Stage View plugin. If
time permits, we may briefly discuss some of the computer science theory behind
different aspects of performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Sam Van Oort of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/lightning-talks-0&quot;&gt;&lt;strong&gt;Continuously Delivering
Continuous Delivery Pipelines&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 4:45 PM - 5:30 PM, Exhibit Hall J&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/aquilent.png&quot; alt=&quot;aquilent&quot; /&gt;&lt;/span&gt;
Our 600-person IT organization has committed to implementing continuous
delivery practices enterprise-wide. This isn’t a single momentous event put in
place overnight. Rather, it’s a strategic journey towards a common goal, and
through which each application will take its own unique path. A seminal
component of our CD journey is the Pipeline plugin and it has become our
standard for CD pipeline orchestration. We will discuss a few of the diverse
paths taken by the application teams at our company and show how the use of the
Pipeline plugin has uniquely enabled continuous delivery for us in a way that
no competing tool can.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Neil Hunt of Aquilent
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/lightning-talks-0&quot;&gt;&lt;strong&gt;CD Pipelines as Code with
Github and Bitbucket&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;September 15th 4:45 PM - 5:30 PM, Exhibit Hall J&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
Pipeline Multibranch projects come as a natural evolution of pipeline as code:
define your CD pipeline in your source code repository and Jenkins will create
isolated branch and pull requests jobs for it. This talk is about the
integration of the Pipeline Multibranch plugin with Github and Bitbucket as
branch sources.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Antonio Muñiz of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/06/jenkins-world-speaker-blog-pipeline-model-definition/</id>
<title>Introducing a New Way to Define Jenkins Pipelines</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-06T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/06/jenkins-world-speaker-blog-pipeline-model-definition/" />
<author>
<name>abayer</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by Jenkins World speaker Andrew Bayer, Jenkins
developer at CloudBees.








Over the last couple years, Pipeline as code has very much become the future of
Jenkins - in fact, at this point, I&#8217;d say it&#8217;s pretty well established as the
present of Jenkins. But that doesn&#8217;t mean it&#8217;s done, let alone that it&#8217;s
perfect. While many developers enjoy the power and control that they get from
writing Pipelines using scripting, not everyone feels the same way. A lot of
developers want to specify their build as configuration and get on with building
software.


Pipeline scripts haven&#8217;t been a good way to do that&#8230;&#8203;until now.


With...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Jenkins World speaker Andrew Bayer, Jenkins
developer at &lt;a href=&quot;https://www.cloudbees.com/&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the last couple years, Pipeline as code has very much become the future of
Jenkins - in fact, at this point, I’d say it’s pretty well established as the
&lt;strong&gt;present&lt;/strong&gt; of Jenkins. But that doesn’t mean it’s done, let alone that it’s
perfect. While many developers enjoy the power and control that they get from
writing Pipelines using scripting, not everyone feels the same way. A lot of
developers want to specify their build as configuration and get on with building
software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline scripts haven’t been a good way to do that…​until now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With new changes to Jenkins Pipeline, you are now able to define your Pipeline
from configuration in your &lt;code&gt;Jenkinsfile&lt;/code&gt; by installing the new
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Model+Definition+Plugin&quot;&gt;Pipeline Model Definition&lt;/a&gt;
plugin. It’s available today for you to try via the update center.
Be sure to check the &lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/wiki&quot;&gt;documentation&lt;/a&gt; for examples on how to get started for a
variety of languages and platforms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a quick example based on &lt;a href=&quot;https://github.com/jenkinsci/pipeline-model-definition-plugin/blob/master/Jenkinsfile&quot;&gt;the plugin’s own Jenkinsfile&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;pipeline {
    &lt;span style=&quot;color:#777&quot;&gt;// Make sure that the tools we need are installed and on the path.&lt;/span&gt;
    tools {
        maven &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Maven 3.3.9&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        jdk &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Oracle JDK 8u40&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }

    &lt;span style=&quot;color:#777&quot;&gt;// Run on any executor.&lt;/span&gt;
    agent &lt;span style=&quot;color:#606&quot;&gt;label&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// The order that sections are specified doesn't matter - this will still be run&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;// after the stages, even though it's specified before the stages.&lt;/span&gt;
    postBuild {
        &lt;span style=&quot;color:#777&quot;&gt;// No matter what the build status is, run these steps. There are other conditions&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;// available as well, such as &quot;success&quot;, &quot;failed&quot;, &quot;unstable&quot;, and &quot;changed&quot;.&lt;/span&gt;
        always {
            archive &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/**/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/surefire-reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }

    stages {
        &lt;span style=&quot;color:#777&quot;&gt;// While there's only one stage here, you can specify as many stages as you like!&lt;/span&gt;
        stage(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s still early days for this feature, with a lot of further functionality
planned to make it easier and more intuitive to define your Pipelines. All of
that functionality lives on top of Pipeline scripting, so we’ll also keep
improving Pipeline steps and syntax outside of the model! And perhaps most
exciting, the Pipeline model will be used by an in-the-works visual editor
that will be part of the Blue Ocean project - while the editor isn’t ready yet,
the Pipeline Model Definition plugin will be bundled with the Blue Ocean beta
for you to try out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll be going into all of this and more at my talk on Thursday, September 15th, at
3:45pm at Jenkins World, and showing off the same day at the lunchtime demo
theater. I can’t wait to see you all there and hear what you think of all this!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Andrew will be
&lt;a href=&quot;https://www.cloudbees.com/introducing-new-way-define-jenkins-pipelines&quot;&gt;presenting&lt;/a&gt;
more of this concept at
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in September.
Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for 20% off your full conference pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/09/01/jenkins-world-contributor-summit/</id>
<title>Jenkins World Contributor Summit</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-09-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/09/01/jenkins-world-contributor-summit/" />
<author>
<name>rtyler</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
At previous Jenkins User Conferences we have hosted "Contributor Summits" to
gather developers and power-users in one room to discuss specific areas of
Jenkins, such as Scalability, Pipeline, etc. As part of this year&#8217;s
Jenkins World we&#8217;re hosting
another Contributor
Summit, to discuss: Blue Ocean,
Pipeline and Storage Pluggability.


Contributors to these three areas of the Jenkins ecosystem will be in
attendance to present details of their design, requirements, and tentative
roadmaps. After the presentations, the afternoon will be "unconference style" which
is much more fluid to allow discussions, feedback, and brain-storming around
the three focus areas.


The program for the
Jenkins World
Contributor Summit includes:




Updates from the various project
officers.


A discussion of the Blue...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At previous Jenkins User Conferences we have hosted &quot;Contributor Summits&quot; to
gather developers and power-users in one room to discuss specific areas of
Jenkins, such as Scalability, Pipeline, etc. As part of this year’s
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; we’re hosting
another &lt;a href=&quot;http://www.meetup.com/jenkinsmeetup/events/232811529/&quot;&gt;Contributor
Summit&lt;/a&gt;, to discuss: &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;&lt;strong&gt;Blue Ocean&lt;/strong&gt;&lt;/a&gt;,
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;&lt;/a&gt; and &lt;strong&gt;Storage Pluggability&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contributors to these three areas of the Jenkins ecosystem will be in
attendance to present details of their design, requirements, and tentative
roadmaps. After the presentations, the afternoon will be &quot;unconference style&quot; which
is much more fluid to allow discussions, feedback, and brain-storming around
the three focus areas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The program for the
&lt;a href=&quot;http://www.meetup.com/jenkinsmeetup/events/232811529/&quot;&gt;&lt;strong&gt;Jenkins World
Contributor Summit&lt;/strong&gt;&lt;/a&gt; includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updates from the various project
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Team+Leads&quot;&gt;officers&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A discussion of the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; technology stack,
overall architecture, and how to develop plugins that integrate with Blue
Ocean. Led by &lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Presentation on the current status of &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Pipeline&lt;/a&gt;, lessons
learned, new changes and the future. Led by
&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overview of &quot;Storage Pluggability&quot;, a new scalability-oriented project to
revamp the underlying storage mechanisms in Jenkins. Led by
&lt;a href=&quot;https://github.com/kohsuke&quot;&gt;Kohsuke Kawaguchi&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I cannot recommend participating in the Contributor Summit enough. I have found
previous Summits to be immensely useful for sharing my own thoughts, as well as
for hearing new perspectives from the others in attendance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our space is limited however! I encourage you to join us, so please
&lt;a href=&quot;http://www.meetup.com/jenkinsmeetup/events/232811529/&quot;&gt;RSVP soon&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/31/scaling-jenkins-at-jenkins-world/</id>
<title>Scaling Jenkins at Jenkins World 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-31T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/31/scaling-jenkins-at-jenkins-world/" />
<author>
<name>rtyler</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by R. Tyler Croy, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
CloudBees, Inc.









I find the topic of "scaling Jenkins" to be incredibly interesting because,
more often than not, scaling Jenkins isn&#8217;t just about scaling a single instance
but rather scaling an organization and its continuous delivery processes. In
many cases when people talk about "scaling Jenkins" they&#8217;re talking about
"Jenkins as a Service" or "Continuous Delivery as a Service" which introduces a
much broader scope, and also more organization-specific requirements, to the
problem.


One of my favorite parts of a...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https;//github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I find the topic of &quot;scaling Jenkins&quot; to be incredibly interesting because,
more often than not, scaling Jenkins isn’t just about scaling a single instance
but rather scaling an &lt;em&gt;organization&lt;/em&gt; and its continuous delivery processes. In
many cases when people talk about &quot;scaling Jenkins&quot; they’re talking about
&quot;Jenkins as a Service&quot; or &quot;Continuous Delivery as a Service&quot; which introduces a
much broader scope, and also more organization-specific requirements, to the
problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of my favorite parts of a big conference like
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; is getting to
see how other people are solving similar problems at different organizations,
in essence:
&quot;&lt;a href=&quot;https://english.stackexchange.com/questions/120739/a-peek-into-the-sausage-factory&quot;&gt;how
the sausage is made&lt;/a&gt;.&quot; This year’s Jenkins World will be no different, with a number
of sessions by developers and engineers from the companies leading the way,
scaling continuous delivery and Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the realm of &quot;scaling Jenkins&quot; the following sessions stand-out to me as
&quot;must-attend&quot; for those interested in the space:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkinsops-initiative-streamline-and-automate-jenkins&quot;&gt;&lt;strong&gt;JenkinsOps:
An Initiative to Streamline and Automate Jenkins&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 14th 4:15 PM - 5:00 PM, Exhibit Hall A-1&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/159px-National_Public_Radio_logo.svg.png&quot; alt=&quot;159px National Public Radio logo.svg&quot; /&gt;&lt;/span&gt;
NPR’s Digital Media team uses Jenkins to build, test and deploy code to various
staging and production environments. As the complexity of the software
components, environments and tests have grown - both generally and due to our
quest to achieve continuous deployment - management of Jenkins has become a
challenge. In this talk, we share information about our “JenkinsOps” effort
which has allowed us to automate many of the administrative tasks necessary to
manage feature code branches, handle deployments, run tests and configure our
environments properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Paul Miles and Grant Dickie of NPR
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/thinking-inside-container-continuous-delivery-story&quot;&gt;&lt;strong&gt;Thinking
Inside the Container: A Continuous Delivery Story&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 1:30 PM - 2:15 PM, Exhibit Hall C&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image left&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/Riot_Games_logo.png&quot; alt=&quot;Riot Games logo&quot; /&gt;&lt;/span&gt;
At Riot Games, we build a lot of software. Come learn how we built an
integrated Docker solution using Jenkins that accepts Docker images submitted
as build environments by engineers around the company. Our containerized farm
now creates over 10,000 containers per week and handles nearly 1,000 jobs at a
rate of about 100 jobs per hour. All this is done with readily available, open
source Jenkins plugins. We’ll explore lessons learned, best practices and how
to scale and build your own system, as well as why we chose to solve the
problem this way…and whether or not we succeeded!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Maxfield F Stewart of Riot Games
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/how-do-continuous-delivery-jenkins-pipeline-docker-and-kubernetes&quot;&gt;&lt;strong&gt;How
to Do Continuous Delivery with Jenkins Pipeline, Docker and Kubernetes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 2:30 PM - 3:15 PM, Great America J&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/pipeline-at-jenkinsworld/redhat.png&quot; alt=&quot;redhat&quot; /&gt;&lt;/span&gt;
In this talk, we’ll show how to use Jenkins Pipeline together with Docker and
Kubernetes to implement a complete end-to-end continuous delivery and
continuous improvement system for microservices and monolithic applications
using open source software. We’ll demonstrate how to easily create new
microservices projects or import existing projects, have them automatically
built, system and integration tested, staged and then deployed. Once deployed,
we will also see how to manage and update applications using continuous
delivery practices along with integrated ChatOps - all completely automated!&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— James Strachan of Red Hat
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/scaling-jenkins-docker-swarm-kubernetes-or-mesos&quot;&gt;&lt;strong&gt;Scaling
Jenkins with Docker: Swarm, Kubernetes or Mesos?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 2:30 PM - 3:15 PM, Exhibit Hall C&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/320px-CloudBees_official_logo.png&quot; alt=&quot;320px CloudBees official logo&quot; /&gt;&lt;/span&gt;
The Jenkins platform can be dynamically scaled by using several Docker cluster
and orchestration platforms, using containers to run agents and jobs and also
isolating job execution. But which cluster technology should be used? Docker
Swarm? Apache Mesos? Kubernetes? How do they compare? All of them can be used
to dynamically run jobs inside containers. This talk will cover these main
container clusters, outlining the pros and cons of each, the current state of
the art of the technologies and Jenkins support. I believe people will be very
interested in learning about the multiple options available.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Carlos Sanchez of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/so-you-want-build-worlds-biggest-jenkins-cluster&quot;&gt;&lt;strong&gt;So,
You Want to Build the World’s Biggest Jenkins Cluster?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 3:45 PM - 4:30 PM, Exhibit Hall C&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How can we do it? We start with some real world results realized by Jenkins
users who have built large clusters and review how they got there. Next, we
will do experiments scaling some individual sub-components of Jenkins in
isolation and see what challenges we will face when integrated. The famous
large, distributed systems undoubtedly faced problems scaling - and we can
learn from them, too. The result will be recipes for building Jenkins
clusters with different scaling capabilities. After all of this, you can
build the biggest Jenkins cluster in the world…or maybe just make your own
Jenkins cluster more efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Stephen Connolly of CloudBees
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkins-splunk-and-splunking-jenkins&quot;&gt;&lt;strong&gt;Jenkins at
Splunk and Splunking Jenkins&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 3:45 PM - 4:30 PM, Exhibit Hall A-1&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/splunk-logo-300x100.gif&quot; alt=&quot;splunk logo 300x100&quot; /&gt;&lt;/span&gt;
This session will highlight how Splunk uses Jenkins to provide an end-to-end
solution in the development CI system. Attendees will see how test results are
delivered to a Splunk indexer, where they can be analyzed and presented in a
variety of ways. This session will also include a live demonstration.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— Bill Houston of Splunk
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkins-inside-google&quot;&gt;&lt;strong&gt;Jenkins inside Google&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;September 15th 4:45 PM - 5:30 PM, Exhibit Hall C&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/scaling-jenkins-at-jenkinsworld/272px-Google_2015_logo.svg.png&quot; alt=&quot;272px Google 2015 logo.svg&quot; /&gt;&lt;/span&gt;
Last year, we presented our initial investigations and stress testing as we
prepared to deploy a large-scale Jenkins installation at Google. Now, with a
year of real-world use under our belts, we’ll discuss how our expectations held
up, what new issues we encountered and how we have addressed them.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
— David Hoover of Google
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to these, we will also be hosting a
&lt;a href=&quot;http://www.meetup.com/jenkinsmeetup/events/232811529/&quot;&gt;Jenkins World
Contributor Summit&lt;/a&gt; where &quot;scaling&quot; relevant topics such as &quot;Storage
Pluggability&quot; will be discussed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jenkins World &lt;a href=&quot;https://www.cloudbees.com/juc/agenda&quot;&gt;agenda&lt;/a&gt; is packed
with even more sessions, so it should be a very informational event for
everybody; hope to see you there!&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/30/ask-experts-demos/</id>
<title>Demos at Jenkins World 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/30/ask-experts-demos/" />
<author>
<name>rtyler</name>
</author>
<category term="jenkinsworld"></category>
<category term="event"></category>
<summary>
At this year&#8217;s Jenkins World,
our events officer Alyssa has been working to
organize various activities in the "Open Source Hub" on the expo floor.  Both
days of the conference (Sept. 14th and 15th), during the break for lunch, there
will be 15 minute demos by many of the
experts helping to staff
the Open Source Hub.


Demo Schedule


Wednesday, September 14th









Time
Session
Details
Presenter




12:15 - 12:30
Blue Ocean in Action
Showcase of Blue Ocean and how it will make Jenkins a pleasure to use.
Keith Zantow


12:30 - 12:45
Notifications with Jenkins Pipeline
Sending information to Slack, HipChat, email and more from your Pipeline
Liam Newman


12:45 - 13:00
Docker and Pipeline
Learn how to use Docker inside of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 125x125&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this year’s &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt;,
our events officer &lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa&lt;/a&gt; has been working to
organize various activities in the &quot;Open Source Hub&quot; on the expo floor.  Both
days of the conference (Sept. 14th and 15th), during the break for lunch, there
will be 15 minute demos by many of the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/&quot;&gt;experts&lt;/a&gt; helping to staff
the Open Source Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;demo-schedule&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#demo-schedule&quot;&gt;&lt;/a&gt;Demo Schedule&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wednesday-september-14th&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wednesday-september-14th&quot;&gt;&lt;/a&gt;Wednesday, September 14th&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Session&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Presenter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:15 - 12:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; in Action&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Showcase of &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; and how it will make Jenkins a pleasure to use.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:30 - 12:45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Notifications with Jenkins Pipeline&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Sending information to Slack, HipChat, email and more from your Pipeline&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:45 - 13:00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Docker and Pipeline&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Learn how to use Docker inside of Pipeline for clean, repeatable testing environments&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:00 - 13:15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Git plugin - large repos, submodule authentication and more&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Techniques for managing large Git repositories, Submodule authentication, Pipelines and Git&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:15 - 13:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Freestyle to Pipeline&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Overview of how easy it is to migrate from a confusing series of Freestyle Jobs to Jenkins Pipeline&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:30 - 13:45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;&lt;code&gt;package.json&lt;/code&gt; and Jenkins&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Using &lt;code&gt;package.json&lt;/code&gt; to control your build; running tests, coverage and generating documentation in Jenkins&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:45 - 14:00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Extending Pipeline with Libraries&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;When you have many jobs using similar configuration, it is natural to factor out the common parts into libraries. See some ways Pipeline lets you do this.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thursday-september-15th&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#thursday-september-15th&quot;&gt;&lt;/a&gt;Thursday, September 15th&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;col style=&quot;width: 25%;&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Time&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Session&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Presenter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:15 - 12:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;A simpler way to define Jenkins Pipelines&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Get to know a new way to define your Pipelines in a more configuration-like way!&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https;//github.com/abayer&quot;&gt;Andrew Bayer&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:30 - 12:45&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Multibranch Pipelines + Git symbolic-ref&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Pipeline Multibranch Plugin is amazing, but is even better when used with
Git symbolic references. The combination of the two gives users a way to create
individual Jenkins jobs for each of their build/test configurations, instead of
using a single parameterized job. I’ll show how to use these tools together to
home in on problematic tests, systems under test, or both.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12:45 - 13:00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;External Workspace Manager plugin for Jenkins Pipeline&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Meet the External Workspace Manager plugin, which supports managing workspaces across multiple Jenkins jobs running on different nodes and more!&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alex Somai&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:00 - 13:15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Ownership plugin for Jenkins&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;The presentation will introduce the Ownership engine for Jenkins jobs, folders and nodes. The presentation will cover plugin WebUI features, Ownership-based security and integration with Jenkins Pipeline&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13:15 - 13:30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;Pipelines for building and deploying Android apps&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;Using the various Android-related plugins for Jenkins, we will demonstrate pipelines to automatically build, test, and securely deploy Android apps.&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see there is a lot to see in the Open Source Hub at Jenkins World.
To my knowledge these demos are not going to be recorded, so your only
opportunities to see them might be at Jenkins World or your local
&lt;a href=&quot;http://www.meetup.com/pro/jenkins&quot;&gt;Jenkins Area Meetup&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/29/sauce-pipeline/</id>
<title>Browser-testing with Sauce OnDemand and Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/29/sauce-pipeline/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="saucelabs"></category>
<category term="selenium"></category>
<category term="nightwatch"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Testing web applications across multiple browsers on different platforms can be challenging even for smaller applications.
With Jenkins and the
Sauce OnDemand Plugin,
you can wrangle that complexity by defining your Pipeline as Code.


Pipeline &#9829; UI Testing, Too

I recently started looking for a way to do browser UI testing for an open-source JavaScript project to which I contribute.
The project is targeted primarily at
Node.js
but we&#8217;re committed to maintaining browser-client compatibility as well.
That means we should run tests on a matrix of browsers.
Sauce Labs
has an "open-sauce" program that provides free test instances to open-source projects.
I...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testing web applications across multiple browsers on different platforms can be challenging even for smaller applications.
With Jenkins and the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Sauce+OnDemand+Plugin&quot;&gt;Sauce OnDemand Plugin&lt;/a&gt;,
you can wrangle that complexity by defining your Pipeline as Code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pipeline-ui-testing-too&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-ui-testing-too&quot;&gt;&lt;/a&gt;Pipeline ♥ UI Testing, Too&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently started looking for a way to do browser UI testing for an open-source JavaScript project to which I contribute.
The project is targeted primarily at
&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt;
but we’re committed to maintaining browser-client compatibility as well.
That means we should run tests on a matrix of browsers.
&lt;a href=&quot;https://saucelabs.com/&quot;&gt;Sauce Labs&lt;/a&gt;
has an &quot;open-sauce&quot; program that provides free test instances to open-source projects.
I decided to try using the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Sauce+OnDemand+Plugin&quot;&gt;Sauce OnDemand Plugin&lt;/a&gt;
and
&lt;a href=&quot;http://nightwatchjs.org/&quot;&gt;Nightwatch.js&lt;/a&gt;
to run Selenium tests on a sample project first, before trying a full-blown suite of tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;starting-from-framework&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#starting-from-framework&quot;&gt;&lt;/a&gt;Starting from Framework&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started off by following Sauce Labs' instructions on
&quot;&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Setting+Up+Sauce+Labs+with+Jenkins&quot;&gt;Setting up Sauce Labs with Jenkins&lt;/a&gt;&quot;
as far as I could.
I installed the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin&quot;&gt;JUnit&lt;/a&gt; and
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Sauce+OnDemand+Plugin&quot;&gt;Sauce OnDemand&lt;/a&gt;
plugins, created an account with Sauce Labs, and
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins&quot;&gt;added my Sauce Labs credentials to Jenkins&lt;/a&gt;.
From there I started to get a little lost.
I’m new to Selenium and I had trouble understanding how to translate the instructions to my situation.
I needed a working example that I could play with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Happily, there’s a whole range of sample projects in
&quot;&lt;a href=&quot;https://github.com/saucelabs-sample-test-frameworks&quot;&gt;saucelabs-sample-test-frameworks&lt;/a&gt;&quot;
on GitHub, which show how to integrate Sauce Labs with various test frameworks, including Nightwatch.js.
I forked the Nightwatch.js sample to
&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;bitwiseman/JS-Nightwatch.js&lt;/a&gt;
and set to writing my &lt;code&gt;Jenkinsfile&lt;/code&gt;.
Between the sample and the Sauce Labs instructions,
I was able to write a pipeline that ran five tests on one browser via
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy&quot;&gt;Sauce Connect&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    checkout scm

    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e chrome --test tests/guineaPig.js || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SauceOnDemandTestPublisher&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Install dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use my
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Installing+and+Configuring+the+Sauce+OnDemand+Plugin+for+Jenkins&quot;&gt;previously added sauce credentials&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Start up the
&lt;a href=&quot;https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy&quot;&gt;Sauce Connect&lt;/a&gt;
tunnel to Sauce Labs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run Nightwatch.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use JUnit to track results and show a trend graph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Link result details from Sauce Labs&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline expects to be run from a &lt;code&gt;Jenkinsfile&lt;/code&gt; in SCM.
To copy and paste it directly into a Jenkins Pipeline job, replace the &lt;code&gt;checkout scm&lt;/code&gt; step with
&lt;code&gt;git url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I ran this job a few times to get the JUnit report to show a trend graph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/pipeline-report.png&quot; alt=&quot;Pipeline Report for &quot; sauce-pipeline=&quot;&quot; Branch=&quot;&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sample app generates the &lt;code&gt;SauceOnDemandSessionID&lt;/code&gt; for each test, enabling the Jenkins Sauce OnDemand Plugin’s result publisher to link results to details Sauce Labs captured during the run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/pipeline-results.png&quot; alt=&quot;Sauce Test Results&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/sauce-details.png&quot; alt=&quot;Sauce Test Result Details&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;adding-platforms&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-platforms&quot;&gt;&lt;/a&gt;Adding Platforms&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next I wanted to add a few more platforms to my matrix.
This would require changing both the test framework configuration and the pipeline.
I’d need to add new named combinations of platform, browser, and browser version (called &quot;environments&quot;) to the Nightwatch.js configuration file,
and modify the pipeline to run tests in those new environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a perfect example of the power of pipeline as code.
If I were working with a separately configured pipeline,
I’d have to make the change to the test framework, then change the pipeline manually.
With my pipeline checked in as code,
I could change both in one commit,
preventing errors resulting from pipeline configurations going out of sync from the rest of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I added three new environments to &lt;code&gt;nightwatch.json&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test_settings&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; : {
  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span style=&quot;color:#777&quot;&gt;/*----8&amp;lt;----8&amp;lt;----8&amp;lt;----*/&lt;/span&gt; },
  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: { &lt;span style=&quot;color:#777&quot;&gt;/*----8&amp;lt;----8&amp;lt;----8&amp;lt;----*/&lt;/span&gt; },

  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;desiredCapabilities&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;platform&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;browserName&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;latest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  },
  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;desiredCapabilities&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;platform&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Windows 10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;browserName&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;internet explorer&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;latest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  },
  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;desiredCapabilities&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: {
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;platform&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Windows 10&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;browserName&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MicrosoftEdge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;latest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And I modified my &lt;code&gt;Jenkinsfile&lt;/code&gt; to call them:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;//----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----&lt;/span&gt;
sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; configs = [ &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    ].join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; --test tests/guineaPig.js&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
} &lt;span style=&quot;color:#777&quot;&gt;//----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using an array to improve readability and make it easy to add more platforms later.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Changed from single-quoted string to double-quoted to support variable substitution.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Test frameworks have bugs too. Nightwatch.js (v0.9.8) generates incomplete JUnit files,
reporting results without enough information in them to distinguish between platforms.
I implemented a fix for it and
&lt;a href=&quot;https://github.com/nightwatchjs/nightwatch/pull/1160&quot;&gt;submitted a PR&lt;/a&gt; to Nightwatch.js.
This blog shows output with that fix applied locally.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected, Jenkins picked up the new pipeline and ran Nightwatch.js on four platforms.
Sauce Labs of course recorded the results and correctly linked them into this build.
Nightwatch.js was already configured to use multiple worker threads to run tests against those platforms in parallel, and
my Sauce Labs account supported running them all at the same time,
letting me cover four configurations in less that twice the time,
and that added time was most due to individual new environments taking longer to complete.
When I move to the actual project, this will let me run broad acceptance passes quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/platforms-results.png&quot; alt=&quot;Sauce Labs Results List&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/platforms-report.png&quot; alt=&quot;JUnit Report Showing Added Platforms&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion-to-awesome-and-beyond&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion-to-awesome-and-beyond&quot;&gt;&lt;/a&gt;Conclusion: To Awesome and Beyond&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Considering the complexity of the system, I was impressed with how easy it was to integrate Jenkins with Sauce OnDemand to start testing on multiple browsers.
The plugin worked flawlessly with Jenkins Pipeline.
I went ahead and ran some additional tests to show that failure reporting also behaved as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;//----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span style=&quot;color:#777&quot;&gt;//----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----8&amp;lt;----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Removed &lt;code&gt;--test&lt;/code&gt; filter to run all tests&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/tests-report.png&quot; alt=&quot;Tests&quot; width=&quot;Platorms&quot; height=&quot;Results&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;epilogue-pipeline-vs-freestyle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#epilogue-pipeline-vs-freestyle&quot;&gt;&lt;/a&gt;Epilogue: Pipeline vs. Freestyle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just for comparison here’s the final state of this job in Freestyle UI versus fully-commented pipeline code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This includes the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin&quot;&gt;AnsiColor Plugin&lt;/a&gt;
to support Nightwatch.js' default ANSI color output.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;freestyle&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#freestyle&quot;&gt;&lt;/a&gt;Freestyle&lt;/h4&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/freestyle-1.png&quot; alt=&quot;Freestyle Job Configuration - SCM&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/freestyle-2.png&quot; alt=&quot;Freestyle Job Configuration - Wrappers and Sauce&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-29/freestyle-3.png&quot; alt=&quot;Freestyle Job Configuration - Build and Publish&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline&quot;&gt;&lt;/a&gt;Pipeline&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    checkout scm

    &lt;span style=&quot;color:#777&quot;&gt;// Install dependencies&lt;/span&gt;
    sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;// Add sauce credentials&lt;/span&gt;
    sauce(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;f0a6b8ad-ce30-4cba-bf9a-95afbc470a8a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
        &lt;span style=&quot;color:#777&quot;&gt;// Start sauce connect&lt;/span&gt;
        sauceconnect(&lt;span style=&quot;color:#606&quot;&gt;options&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;useGeneratedTunnelIdentifier&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;verboseLogging&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;) {

            &lt;span style=&quot;color:#777&quot;&gt;// List of browser configs we'll be testing against.&lt;/span&gt;
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; platform_configs = [
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;chrome&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;firefox&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ie&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;edge&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            ].join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

            &lt;span style=&quot;color:#777&quot;&gt;// Nightwatch.js supports color ouput, so wrap this step for ansi color&lt;/span&gt;
            wrap([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AnsiColorBuildWrapper&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;colorMapName&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;XTerm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) {

                &lt;span style=&quot;color:#777&quot;&gt;// Run selenium tests using Nightwatch.js&lt;/span&gt;
                &lt;span style=&quot;color:#777&quot;&gt;// Ignore error codes. The junit publisher will cover setting build status.&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/nightwatch -e &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;platform_configs&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; || true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }

            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

            step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SauceOnDemandTestPublisher&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline expects to be run from a &lt;code&gt;Jenkinsfile&lt;/code&gt; in SCM.
To copy and paste it directly into a Jenkins Pipeline job, replace the &lt;code&gt;checkout scm&lt;/code&gt; step with
&lt;code&gt;git url:'https://github.com/bitwiseman/JS-Nightwatch.js', branch: 'sauce-pipeline'&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not only is the pipeline as code more compact,
it also allows for comments to further clarify what is being done.
And as I noted earlier,
changes to this pipeline code are committed the same as changes to the rest of the project,
keeping everything synchronized, reviewable, and testable at any commit.
In fact, you can view the full set of commits for this blog post in the
&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js/tree/blog/sauce-pipeline&quot;&gt;blog/sauce-pipeline&lt;/a&gt;
branch of the
&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;bitwiseman/JS-Nightwatch.js&lt;/a&gt;
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Sauce+OnDemand+Plugin&quot;&gt;Sauce OnDemand Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/bitwiseman/JS-Nightwatch.js&quot;&gt;bitwiseman/JS-Nightwatch.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/saucelabs-sample-test-frameworks&quot;&gt;saucelabs-sample-test-frameworks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/29/jenkins-world-speaker-blog-goodgame/</id>
<title>Enforcing Jenkins Best Practices</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/29/jenkins-world-speaker-blog-goodgame/" />
<author>
<name>hinman</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by Jenkins World speaker David Hinske, Release
Engineer at Goodgame Studios.








Hey there, my name is David Hinske and I work at Goodgame Studios (GGS), a game
development company in Hamburg, Germany. As Release Engineer in a company with
several development teams, it comes in handy using several Jenkins instances.
While this approach works fine in our company and gives the developers a lot of
freedom, we came across some long-term problems concerning maintenance and
standards. These problems were mostly caused by misconfiguration or non-use of
plugins. With “configuration as code” in mind, I took the approach to apply
static code analysis with the...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Jenkins World speaker David Hinske, Release
Engineer at &lt;a href=&quot;https://www.goodgamestudios.com/&quot;&gt;Goodgame Studios&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hey there, my name is David Hinske and I work at Goodgame Studios (GGS), a game
development company in Hamburg, Germany. As Release Engineer in a company with
several development teams, it comes in handy using several Jenkins instances.
While this approach works fine in our company and gives the developers a lot of
freedom, we came across some long-term problems concerning maintenance and
standards. These problems were mostly caused by misconfiguration or non-use of
plugins. With “configuration as code” in mind, I took the approach to apply
static code analysis with the help of SonarQube, a platform to manage code
quality, for all of our Jenkins job configurations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a small centralized team, we were looking for an easy way to control the
health of our growing Jenkins infrastructure. With considering “configuration
as code“, I developed a simple extension of SonarQube, to manage the quality
and usage of all spawned Jenkins instances. The given SonarQube features (like
customized rules/metrics, quality profiles and dashboards) allow us and the
development teams to analyze and measure the quality of all created jobs in our
company. Even though Jenkins configuration analysis cannot cover all
SonarQube’s axes of code quality, I think there is still potential for
conventions/standards, duplications, complexity, potential bugs
(misconfiguration) and design and architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The results of this analysis can be used by all people working with Jenkins. To
achieve this, I developed a simple extension of SonarQube, containing
everything which is needed to hook up our SonarQube with our Jenkins
environment. The implementation contains a new basic-language “Jenkins“ and an
initial set of rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course the needs depend strongly on the way Jenkins is being used, so not
every rule implemented might be useful for every team, but this applies to all
types of code analysis. The main inspirations for the rules were developer
feedback and some articles found in the web. The different ways Jenkins can be
configured provides the potential for many more rules. With this new approach
of quality analysis, we can enforce best practices like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Polling must die (Better to triggerb uilds from pushes than poll the
repository every x minutes).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use Log Rotator (Not using log-rotator can result in disk space problems on
the master).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use slaves/labels (Jobs should be defined where to run).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don’t build on the master (In larger systems, don’t build on the master).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforce plugin usage (For example: Timestamp, Mask-Passwords).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Naming sanity (Limit project names to a sane (e.g. alphanumeric) character
set).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analyze Groovy Scripts (For example: Prevent System.exit(0) in System Groovy
Scripts).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-goodgame/jenkins1.png&quot; alt=&quot;jenkins1&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides taking control of all configuration of any Jenkins instance we want,
there is also room for additional metrics, like measuring the amount and
different types of jobs (Freestyle/Maven etc…​) to get an overview about the
general load of the Jenkins instance. A more sophisticated idea is to measure
complexity of jobs and even pipelines. As code, jobs configuration gets harder
to understand the more steps are involved. On the one hand scripts, conditions
and many parameters can negatively influence the readability, especially if you
have external dependencies (like scripts) in different locations. On the other
hand, pipelines can also grow very complex when many jobs are involved and
chained for execution. It will be very interesting for us to see where and why
too complex pipelines are being created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On visualization we rely on the data and its interpretation of SonarQube, which
offers a big bandwidth of widgets. Everybody can use and customize the
dashboards. Our centralized team for example has a separate dashboard where we
can get a quick overview over all instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-goodgame/jenkins2.png&quot; alt=&quot;jenkins2&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem of &quot;growing&quot; Jenkins with maintenance problems is not new.
Especially when you have many developers involved, including with the access to
create jobs and pipelines themselves, an analysis like this SonarQube plugin
provides can be useful for anyone who wants to keep their Jenkins in shape.
Customization and standards are playing a big role in this scenario. This blog
post surely is not an advertisement for my developed plugin, it is more about
the crazy idea of using static code analysis for Jenkins job configuration. I
haven’t seen anything like it so far and I feel that there might be some
potential behind this idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Join me at my Enforcing Jenkins Best Practices session at the 2016 Jenkins
World to hear more!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;David will be
&lt;a href=&quot;https://www.cloudbees.com/enforcing-jenkins-best-practices&quot;&gt;presenting&lt;/a&gt;
more of this concept at
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in September.
Register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for 20% off your full conference pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/</id>
<title>Ask the Experts at Jenkins World 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/26/ask-the-experts-jenkins-world/" />
<author>
<name>rtyler</name>
</author>
<category term="jenkinsworld"></category>
<category term="event"></category>
<summary>
Our events officer Alyssa has been working for
the past several weeks to organize the "Open Source Hub" at
Jenkins World 2016. The Hub
is a location on the expo floor where contributors to the Jenkins project can hang
out, share demos and help Jenkins users via the "Ask the Experts" program. Thus
far we have a great list of experts who have volunteered to help staff the
booth, which includes many frequent contributors, JAM
organizers and board members.


A few of the friendly folks you will see at Jenkins World are:




Paul Allen -
P4 Plugin
maintainer and Pipeline contributor.


R Tyler Croy -
Jenkins infrastructure maintainer and
board member.


Jesse Glick - Pipeline
maintainer...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 125x125&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our events officer &lt;a href=&quot;https://github.com/alyssat&quot;&gt;Alyssa&lt;/a&gt; has been working for
the past several weeks to organize the &quot;Open Source Hub&quot; at
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2016&lt;/a&gt;. The Hub
is a location on the expo floor where contributors to the Jenkins project can hang
out, share demos and help Jenkins users via the &quot;Ask the Experts&quot; program. Thus
far we have a great list of experts who have volunteered to help staff the
booth, which includes many frequent contributors, &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/jam&quot;&gt;JAM&lt;/a&gt;
organizers and board members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few of the friendly folks you will see at Jenkins World are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/p4paul&quot;&gt;Paul Allen&lt;/a&gt;&lt;/strong&gt; -
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/P4+Plugin&quot;&gt;P4 Plugin&lt;/a&gt;
maintainer and &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Pipeline&lt;/a&gt; contributor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;&lt;/strong&gt; -
&lt;a href=&quot;https://github.com/jenkins-infra&quot;&gt;Jenkins infrastructure&lt;/a&gt; maintainer and
board member.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Pipeline&lt;/a&gt;
maintainer and long-time contributor to Jenkins
&lt;a href=&quot;https://github.com/jenkinsci/jenkins&quot;&gt;core&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/eddumelendez&quot;&gt;Eddú Meléndez Gonzales&lt;/a&gt;&lt;/strong&gt; - Organizer for
the &lt;a href=&quot;http://www.meetup.com/es/Lima-Jenkins-Area-Meetup/&quot;&gt;Lima (Perú)
Jenkins Area Meetup&lt;/a&gt; and contributor to &lt;a href=&quot;http://spring.io&quot;&gt;Spring&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jh86&quot;&gt;Jon Hermansen&lt;/a&gt;&lt;/strong&gt; - Organizer for the
&lt;a href=&quot;http://www.meetup.com/Los-Angeles-Jenkins-Area-Meetup/&quot;&gt;Los Angeles
Jenkins Area Meetup&lt;/a&gt;, developer and Pipeline user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/omehegan&quot;&gt;Owen Mehegan&lt;/a&gt;&lt;/strong&gt; -
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/GitLab+Plugin&quot;&gt;GitLab plugin&lt;/a&gt;
contributor, release engineer and copy editor for jenkins.io.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt;&lt;/strong&gt; -
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt; organizer, maintainer of multiple
plugins and &lt;a href=&quot;http://www.meetup.com/St-Petersburg-Jenkins-Meetup/&quot;&gt;St.
Petersburg Jenkins Area Meetup&lt;/a&gt; organizer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/orrc&quot;&gt;Christopher Orr&lt;/a&gt;&lt;/strong&gt; - Maintainer of multiple
Android-related plugins, including the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin&quot;&gt;Android
Emulator plugin&lt;/a&gt; and contributor to numerous projects behind the scenes of
Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/cvega&quot;&gt;Casey Vega&lt;/a&gt;&lt;/strong&gt; - Organizer for the
&lt;a href=&quot;http://www.meetup.com/Los-Angeles-Jenkins-Area-Meetup/&quot;&gt;Los Angeles
Jenkins Area Meetup&lt;/a&gt; and release engineer at Verizon Digital Media.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/markewaite&quot;&gt;Mark Waite&lt;/a&gt;&lt;/strong&gt; - Maintainer of the
&lt;a href=&quot;http://wiki.jenkins-ci.org/display/JENKINS/Git%20Plugin&quot;&gt;Git plugin&lt;/a&gt; and
contributor to a number of other Git-related plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/dty&quot;&gt;Dean Yu&lt;/a&gt;&lt;/strong&gt; - Long-time contributor, board member
and release engineer at Shutterfly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope that this list isn’t exhaustive! If you are an active member of the
Jenkins community and/or a contributor, consider taking part in the &quot;Ask the
Experts&quot; program. It’s a great opportunity to bond with other contributors and
talk with fellow users at Jenkins World.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will be able to find us in the expo hall under the &quot;Open Source Hub&quot; sign;
please stop by at Jenkins World to say hello, pick up stickers and to ask
questions!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/24/jenkins-world-2016-festivities/</id>
<title>Jenkins World 2016 Festivities</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-24T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/24/jenkins-world-2016-festivities/" />
<author>
<name>alyssat</name>
</author>
<category term="jenkinsworld"></category>
<category term="event"></category>
<summary>
At Jenkins World 2016 on
September 14-15, stop by the "Open Source Hub", located in the Partner Expo
hall at the Santa Clara Convention Center in Santa Clara, CA. The Open Source
Hub will have many Jenkins contributors, committers, JAM leaders, and
officers from
the governance board under one roof, so there will be plenty of knowledge and
talents on hand to share. We hope you’ll join in on the festivities.


Ask the Experts


The setup that is waiting for you: white boards, monitors and lots of brain
power to help answer those Jenkins questions that have been keeping you up at
night.  Jenkins experts can help with beginner...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 125x125&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2016&lt;/a&gt; on
September 14-15, stop by the &quot;Open Source Hub&quot;, located in the Partner Expo
hall at the Santa Clara Convention Center in Santa Clara, CA. The Open Source
Hub will have many Jenkins contributors, committers, JAM leaders, and
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Governance+Board&quot;&gt;officers from
the governance board&lt;/a&gt; under one roof, so there will be plenty of knowledge and
talents on hand to share. We hope you’ll join in on the festivities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ask-the-experts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ask-the-experts&quot;&gt;&lt;/a&gt;Ask the Experts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The setup that is waiting for you: white boards, monitors and lots of brain
power to help answer those Jenkins questions that have been keeping you up at
night.  Jenkins experts can help with beginner questions to the more advanced
ones. All you need to do is bring your laptop and your questions; the experts
will help answer them!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;live-demos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#live-demos&quot;&gt;&lt;/a&gt;Live Demos&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes seeing is believing, there will be plenty of demos in the &quot;Open
Source Hub&quot; during the lunch hours on Wednesday September 14th, and Thursday
September 15th in the expo hall. Jenkins experts will be show-casing their
favorite Jenkins features, plugins and projects. Grab your lunch, take a seat
in the open source theater to learn about:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipelines for Building and Deploying Android Apps&lt;/strong&gt; by Android Emulator
plugin maintainer &lt;a href=&quot;https://github.com/orrc&quot;&gt;Chris Orr&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Git Plugin - Large Repos, Submodule Authentication, and more&lt;/strong&gt; by Git plugin
maintainer &lt;a href=&quot;https://github.com/MarkEWaite&quot;&gt;Mark Waite&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker and Pipeline&lt;/strong&gt; by Jenkins infrastructure contributor
&lt;a href=&quot;https://github.com/rtyler&quot;&gt;R Tyler Croy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extending Pipeline with Libraries&lt;/strong&gt; by Pipeline plugin maintainer
&lt;a href=&quot;https://github.com/jglick&quot;&gt;Jesse Glick&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blue Ocean in Action&lt;/strong&gt; by &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; contributor
&lt;a href=&quot;https://github.com/kzantow&quot;&gt;Keith Zantow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;External Workspace Manager plugin for Pipeline&lt;/strong&gt; by
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc&quot;&gt;Google Summer of Code&lt;/a&gt; student
&lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alexandru Somai&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And many more&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-mural&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jenkins-mural&quot;&gt;&lt;/a&gt;Jenkins Mural&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins World participants will take part in the realization of a giant
collaborative mural painting with the
&lt;a href=&quot;http://www.commitstrip.com/&quot;&gt;CommitStrip&lt;/a&gt; team.  Thomas, the writer and
Etienne, the cartoonist, teamed up with a few Jenkins contributors to design a
5m x 2m mmural which will be drawn live! Brushes and colors will be
available for all attendees who wish to help paint this one of a kind piece of
Jenkins art.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sticker-swap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sticker-swap&quot;&gt;&lt;/a&gt;Sticker Swap&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins World attendees will have a chance to swap stickers. There will be a
table where attendees are welcome to place/take stickers. Bring your cool
stickers to share with others and take stickers that interest you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/logo_128.png&quot; alt=&quot;logo 128&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/angry-jenkins_128.png&quot; alt=&quot;angry jenkins 128&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/ninja_128.png&quot; alt=&quot;ninja 128&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-master.png&quot; alt=&quot;jenkins master&quot; /&gt;&lt;/span&gt;
&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/blue-ocean-girl.png&quot; alt=&quot;blue ocean girl&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;after-dark-reception-sponsored-by-cloudbees&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#after-dark-reception-sponsored-by-cloudbees&quot;&gt;&lt;/a&gt;After Dark Reception Sponsored by CloudBees&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/patrons/cloudbees.png&quot; alt=&quot;cloudbees&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After Dark reception will be from 6-8pm on Wed Sept 14 in the Partner Expo.
Enjoy cocktails, appetizers, mingle, and dance to a live band. A big &lt;strong&gt;THANK
YOU&lt;/strong&gt;
goes out to CloudBees for their generous contributions! See you at After Dark!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributor-summit-tuesday-september-13&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributor-summit-tuesday-september-13&quot;&gt;&lt;/a&gt;Contributor Summit - Tuesday, September 13&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Blue Ocean, Pipeline and Storage Pluggability sounds interesting to you,
join the interactive discussions surrounding these topics. The Jenkins project
is also looking to hear use-cases, war stories, and pain points. The objective
of the summit is to work towards improving the Jeknins project.
&lt;a href=&quot;https://www.meetup.com/jenkinsmeetup/events/232811529/&quot;&gt;Seats are limited&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don’t forget to &lt;a href=&quot;http://www.cvent.com/d/mfq3kd&quot;&gt;register&lt;/a&gt;; I look forward to
seeing you at the conference!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World 2016&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#acknowledgements&quot;&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Special thanks to &lt;a href=&quot;https://www.cloudbees.com&quot;&gt;CloudBees&lt;/a&gt; as the premier
sponsor and &lt;a href=&quot;https://www.cloudbees.com/juc/sponsors&quot;&gt;BlazeMeter, Microsoft, Red
Hat and all the other sponsors&lt;/a&gt; who have made this event possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/22/ewm-stable-release/</id>
<title>GSoC: External Workspace Manager for Pipeline is released</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-22T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/22/ewm-stable-release/" />
<author>
<name>alexsomai</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="external-workspace-manager"></category>
<category term="gsoc"></category>
<summary>
This blog post is the last one from the series of
Google Summer of Code 2016, External Workspace Manager Plugin project.
The previous posts are:




Introductory blog post


Alpha release announcement


Beta release announcement




In this post I would like to announce the 1.0.0 release of the External Workspace Manager Plugin version to the main
update center.


Here&#8217;s a highlight of the available features:




Workspace share and reuse across multiple jobs, running on different nodes


Automatic workspace cleanup


Provide custom workspace path on the disk


Disk Pool restrictions


Flexible Disk allocation strategies




All the above are detailed, with usage examples, on the plugin&#8217;s
documentation page.


Future work

Currently, there is work in progress for the workspace browsing...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post is the last one from the series of
&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code&lt;/a&gt; 2016, External Workspace Manager Plugin project.
The previous posts are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin/&quot;&gt;Introductory blog post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/06/30/ewm-alpha-version/&quot;&gt;Alpha release announcement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/08/09/ewm-beta-version/&quot;&gt;Beta release announcement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post I would like to announce the 1.0.0 release of the External Workspace Manager Plugin version to the main
update center.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s a highlight of the available features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Workspace share and reuse across multiple jobs, running on different nodes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic workspace cleanup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide custom workspace path on the disk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disk Pool restrictions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible Disk allocation strategies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the above are detailed, with usage examples, on the plugin’s
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/README.md&quot;&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;future-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-work&quot;&gt;&lt;/a&gt;Future work&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, there is work in progress for the &lt;em&gt;workspace browsing&lt;/em&gt; feature (see pull request
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/pull/37&quot;&gt;#37&lt;/a&gt;).
Afterwards, I’m planning to integrate fingerprints, so that the user can view a specific workspace in which
other jobs was used.
A particular feature that would be nice to have is to integrate the plugin with at least one disk provider
(e.g. Amazon EBS, Google Cloud Storage).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many other features and improvements are still to come, they are grouped in the phase 3 EPIC:
&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-37543&quot;&gt;JENKINS-37543&lt;/a&gt;.
The plugin’s repository is on &lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;GitHub&lt;/a&gt;.
If you’d like to come up with new features or ideas, contributions are very welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;closing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#closing&quot;&gt;&lt;/a&gt;Closing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was a Google Summer of Code 2016 project.
A summary of the contributions that I’ve made to the Jenkins project during this time may be found
&lt;a href=&quot;https://alexsomai.github.io/gsoc-2016/&quot;&gt;here&lt;/a&gt;.
It was a great experience, from which I learned a lot, and I’d wish I could repeat it every year.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d like to thank to my mentors, &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg Nenashev&lt;/a&gt; and
&lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin d’Anjou&lt;/a&gt; for all their support, good advices and help they gave me.
Also, thanks to the Jenkins contributors with which I have interacted and helped me during this period.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter
&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin&quot;&gt;chat&lt;/a&gt;.
Any feedback is welcome, and you may provide it either on the Gitter chat, or on
&lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;Jira&lt;/a&gt; by using the &lt;em&gt;external-workspace-manager-plugin&lt;/em&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/jenkinsci/external-workspace-manager-plugin.svg&quot; alt=&quot;title: &quot; Gitter=&quot;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;Project repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://alexsomai.github.io/gsoc-2016/&quot;&gt;Work product page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc/&quot;&gt;Jenkins GSoC Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/17/jenkins-world-speaker-blog-aquilent/</id>
<title>Continuously Delivering Continuous Delivery Pipelines</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-17T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/17/jenkins-world-speaker-blog-aquilent/" />
<author>
<name>hinman</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by Jenkins World speaker Neil Hunt, Senior DevOps Architect at Aquilent.





In smaller companies with a handful of apps and fewer silos, implementing CD
pipelines to support these apps is fairly straightforward using one of the many
delivery orchestration tools available today. There is likely a constrained
tool set to support - not an abundance of flavors of applications and security
practices - and generally fewer cooks in the kitchen. But in a larger
organization, I have found that in the past, there were seemingly endless
unique requirements and mountains to climb to reach this level of automation on
each new project.









Neil will...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Jenkins World speaker Neil Hunt, Senior DevOps Architect at &lt;a href=&quot;http://www.aquilent.com/&quot;&gt;Aquilent&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In smaller companies with a handful of apps and fewer silos, implementing CD
pipelines to support these apps is fairly straightforward using one of the many
delivery orchestration tools available today. There is likely a constrained
tool set to support - not an abundance of flavors of applications and security
practices - and generally fewer cooks in the kitchen. But in a larger
organization, I have found that in the past, there were seemingly endless
unique requirements and mountains to climb to reach this level of automation on
each new project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Neil will be &lt;a href=&quot;https://www.cloudbees.com/lightning-talks&quot;&gt;presenting&lt;/a&gt; more
of this concept at &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September, register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enter the Jenkins Pipeline plugin. My recently departed former company, a large
financial services organization with a 600+ person IT organization and 150+
application portfolio, set out to implement continuous delivery
enterprise-wide. After considering several pipeline orchestration tools, we
determined the Pipeline plugin (at the time called Workflow) to be the superior
solution for our company. Pipeline has continued Jenkins' legacy of presenting
an extensible platform with just the right set of features to allow
organizations to scale its capabilities as they see fit, and do so rapidly. As
early adopters of Pipeline with a protracted set of requirements, we used it
both to accelerate the pace of onboarding new projects and to reduce the
ongoing feature delivery time of our applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my presentation at Jenkins World, I will demonstrate the methods we used to
enable this. A few examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We leveraged the Pipeline Remote File Loader plugin to write shared common
code and sought and received community enhancements to these functions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-aquient/jw-speaker-blog-aquilent-1-1.png&quot; alt=&quot;jw speaker blog aquilent 1 1&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Jenkinsfile, loading a shared AWS utilities function library&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-aquient/jw-speaker-blog-aquilent-2.png&quot; alt=&quot;jw speaker blog aquilent 2&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;awsUtils.groovy, snippets of some AWS functions&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We migrated from EC2 agents to Docker-based agents running on Amazon’s
Elastic Container Service, allowing us to spin up new executors in seconds
and for teams to own their own executor definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-aquient/jw-speaker-blog-aquilent-3.png&quot; alt=&quot;jw speaker blog aquilent 3&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pipeline run #1 using standard EC2 executors, spinning up EC2 instance for each
node; Pipeline run #2 using shared ECS cluster with near-instant instantiation
of a Docker slave in the cluster for each node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We also created a Pipeline Library of common pipelines, enabling projects
that fit certain models to use ready-made end-to-end pipelines. Some
examples:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maven JAR Pipeline: Pipeline that clones git repository, builds JAR file
from pom.xml, deploys to Artifactory, and runs maven release plugin to
increment next version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anuglar.JS Pipeline: Pipeline that executes a grunt and bower build, then
runs S3 sync to Amazon S3 bucket in Dev, then Stage, then Prod buckets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pentaho Reports Pipeline: Pipeline that clones git repository, constructs
zip file, and executes Pentaho Business Intelligence Platform CLI to import new
set of reports in Dev, Stage, then Prod servers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Perhaps most critically, a shout-out to the saving grace of this quest for our
security and ops teams: the manual &lt;em&gt;input&lt;/em&gt; step! While the ambition of
continuous delivery is to have as few of these as possible, this was the
single-most pivotal feature in convincing others of Pipeline’s viability, since
now any step of the delivery process could be gate-checked by an LDAP-enabled
permission group. Were it not for the availability of this step, we may still
be living in the world of: &quot;This seems like a great tool for development, but
we will have a segregated process for production deployments.&quot; Instead, we had
a pipeline full of many &lt;em&gt;input&lt;/em&gt; steps at first, and then used the data we
collected around the longest delays to bring management focus to them and unite
everyone around the goal of strategically removing them, one by one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jw-speaker-blog-aquient/jw-speaker-blog-aquilent-4.png&quot; alt=&quot;jw speaker blog aquilent 4&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 125x125&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Going forward, having recently joined Aquilent’s Cloud Solutions Architecture
team, I’ll be working with our project teams here to further mature the use of
these Pipeline plugin features as we move towards continuous delivery. Already,
we have migrated several components of our healthcare.gov project to Pipeline.
The team has been able to consolidate several Jenkins jobs into a single,
visible delivery pipeline, to maintain the lifecycle of the pipeline with our
application code base in our SCM, and to more easily integrate with our
external tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Due to functional shortcomings in the early adoption stages of the Pipeline
plugin and the ever-present political challenges of shifting organizational
policy, this has been and continues to be far from a bruise-free journey. But
we plodded through many of these issues to bring this to fruition and
ultimately reduced the number of manual steps in some pipelines from 12 down to
1 and brought our 20+ Jenkins-minute pipelines to only six minutes after months
of iteration. I hope you’ll join this session at Jenkins World and learn about
our challenges and successes in achieving the promise of continuous delivery at
enterprise scale.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/11/speaker-blog-edx-jenkins-world/</id>
<title>Using Jenkins for Disparate Feedback on GitHub</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-11T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/11/speaker-blog-edx-jenkins-world/" />
<author>
<name>hinman</name>
</author>
<category term="event"></category>
<category term="JenkinsWorld"></category>
<summary>
This is a guest post by Ben Patterson, Engineering Manager at
edX.





Picking a pear from a basket is straightforward when you can hold it in your hand, feel its weight, perhaps give a gentle squeeze, observe its color and look more closely at any bruises. If the only information we had was a photograph from one angle, we’d have to do some educated guessing. 


As developers, we don’t get a photograph; we get a green checkmark or a red x. We use that to decide whether or not we need to switch gears and go back to a pull request we...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by Ben Patterson, Engineering Manager at
&lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Picking a pear from a basket is straightforward when you can hold it in your hand, feel its weight, perhaps give a gentle squeeze, observe its color and look more closely at any bruises. If the only information we had was a photograph from one angle, we’d have to do some educated guessing. &lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/1pear.png&quot; alt=&quot;1pear&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As developers, we don’t get a photograph; we get a green checkmark or a red x. We use that to decide whether or not we need to switch gears and go back to a pull request we submitted recently. At edX, we take advantage of some Jenkins features that could give us more granularity on GitHub pull requests, and make that decision less of a guessing game.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/5pears.png&quot; alt=&quot;5pears&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;multiple-contexts-reporting-back-when-they-re-available&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multiple-contexts-reporting-back-when-they-re-available&quot;&gt;&lt;/a&gt;Multiple contexts reporting back when they’re available&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pull requests on our platform are evaluated from several angles: static code analysis including linting and security audits, javascript unit tests, python unit tests, acceptance tests and accessibility tests. Using an elixir of plugins, including the GitHub Pull Request Builder Plugin, we put more direct feedback into the hands of the contributor so s/he can quickly decide how much digging is going to be needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if I made adjustments to my branch and know more requirements are coming, then I may not be as worried about passing the linter; however, if my unit tests have failed, I likely have a problem I need to address regardless of when the new requirements arrive. Timing is important as well. Splitting out the contexts means we can run tests in parallel and report results faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;developers-can-re-run-specific-contexts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#developers-can-re-run-specific-contexts&quot;&gt;&lt;/a&gt;Developers can re-run specific contexts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/jenkins-run-python.png&quot; alt=&quot;jenkins run python&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Occasionally the feedback mechanism fails. It is oftentimes a flaky condition in a test or in test setup. (Solving flakiness is a different discussion I’m sidestepping. Accept the fact that the system fails for purposes of this blog entry.) Engineers are armed with the power of re-running specific contexts, also available through the PR plugin. A developer can say “jenkins run bokchoy” to re-run the acceptance tests, for example. A developer can also re-run everything with “jenkins run all”. These phrases are set through the GitHub Pull Request Builder configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;more-granular-data-is-easier-to-find-for-our-tools-team&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-granular-data-is-easier-to-find-for-our-tools-team&quot;&gt;&lt;/a&gt;More granular data is easier to find for our Tools team&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Splitting the contexts has also given us important data points for our Tools team to help in highlighting things like flaky tests, time to feedback and other metrics that help the org prioritize what’s important. We use this with a log aggregator (in our case, Splunk) to produce valuable reports such as this one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/95th-percentile.png&quot; alt=&quot;95th percentile&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could go on! The short answer here is we have an intuitive way of divvying up our tests, not only for optimizing the overall amount of time it takes to get build results, but also to make the experience more user-friendly to developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ben will be &lt;a href=&quot;https://www.cloudbees.com/using-jenkins-diverse-feedback-github&quot;&gt;presenting&lt;/a&gt; more on this topic at
&lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in September,
register with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/10/rails-cd-with-pipeline/</id>
<title>Continuous Security for Rails apps with Pipeline and Brakeman</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-10T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/10/rails-cd-with-pipeline/" />
<author>
<name>rtyler</name>
</author>
<category term="tutorial"></category>
<category term="ruby"></category>
<category term="pipeline"></category>
<category term="rails"></category>
<category term="brakeman"></category>
<category term="continuousdelivery"></category>
<summary>
This is a guest post by R. Tyler Croy, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
CloudBees, Inc.






When the Ruby on Rails framework debuted it
changed the industry in two noteworthy ways: it created a trend of opinionated web
application frameworks (Django,
Play, Grails) and it
also strongly encouraged thousands of developers to embrace test-driven
development along with many other modern best practices (source control, dependency
management, etc). Because Ruby, the language underneath Rails, is interpreted
instead of compiled there isn&#8217;t a "build" per se but rather tens, if not
hundreds, of tests, linters and scans...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https;//github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;a href=&quot;http://rubyonrails.org&quot;&gt;Ruby on Rails&lt;/a&gt; framework debuted it
changed the industry in two noteworthy ways: it created a trend of opinionated web
application frameworks (&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;,
&lt;a href=&quot;https://playframework.com/&quot;&gt;Play&lt;/a&gt;, &lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt;) and it
also &lt;em&gt;strongly&lt;/em&gt; encouraged thousands of developers to embrace test-driven
development along with many other modern best practices (source control, dependency
management, etc). Because Ruby, the language underneath Rails, is interpreted
instead of compiled there isn’t a &quot;build&quot; per se but rather tens, if not
hundreds, of tests, linters and scans which are run to ensure the application’s
quality. With the rise in popularity of Rails, the popularity of application
hosting services with easy-to-use deployment tools like &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt; or
&lt;a href=&quot;http://engineyard.com&quot;&gt;Engine Yard&lt;/a&gt; rose too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This combination of good &lt;strong&gt;test coverage&lt;/strong&gt; and easily &lt;strong&gt;automated deployments&lt;/strong&gt;
makes Rails easy to continuously deliver with Jenkins. In this post we’ll cover
testing non-trivial Rails applications with &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Jenkins
Pipeline&lt;/a&gt; and, as an added bonus, we will add security scanning via
&lt;a href=&quot;http://brakemanscanner.org&quot;&gt;Brakeman&lt;/a&gt; and the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;Brakeman
plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ruby-pipeline-2016/cfpapp-stage-view.png&quot; alt=&quot;cfpapp stage view&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Topics&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#preparing-the-app&quot;&gt;Preparing the app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#preparing-jenkins&quot;&gt;Preparing Jenkins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#writing-the-pipeline&quot;&gt;Writing the Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#security-scanning&quot;&gt;Security scanning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#deploying-the-good-stuff&quot;&gt;Deploying the good stuff&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#wrap-up&quot;&gt;Wrap up&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this demonstration, I used &lt;a href=&quot;http://rubycentral.org/&quot;&gt;Ruby Central&lt;/a&gt;'s
&lt;a href=&quot;https://github.com/rubycentral/cfp-app&quot;&gt;cfp-app&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Ruby on Rails application that lets you manage your conference’s call for
proposal (CFP), program and schedule. It was written by Ruby Central to run the
CFPs for RailsConf and RubyConf.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I chose this Rails app, not only because it’s a sizable application with lots
of tests, but it’s actually the application we used to collect talk proposals
for the &quot;&lt;a href=&quot;https://www.cloudbees.com/juc/agenda&quot;&gt;Community Tracks&lt;/a&gt;&quot; at this
year’s &lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt;. For the most part,
cfp-app is a standard Rails application. It uses
&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; for its database,
&lt;a href=&quot;http://rspec.info&quot;&gt;RSpec&lt;/a&gt; for its tests and
&lt;a href=&quot;http://ruby-lang.org&quot;&gt;Ruby 2.3.x&lt;/a&gt; as its runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you prefer to just to look at the code, skip straight to the
&lt;a href=&quot;https://github.com/rtyler/cfp-app/blob/aff11d97b460ca4b630b1fa4f669c226aeadd8ae/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparing-the-app&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparing-the-app&quot;&gt;&lt;/a&gt;Preparing the app&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For &lt;em&gt;most&lt;/em&gt; Rails applications there are few, if any, changes needed to enable
continuous delivery with Jenkins. In the case of
&lt;a href=&quot;https://github.com/rubycentral/cfp-app&quot;&gt;cfp-app&lt;/a&gt;, I added two gems to get
the most optimal integration into Jenkins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ci-reporter/ci_reporter&quot;&gt;ci_reporter&lt;/a&gt;, for test report
integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/presidentbeef/brakeman&quot;&gt;brakeman&lt;/a&gt;, for security scanning.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Adding these was simple, I just needed to update the &lt;code&gt;Gemfile&lt;/code&gt; and the
&lt;code&gt;Rakefile&lt;/code&gt; in the root of the repository to contain:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Gemfile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;# .. snip ..&lt;/span&gt;
group &lt;span style=&quot;color:#A60&quot;&gt;:test&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;# RSpec, etc&lt;/span&gt;
  gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ci_reporter&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ci_reporter_rspec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  gem &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;brakeman&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#A60&quot;&gt;:require&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Rakefile&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;# .. snip ..&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ci/reporter/rake/rspec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;# Make sure we setup ci_reporter before executing our RSpec examples&lt;/span&gt;
task &lt;span style=&quot;color:#A60&quot;&gt;:spec&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ci:setup:rspec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparing-jenkins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#preparing-jenkins&quot;&gt;&lt;/a&gt;Preparing Jenkins&lt;/h3&gt;
&lt;div id=&quot;plugins&quot; class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the cfp-app project set up, next on the list is to ensure that Jenkins itself
is ready. Generally I suggest running the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/changelog-stable&quot;&gt;latest LTS&lt;/a&gt; of
Jenkins; for this demonstration I used Jenkins 2.7.1 with the following
plugins:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&quot;&gt;Pipeline plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;Brakeman plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Pipeline+Plugin&quot;&gt;CloudBees
Docker Pipeline plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also used the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Organization+Folder+Plugin&quot;&gt;GitHub
Organization Folder plugin&lt;/a&gt; to automatically create pipeline items in my
Jenkins instance; that isn’t required for the demo, but it’s pretty cool to see
repositories and branches with a &lt;code&gt;Jenkinsfile&lt;/code&gt; automatically show up in
Jenkins, so I recommend it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the &lt;a href=&quot;#plugins&quot;&gt;plugins&lt;/a&gt; listed above, I also needed at least &lt;em&gt;one&lt;/em&gt;
Jenkins agent with the &lt;a href=&quot;https://docker.io&quot;&gt;Docker&lt;/a&gt; daemon installed and
running on it. I label these agents with &quot;docker&quot; to make it easier to assign
Docker-based workloads to them in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Any Linux-based machine with Docker installed will work, in my case I was
provisioning on-demand agents with the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Azure+Slave+plugin&quot;&gt;Azure
plugin&lt;/a&gt; which, like the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin&quot;&gt;EC2 plugin&lt;/a&gt;,
helps keep my test costs down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you’re using Amazon Web Services, you might also be interested in
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/06/10/save-costs-with-ec2-spot-fleet&quot;&gt;this blog post&lt;/a&gt; from
earlier this year unveiling the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Fleet+Plugin&quot;&gt;EC2
Fleet plugin&lt;/a&gt; for working with EC2 Spot Fleets.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;writing-the-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#writing-the-pipeline&quot;&gt;&lt;/a&gt;Writing the Pipeline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make sense of the various things that the &lt;code&gt;Jenkinsfile&lt;/code&gt; needs to do, I find
it easier to start by simply defining the stages of my pipeline. This helps me
think of, in broad terms, what order of operations my pipeline should have.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;/* Assign our work to an agent labelled 'docker' */&lt;/span&gt;
node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare Container&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Install Gems&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare Database&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Invoke Rake&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Security scan&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned previously, this &lt;code&gt;Jenkinsfile&lt;/code&gt; is going to rely heavily on the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Pipeline+Plugin&quot;&gt;CloudBees
Docker Pipeline plugin&lt;/a&gt;. The plugin provides two very important features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Ability to execute steps &lt;em&gt;inside&lt;/em&gt; of a running Docker container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to run a container in the &quot;background.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like most Rails applications, one can effectively test the application with two
commands: &lt;code&gt;bundle install&lt;/code&gt; followed by &lt;code&gt;bundle exec rake&lt;/code&gt;. I already had some
Docker images prepared with &lt;a href=&quot;http://rvm.io&quot;&gt;RVM&lt;/a&gt; and Ruby 2.3.0 installed,
which ensures a common and consistent starting point:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;// .. 'stage' steps removed&lt;/span&gt;
    docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rtyler/rvm:2.3.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).inside { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        rvm &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        rvm &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    } &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the named container. The &lt;code&gt;inside&lt;/code&gt; method can take optional additional flags for the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Execute our shell commands using our tiny &lt;code&gt;sh&lt;/code&gt; step wrapper
&lt;a href=&quot;https://github.com/rtyler/cfp-app/blob/aff11d97b460ca4b630b1fa4f669c226aeadd8ae/Jenkinsfile#L86-L91&quot;&gt;&lt;code&gt;rvm&lt;/code&gt;&lt;/a&gt;. This ensures that the shell code is executed in the correct RVM environment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the closure completes, the container will be destroyed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, with this application, the &lt;code&gt;bundle exec rake&lt;/code&gt; command will fail
if PostgreSQL isn’t available when the process starts. This is where the
&lt;em&gt;second&lt;/em&gt; important feature of the CloudBees Docker Pipeline plugin comes
into effect: the ability to run a container in the &quot;background.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;// .. 'stage' steps removed&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* Pull the latest `postgres` container and run it in the background */&lt;/span&gt;
    docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;postgres&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).withRun { container -&amp;gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        echo &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PostgreSQL running in container &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;container.id&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    } &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the container, effectively &lt;code&gt;docker run postgres&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Any number of steps can go inside the closure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;When the closure completes, the container will be destroyed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;running-the-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#running-the-tests&quot;&gt;&lt;/a&gt;Running the tests&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Combining these two snippets of Jenkins Pipeline is, in my opinion, where the
power of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;DSL&lt;/a&gt;
shines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;postgres&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).withRun { container -&amp;gt;
        docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rtyler/rvm:2.3.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).inside(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;--link=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;container.id&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:postgres&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Install Gems&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            rvm &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Invoke Rake&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            withEnv([&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DATABASE_URL=postgres://postgres@postgres:5432/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                rvm &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
            }
            junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;spec/reports/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;By passing the &lt;code&gt;--link&lt;/code&gt; argument, the Docker daemon will allow the RVM container to talk to the PostgreSQL container under the host name &lt;em&gt;postgres&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use the &lt;code&gt;withEnv&lt;/code&gt; step to set environment variables for everything that is in the closure. In this case, the cfp-app DB scaffolding will look for the &lt;code&gt;DATABASE_URL&lt;/code&gt; variable to override the DB host/user/dbname defaults.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Archive the test reports generated by &lt;a href=&quot;https://github.com/ci-reporter/ci_reporter&quot;&gt;ci_reporter&lt;/a&gt; so that Jenkins can display test reports and trend analysis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ruby-pipeline-2016/cfpapp-tests.png&quot; alt=&quot;cfpapp tests&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this done, the basics are in place to consistently run the tests for
cfp-app in fresh Docker containers for each execution of the pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-scanning&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-scanning&quot;&gt;&lt;/a&gt;Security scanning&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;a href=&quot;http://brakemanscanner.org&quot;&gt;Brakeman&lt;/a&gt;, the security scanner for Ruby
on Rails, is almost trivially easy inside of Jenkins Pipeline, thanks to the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;Brakeman
plugin&lt;/a&gt; which implements the &lt;code&gt;publishBrakeman&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building off our example above, we can implement the &quot;Security scan&quot; stage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* --8&amp;lt;--8&amp;lt;-- snipsnip --8&amp;lt;--8&amp;lt;-- */&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Security scan&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    rvm &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;brakeman -o brakeman-output.tabs --no-progress --separate-models&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    publishBrakeman &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;brakeman-output.tabs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* --8&amp;lt;--8&amp;lt;-- snipsnip --8&amp;lt;--8&amp;lt;-- */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Run the &lt;a href=&quot;http://brakemanscanner.org&quot;&gt;Brakeman&lt;/a&gt; security scanner for Rails and store the output for later in &lt;code&gt;brakeman-output.tabs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Archive the reports generated by Brakeman so that Jenkins can display detailed reports with trend analysis.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ruby-pipeline-2016/cfpapp-brakeman.png&quot; alt=&quot;cfpapp brakeman&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As of this writing, there is work in progress
(&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-31202&quot;&gt;JENKINS-31202&lt;/a&gt;) to
render trend graphs from plugins like Brakeman on a pipeline project’s main
page.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;deploying-the-good-stuff&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#deploying-the-good-stuff&quot;&gt;&lt;/a&gt;Deploying the good stuff&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the tests and security scanning are all working properly, we can start to
set up the deployment stage. Jenkins Pipeline provides the variable
&lt;code&gt;currentBuild&lt;/code&gt; which we can use to determine whether our pipeline has been
successful thus far or not. This allows us to add the logic to only deploy when
everything is passing, as we would expect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* --8&amp;lt;--8&amp;lt;-- snipsnip --8&amp;lt;--8&amp;lt;-- */&lt;/span&gt;
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Deploy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (currentBuild.result == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESS&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./deploy.sh&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
        mail &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Something is wrong with &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_ID&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                  &lt;span style=&quot;color:#606&quot;&gt;to&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;nobody@example.com&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
                &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;You should fix it&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
    &lt;span style=&quot;color:#777&quot;&gt;/* --8&amp;lt;--8&amp;lt;-- snipsnip --8&amp;lt;--8&amp;lt;-- */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;currentBuild&lt;/code&gt; has the &lt;code&gt;result&lt;/code&gt; property which would be &lt;code&gt;'SUCCESS'&lt;/code&gt;, &lt;code&gt;'FAILED'&lt;/code&gt;, &lt;code&gt;'UNSTABLE'&lt;/code&gt;, &lt;code&gt;'ABORTED'&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Only if &lt;code&gt;currentBuild.result&lt;/code&gt; is successful should we bother invoking our deployment script (e.g. &lt;code&gt;git push heroku master&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrap-up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have gratuitously commented the full
&lt;a href=&quot;https://github.com/rtyler/cfp-app/blob/0e85db6d054deefd637de235766468631f551c7f/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;
which I hope is a useful summation of the work outlined above. Having worked
on a number of Rails applications in the past, the consistency provided by
Docker and Jenkins Pipeline above would have definitely improved those
projects' delivery times. There is still room for improvement however, which
is left as an exercise for the reader. Such as: preparing new containers with
all their
&lt;a href=&quot;https://github.com/rtyler/cfp-app/blob/0e85db6d054deefd637de235766468631f551c7f/Jenkinsfile#L36-L46&quot;&gt;dependencies
built-in&lt;/a&gt; instead of installing them at run-time. Or utilizing the &lt;code&gt;parallel&lt;/code&gt;
step for executing RSpec across multiple Jenkins agents simultaneously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The beautiful thing about defining your continuous delivery, and continuous
security, pipeline in code is that you can continue to iterate on it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://github.com/rtyler/cfp-app/blob/0e85db6d054deefd637de235766468631f551c7f/Jenkinsfile&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ruby-pipeline-2016/cfpapp-stage-view.png&quot; alt=&quot;cfpapp stage view&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/09/ewm-beta-version/</id>
<title>GSoC: External Workspace Manager for Pipeline. Beta release is available</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-09T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/09/ewm-beta-version/" />
<author>
<name>alexsomai</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="external-workspace-manager"></category>
<category term="gsoc"></category>
<summary>
This blog post is a continuation of the External Workspace Manager Plugin related posts, starting with
the introductory blog post, and followed by
the alpha version release announcement.


As the title suggests, the beta version of the External Workspace Manager Plugin was launched!
This means that it&#8217;s available only in the
Experimental Plugins Update Center.








Take care when installing plugins from the Experimental Update Center, since they may change in
backward-incompatible ways.
It&#8217;s advisable not to use it for Jenkins production environments.





The plugin&#8217;s repository is on GitHub.
The complete plugin&#8217;s documentation can be accessed
here.


What&#8217;s new

Bellow is a summary of the features added so far, since the alpha version.


Multiple upstream...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post is a continuation of the External Workspace Manager Plugin related posts, starting with
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin/&quot;&gt;the introductory blog post&lt;/a&gt;, and followed by
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/06/30/ewm-alpha-version/&quot;&gt;the alpha version release announcement&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the title suggests, the beta version of the External Workspace Manager Plugin was launched!
This means that it’s available only in the
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2013/09/23/experimental-plugins-update-center/&quot;&gt;Experimental Plugins Update Center&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Take care when installing plugins from the Experimental Update Center, since they may change in
backward-incompatible ways.
It’s advisable not to use it for Jenkins production environments.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin’s repository is on &lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;GitHub&lt;/a&gt;.
The complete plugin’s documentation can be accessed
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-s-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-new&quot;&gt;&lt;/a&gt;What’s new&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bellow is a summary of the features added so far, since the alpha version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;multiple-upstream-run-selection-strategies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#multiple-upstream-run-selection-strategies&quot;&gt;&lt;/a&gt;Multiple upstream run selection strategies&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has support for the
&lt;a href=&quot;https://github.com/jenkinsci/run-selector-plugin&quot;&gt;Run Selector Plugin&lt;/a&gt; (which is still in beta),
so you can provide different run selection strategies when allocating a disk from the upstream job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s suppose that we have an upstream job that clones the repository and builds the project:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;diskpool1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

node (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    exws (extWorkspace) {
        checkout scm
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install -DskipTests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the downstream job, we run the tests on a different node, but we reuse the same workspace as the previous job:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; run = selectRun &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;upstream&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;color:#606&quot;&gt;selectedRun&lt;/span&gt;: run

node (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    exws (extWorkspace) {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;selectRun&lt;/code&gt; in this example selects the last stable build from the upstream job.
But, we can be more explicit, and select a specific build number from the upstream job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; run = selectRun &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;upstream&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
 &lt;span style=&quot;color:#606&quot;&gt;selector&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SpecificRunSelector&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;buildNumber&lt;/span&gt;: UPSTREAM_BUILD_NUMBER]
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;color:#606&quot;&gt;selectedRun&lt;/span&gt;: run
&lt;span style=&quot;color:#777&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the &lt;code&gt;selectedRun&lt;/code&gt; parameter is given to the &lt;code&gt;exwsAllocate&lt;/code&gt; step, it will allocate the same workspace that was
used by that run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Run Selector Plugin has several run selection strategies that are briefly explained
&lt;a href=&quot;https://github.com/jenkinsci/run-selector-plugin/blob/master/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;automatic-workspace-cleanup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#automatic-workspace-cleanup&quot;&gt;&lt;/a&gt;Automatic workspace cleanup&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Provides an automatic workspace cleanup by integrating the
&lt;a href=&quot;https://github.com/jenkinsci/ws-cleanup-plugin&quot;&gt;Workspace Cleanup Plugin&lt;/a&gt;.
For example, if we need to delete the workspace only if the build has failed, we can do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;color:#606&quot;&gt;diskPoolId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;diskpool1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

node (&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;linux&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    exws (extWorkspace) {
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
            checkout scm
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mvn clean install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (e) {
            currentBuild.result = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILURE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;throw&lt;/span&gt; e
        } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt; {
            step ([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;WsCleanup&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;cleanWhenFailure&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;])
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More workspace cleanup examples can be found at this
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/doc/WORKSPACE_CLEANUP.md&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;custom-workspace-path&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#custom-workspace-path&quot;&gt;&lt;/a&gt;Custom workspace path&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allows the user to specify a custom workspace path to be used when allocating workspace on the disk.
The plugin offers two alternatives for doing this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by defining a global workspace template for each Disk Pool&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be defined in the Jenkins global config, &lt;em&gt;External Workspace Definitions&lt;/em&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ewm/global-custom-workspace-path.png&quot; alt=&quot;global custom workspace path&quot; title=&quot;Global Custom Workspace Path&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by defining a custom workspace path in the Pipeline script&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can use the Pipeline DSL to compute the workspace path.
Then we pass this path as input parameter to the &lt;code&gt;exwsAllocate&lt;/code&gt; step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; customPath = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;PULL_REQUEST_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;color:#606&quot;&gt;diskPoolId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;diskpool1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;path&lt;/span&gt;: customPath
&lt;span style=&quot;color:#777&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details see the afferent
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/doc/CUSTOM_WORKSPACE_PATH.md&quot;&gt;documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;disk-pool-restrictions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#disk-pool-restrictions&quot;&gt;&lt;/a&gt;Disk Pool restrictions&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin comes with Disk Pool restriction strategies.
It does this by using the restriction capabilities provided by the
&lt;a href=&quot;https://github.com/jenkinsci/job-restrictions-plugin&quot;&gt;Job Restrictions Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, we can restrict a Disk Pool to be allocated only if the Jenkins job in which it’s allocated was triggered
by a specific user:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ewm/restriction-by-user.png&quot; alt=&quot;restriction by user&quot; title=&quot;Disk Pool Restriction By User&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or, we can restrict the Disk Pool to be allocated only for those jobs whose name matches a well defined pattern:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ewm/restriction-by-job-name.png&quot; alt=&quot;restriction by job name&quot; title=&quot;Disk Pool Restriction By Job Name&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-next&quot;&gt;&lt;/a&gt;What’s next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently there is ongoing work for providing flexible disk allocation strategies.
The user will be able to define a default disk allocation strategy in the Jenkins global config.
So for example, we want to select the disk with the most usable space as default allocation strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image center&quot;&gt;&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/ewm/global-disk-allocation-strategy.png&quot; alt=&quot;global disk allocation strategy&quot; title=&quot;Global Disk Allocation Strategy&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If needed, this allocation strategy may be overridden in the Pipeline code.
Let’s suppose that for a specific job, we want to allocate the disk with the highest read speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; extWorkspace = exwsAllocate &lt;span style=&quot;color:#606&quot;&gt;diskPoolId&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;diskpool1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;strategy&lt;/span&gt;: fastestRead()
&lt;span style=&quot;color:#777&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When this feature is completed, the plugin will enter a final testing phase.
If all goes to plan, a stable version should be released in about two weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter
&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin&quot;&gt;chat&lt;/a&gt;.
Any feedback is welcome, and you may provide it either on the Gitter chat, or on
&lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;Jira&lt;/a&gt; by using the &lt;em&gt;external-workspace-manager-plugin&lt;/em&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/jenkinsci/external-workspace-manager-plugin.svg&quot; alt=&quot;title: &quot; Gitter=&quot;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;Project repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin/&quot;&gt;Project intro blog post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/blog/2016/06/30/ewm-alpha-version/&quot;&gt;Alpha version announcement&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/&quot;&gt;Jenkins GSoC Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/08/docker-pipeline-environments/</id>
<title>Don't install software, define your environment with Docker and Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-08T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/08/docker-pipeline-environments/" />
<author>
<name>michaelneale</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="blueocean"></category>
<category term="ux"></category>
<category term="javascript"></category>
<category term="nodejs"></category>
<summary>
This is a guest post by Michael Neale, long time open
source developer and contributor to the Blue Ocean
project.






If you are running parts of your pipeline on Linux, possibly the easiest way to
get a clean reusable environment is to use:
CloudBees
Docker Pipeline plugin.


In this short post I wanted to show how you can avoid installing stuff on the agents, and have per project, or even per branch, customized build environments.
Your environment, as well as your pipeline is defined and versioned alongside your code.


I wanted to use the Blue Ocean project as an
example of a
project that uses the CloudBees Docker Pipeline plugin.


Environment and...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https://github.com&quot;&gt;Michael Neale&lt;/a&gt;, long time open
source developer and contributor to the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;
project.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are running parts of your pipeline on Linux, possibly the easiest way to
get a clean reusable environment is to use:
&lt;a href=&quot;https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/chapter-docker-workflow.html&quot;&gt;CloudBees
Docker Pipeline plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this short post I wanted to show how you can avoid installing stuff on the agents, and have per project, or even per branch, customized build environments.
Your environment, as well as your pipeline is defined and versioned alongside your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wanted to use the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; project as an
&lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language/&quot;&gt;example&lt;/a&gt; of a
project that uses the CloudBees Docker Pipeline plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;environment-and-pipeline-for-javascript-components&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#environment-and-pipeline-for-javascript-components&quot;&gt;&lt;/a&gt;Environment and Pipeline for JavaScript components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt; project has a few moving parts, one of
which is called the &quot;Jenkins Design Language&quot;.  This is a grab bag of re-usable
CSS, HTML, style rules, icons and JavaScript components (using React.js) that
provide the look and feel for Blue Ocean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JavaScript and Web Development being what it is in 2016, many utilities are
need to assemble a web app.  This includes npm and all that it needs, less.js
to convert Less to CSS, Babel to &quot;transpile&quot; versions of JavaScript to other
types of JavaScript (don’t ask) and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could spend time installling nodejs/npm on the agents, but why not just use
the &lt;a href=&quot;https://hub.docker.com/_/node/&quot;&gt;official off the shelf&lt;/a&gt; docker image
from &lt;a href=&quot;http://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only thing that has to be installed and run on the build agents is the Jenkins agent, and a docker daemon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple pipeline using this approach would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
        stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare environment&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          checkout scm
          docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;node&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).inside {
            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Checkout and build deps&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test and validate&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install gulp-cli &amp;amp;&amp;amp; ./node_modules/.bin/gulp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
          }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This uses the stock &quot;official&quot; Node.js image from the Docker Hub, but doesn’t let us customize much about the environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;customising-the-environment-without-installing-bits-on-the-agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#customising-the-environment-without-installing-bits-on-the-agent&quot;&gt;&lt;/a&gt;Customising the environment, without installing bits on the agent&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being the forward looking and lazy person that I am, I didn’t want to have to
go and fish around for a Docker image every time a developer wanted something
special installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, I put a &lt;code&gt;Dockerfile&lt;/code&gt; in the root of the repo, alongside the &lt;code&gt;Jenkinsfile&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-03/environment_jenkinsfile.png&quot; alt=&quot;Environment&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The contents of the &lt;code&gt;Dockerfile&lt;/code&gt; can then define the exact environment needed
to build the project.  Sure enough, shortly after this, someone came along
saying they wanted to use &lt;a href=&quot;https://flowtype.org/&quot;&gt;Flow&lt;/a&gt; from Facebook (A
typechecker for JavaScript).  This required an additional native component to
work (via &lt;code&gt;apt-get install&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was achieved via a
&lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language/pull/72/files&quot;&gt;pull
request&lt;/a&gt; to both the &lt;code&gt;Jenkinsfile&lt;/code&gt; and the &lt;code&gt;Dockerfile&lt;/code&gt; at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now our environment is defined by a &lt;code&gt;Dockerfile&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;# Lets not just use any old version but pick one
FROM node:5.11.1

# This is needed for flow, and the weirdos that built it in ocaml:
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y libelf1

RUN useradd jenkins --shell /bin/bash --create-home
USER jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Jenkinsfile&lt;/code&gt; pipeline now has the following contents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prepare environment&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        checkout scm
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; environment  = docker.build &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;cloudbees-node&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        environment.inside {
            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Checkout and build deps&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Validate types&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./node_modules/.bin/flow&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

            stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test and validate&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;npm install gulp-cli &amp;amp;&amp;amp; ./node_modules/.bin/gulp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
                junit &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;reports/**/*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
        }

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Cleanup&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        deleteDir()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Even hip JavaScript tools can emit that weird XML format that test
reporters can use, e.g. the junit result archiver.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main change is that we have &lt;code&gt;docker.build&lt;/code&gt; being called to produce the
&lt;code&gt;environment&lt;/code&gt; which is then used.  Running &lt;code&gt;docker build&lt;/code&gt; is essentially a
&quot;no-op&quot; if the image has already been built on the agent before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what-s-it-like-to-drive&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-s-it-like-to-drive&quot;&gt;&lt;/a&gt;What’s it like to drive?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, using Blue Ocean, to build Blue Ocean, yields a pipeline that visually
looks like this (a recent run I screen capped):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-08-03/JDL_pipeline.png&quot; alt=&quot;Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This creates a pipeline that developers can tweak on a pull-request basis,
along with any changes to the environment needed to support it, without having
to install any packages on the agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;why-not-use-docker-commands-directly&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#why-not-use-docker-commands-directly&quot;&gt;&lt;/a&gt;Why not use docker commands directly?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could of course just use shell commands to do things with Docker directly,
however, Jenkins Pipeline keeps track of Docker images used in a &lt;code&gt;Dockerfile&lt;/code&gt;
via the &quot;Docker Fingerprints&quot; link (which is good, should that image need to
change due to a security patch).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The project used as as an example is &lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The pipeline is defined by the &lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language/blob/master/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The environment is defined by the &lt;a href=&quot;https://github.com/jenkinsci/jenkins-design-language/blob/master/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Read more on &lt;a href=&quot;https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/chapter-docker-workflow.html&quot;&gt;Docker Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/08/03/st-petersburg-jam-3-4-report/</id>
<title>St. Petersburg Jenkins Meetup #3 and #4 Reports</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-08-03T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/08/03/st-petersburg-jam-3-4-report/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="jam"></category>
<category term="jenkins_ru"></category>
<summary>
I would like to write about two last Jenkins Meetups in Saint Petersburg, Russia.







Meetup #3. Jenkins Administration (May 20, 2016)


In May we had a meetup about Jenkins administration techniques.
At this meetup we were talking about common Jenkins ecosystem components
like custom update centers, tool repositories and generic jobs.


Talks:




Kirill Merkushev, Yandex, "Juseppe. A custom Update Center for Jenkins"



Presentation (rus)


Keywords: Juseppe





Anna Muravieva, EMC, "Generic jobs in Jenkins. How to build anything?"



Presentation (rus)


Keywords: Generic Builds, Scripted Build Wrappers





Oleg Nenashev, CloudBees, "Building Jenkins Tool infrastructures with help of Custom Tools Plugin and Docker"



Presentation (rus)


Keywords: Custom Tools Plugin, Extra Tool Installers Plugin, Docker









Meetup #4. IT Global...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to write about two last Jenkins Meetups in Saint Petersburg, Russia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/sites/default/files/images/stpetersburg-butler_0.jpeg&quot; alt=&quot;stpetersburg butler 0&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;meetup-3-jenkins-administration-may-20-2016&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meetup-3-jenkins-administration-may-20-2016&quot;&gt;&lt;/a&gt;Meetup #3. Jenkins Administration (May 20, 2016)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In May we had a meetup about Jenkins administration techniques.
At this meetup we were talking about common Jenkins ecosystem components
like custom update centers, tool repositories and generic jobs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Talks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kirill Merkushev&lt;/strong&gt;, Yandex, &quot;Juseppe. A custom Update Center for Jenkins&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/lanwen/juseppe&quot;&gt;Presentation&lt;/a&gt; (rus)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keywords: &lt;a href=&quot;https://github.com/yandex-qatools/juseppe&quot;&gt;Juseppe&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anna Muravieva&lt;/strong&gt;, EMC, &quot;Generic jobs in Jenkins. How to build anything?&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/anamura/generic-jobs-v-jenkins-ili-kak-sobrat-vsie-chto-ughodno&quot;&gt;Presentation&lt;/a&gt; (rus)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keywords: Generic Builds, Scripted Build Wrappers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Oleg Nenashev&lt;/strong&gt;, CloudBees, &quot;Building Jenkins Tool infrastructures with help of Custom Tools Plugin and Docker&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/onenashev/spb-jenkins-meetup-number-3-razviertyvaniie-tulovoi-infrastruktury-v-jenkins&quot;&gt;Presentation&lt;/a&gt; (rus)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keywords: &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Custom+Tools+Plugin&quot;&gt;Custom Tools Plugin&lt;/a&gt;, &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Extra+Tool+Installers+Plugin&quot;&gt;Extra Tool Installers Plugin&lt;/a&gt;, Docker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;meetup-4-it-global-meetup-july-23-2016&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meetup-4-it-global-meetup-july-23-2016&quot;&gt;&lt;/a&gt;Meetup #4. IT Global Meetup (July 23, 2016)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Saint Petersburg there is a regular gathering of local IT communities.
This &lt;a href=&quot;http://piter-united.ru/itgm8/itgm.html&quot;&gt;IT Global Meetup&lt;/a&gt; is a full-day event, which provides an opportunity to dozens of communities and hundreds of visitors to meet at a single place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On July 23rd our local Jenkins community participated in the eight’s global meetup.
We conduced 2 talks in main tracks and also had a round table in the evening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Talks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Oleg Nenashev&lt;/strong&gt;, CloudBees, &quot;About Jenkins 2 and future plans&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Oleg provided a top-level overview about changes in Jenkins,
shared insights about upgrading to the new Jenkins 2.7.1 LTS and talked about Jenkins plans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/onenashev/itgm8-o-jenkins-2-i-planakh-na-budushchieie&quot;&gt;Presentation&lt;/a&gt; (rus)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Aleksandr Tarasov&lt;/strong&gt;, Alfa-Laboratory, &quot;Continuous Delivery with Jenkins: Lessons learned&quot;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aleksandr summarized AlfaLab’s experience of Jenkins usage for Continuous Delivery in their environment.
He talked about the flow based on &lt;a href=&quot;https://jenkins.io/doc/pipeline/&quot;&gt;Jenkins Pipeline&lt;/a&gt;, &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin&quot;&gt;JobDSL&lt;/a&gt; and &lt;a href=&quot;https://jenkins.io/projects/blueocean/&quot;&gt;BlueOcean&lt;/a&gt; prototype.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/aatarasoff/continuous-delivery-with-jenkins-lessons-learned&quot;&gt;Presentation&lt;/a&gt; (rus)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the talks we had a roundtable about Jenkins (~10 Jenkins experts).
Oleg provided an overview of Docker and Configuration-as-Code features available in Jenkins,
and then we talked about common use-cases in Jenkins installations.
We hope to finally organize a &quot;Jenkins &amp;amp; Docker&quot; meetup at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;q-a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#q-a&quot;&gt;&lt;/a&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any questions, all speakers can be contacted via
&lt;a href=&quot;https://gitter.im/jenkinsci-ru/public&quot;&gt;Jenkins RU Gitter Chat&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/St-Petersburg-Jenkins-Meetup/&quot;&gt;St. Petersburg Meetup page&lt;/a&gt; (follow the events here)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jenkins_spb&quot;&gt;St. Petersburg Meetup Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jenkins_ru&quot;&gt;Jenkins RU Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci-ru/public&quot;&gt;Jenkins RU Gitter Chat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://piter-united.ru/itgm8/itgm.html&quot;&gt;IT Global Meetup&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;acknowledgments&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#acknowledgments&quot;&gt;&lt;/a&gt;Acknowledgments&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The events have been organized with help from
&lt;a href=&quot;https://www.cloudbees.com/&quot;&gt;CloudBees&lt;/a&gt;, &lt;a href=&quot;https://emc.com/company/&quot;&gt;EMC&lt;/a&gt; and
organizers of the &lt;a href=&quot;http://piter-united.ru/itgm8/itgm.html&quot;&gt;St. Petersburg IT Global Meetup&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/26/join-me-at-jenkinsworld/</id>
<title>Join me for Jenkins World 2016</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-26T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/26/join-me-at-jenkinsworld/" />
<author>
<name>kohsuke</name>
</author>
<category term="event"></category>
<category term="jenkinsworld"></category>
<summary>
Jenkins World, September
13-15 at the Santa Clara Convention Center (SCCC), takes our 6th annual
community user conference to a whole new level. It will be one big party for
everything Jenkins, from users to developers, from the community to vendors.
There will be more of what people always loved in past user conferences, such
as technical sessions from users and developers, the Ask the Experts booth and
plugin development workshop, and even more has been added, such as Jenkins
training pre-conference, workshops and the opportunity to get certified for
free. Jenkins World is a not-to-be-missed.


For me, the best part of Jenkins World is the opportunity to meet...
</summary>
<content type="html">
&lt;div class=&quot;imageblock right&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/conferences/Jenkins-World_125x125.png&quot; alt=&quot;Jenkins World 125x125&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://jenkinsworld.com/&quot;&gt;Jenkins World&lt;/a&gt;, September
13-15 at the Santa Clara Convention Center (SCCC), takes our 6th annual
community user conference to a whole new level. It will be one big party for
everything Jenkins, from users to developers, from the community to vendors.
There will be more of what people always loved in past user conferences, such
as technical sessions from users and developers, the Ask the Experts booth and
plugin development workshop, and even more has been added, such as Jenkins
training pre-conference, workshops and the opportunity to get certified for
free. Jenkins World is a not-to-be-missed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, the best part of Jenkins World is the opportunity to meet other Jenkins
users and developers face-to-face. We all interact on IRC, Google Groups or
GitHub, but when you have a chance to meet in person, the person behind the
GitHub ID or IRC name, whose plugin you use every day, becomes a real person.
Your motivation might be a little different from mine, but we have the breath
in the agenda to cover everyone from new users to senior plugin developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year, you’ll have more opportunities than ever before to learn about
Jenkins and continuous delivery/DevOps practices, and explore what Jenkins has
to offer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are travelling from somewhere, you might as well get a two-day Jenkins training course to be held onsite, starting Monday.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Tuesday, you can attend your choice of workshops, which gives you more hands-on time to go deeper, including:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The DevOps Toolkit 2.0 Workshop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let’s Build a Jenkins Pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preparing for Jenkins Certification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro to Plugin Development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CD and DevOps Maturity for Managers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Wednesday, the formal conference kicks off. Throughout Wednesday and
Thursday, you can choose from sessions spread across five tracks and covering
a diverse range of topics like infrastructure as code, security, containers,
pipeline automation, best practices, scaling Jenkins and new community
development initiatives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At Jenkins World, you’ll be exposed to projects going on in the community such
as &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/blueocean&quot;&gt;Blue Ocean&lt;/a&gt;, a new Jenkins UX project. You can
learn more about &lt;a href=&quot;https://rtyler.github.io/jenkins.io/2.0/&quot;&gt;Jenkins 2&lt;/a&gt; - a major release for the project, and based on the
huge number of downloads we saw in the weeks following its introduction at the
end of April, it was a big +1. At Jenkins World, you will be immersed in
Jenkins and community, and leave knowing that you are part of a meaningful open
source project that, with your involvement, can do anything!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This year there will only be one Jenkins World conference, so that everyone
involved in Jenkins can get together in one place at one time and actually see
each other. I understand that it might be a bit more difficult for Jenkins
users outside of the US to make it to Jenkins World, but hopefully we made the
event worth your visit. As the final push on the back, CloudBees has created a
special &lt;a href=&quot;https://www.cloudbees.com/juc/international-program&quot;&gt;international program&lt;/a&gt;
for those who are coming from outside the United States.  You’ll have
time to talk with all of the other Jenkins users who have made the journey from
across the globe, you’ll be able to attend exclusive networking events and
more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope to see you September 13th through 15th in Santa Clara at
&lt;a href=&quot;http://jenkinsworld.com&quot;&gt;Jenkins World&lt;/a&gt; in Santa Clara!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Register for &lt;a href=&quot;https://www.cloudbees.com/jenkinsworld/home&quot;&gt;Jenkins World&lt;/a&gt; in
September with the code &lt;code&gt;JWFOSS&lt;/code&gt; for a 20% discount off your pass.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/19/blue-ocean-update/</id>
<title>Blue Ocean July development update </title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-19T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/19/blue-ocean-update/" />
<author>
<name>i386</name>
</author>
<category term="blueocean"></category>
<category term="ux"></category>
<category term="pipeline"></category>
<summary>
The team have been hard at work moving the needle forward on the Blue
Ocean 1.0 features. Many of the features we have been working on have
come a long way in the past few months but here&#8217;s a few highlights:


Goodbye page refreshes, Hello Real Time updates!

Building upon
Tom's great work on
Server Sent Events (SSE) both
Cliff and
Tom worked
on making the all the screens in Blue Ocean update without manual
refreshes.


SSE is a great technology
choice for new web apps as it only pushes out
events to the client when things have changed on the server. That means
there’s a lot less traffic going between your browser and...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The team have been hard at work moving the needle forward on the Blue
Ocean 1.0 features. Many of the features we have been working on have
come a long way in the past few months but here’s a few highlights:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;goodbye-page-refreshes-hello-real-time-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#goodbye-page-refreshes-hello-real-time-updates&quot;&gt;&lt;/a&gt;Goodbye page refreshes, Hello Real Time updates!&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Building upon
&lt;a href=&quot;https://twitter.com/tomfennelly&quot;&gt;Tom&lt;/a&gt;'s great work on
&lt;a href=&quot;https://github.com/jenkinsci/sse-gateway-plugin&quot;&gt;Server Sent Events&lt;/a&gt; (SSE) both
&lt;a href=&quot;https://twitter.com/cliffmeyers&quot;&gt;Cliff&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/tomfennelly&quot;&gt;Tom&lt;/a&gt; worked
on making the all the screens in Blue Ocean update without manual
refreshes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events&quot;&gt;SSE is a great technology&lt;/a&gt;
choice for new web apps as it only pushes out
events to the client when things have changed on the server. That means
there’s a lot less traffic going between your browser and the Jenkins
server when compared to the continuous AJAX polling method that has been
typical of Jenkins in the past.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;640&quot; height=&quot;505&quot; src=&quot;https://www.youtube-nocookie.com/embed/AEnByFwPYaE?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;new-test-reporting-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-test-reporting-ui&quot;&gt;&lt;/a&gt;New Test Reporting UI&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kzantow&quot;&gt;Keith&lt;/a&gt; has
been working with &lt;a href=&quot;https://twitter.com/vivekpandey&quot;&gt;Vivek&lt;/a&gt; to
drive out a new set of extension points that allow us to build a new
rest reporting UI in Blue Ocean. Today this works for JUnit test reports
but can be easily extended to work with other kinds of reports.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;640&quot; height=&quot;505&quot; src=&quot;https://www.youtube-nocookie.com/embed/QEeSOBCYY4o?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;pipeline-logs-are-split-into-steps-and-update-live&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipeline-logs-are-split-into-steps-and-update-live&quot;&gt;&lt;/a&gt;Pipeline logs are split into steps and update live&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ThorScherler&quot;&gt;Thorsten&lt;/a&gt; and
&lt;a href=&quot;http://twitter.com/sophistifunk&quot;&gt;Josh&lt;/a&gt; have
been hard at work breaking down the log into steps and making the live
log tailing follow the pipeline execution - which we’ve lovingly
nicknamed the “karaoke mode”&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;640&quot; height=&quot;505&quot; src=&quot;https://www.youtube-nocookie.com/embed/Ew13TjclNME?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;pipelines-can-be-triggered-from-the-ui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pipelines-can-be-triggered-from-the-ui&quot;&gt;&lt;/a&gt;Pipelines can be triggered from the UI&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tomfennelly&quot;&gt;Tom&lt;/a&gt; has
been on allowing users to trigger jobs from Blue Ocean, which is one
less reason to go back to the Classic UI :)&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width=&quot;640&quot; height=&quot;505&quot; src=&quot;https://www.youtube-nocookie.com/embed/kdT02vPTxQI?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/center&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;blue-ocean-has-been-released-to-the-experimental-update-center&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#blue-ocean-has-been-released-to-the-experimental-update-center&quot;&gt;&lt;/a&gt;Blue Ocean has been released to the experimental update center&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many of you have asked us questions about how you can try Blue Ocean
today and have resorted to building the plugin yourself or running our
Docker image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We wanted to make the process of trying Blue Ocean in its unfinished
state by publishing the plugin to the experimental update center - it’s
available today!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what is the Experimental Update Center? It is a mechanism for the
Jenkins developer community to share early previews of new plugins with
the broader user community. Plugins in this update center are
experimental and we strongly advise not running them on production or
Jenkins systems that you rely on for your work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That means any plugin in this update center could eat your Jenkins data,
cause slowdowns, degrade security or have their behavior change at no
notice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can learn how to
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2013/09/23/experimental-plugins-update-center/&quot;&gt;activate
the experimental update center on this post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more updates!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/</id>
<title>Sending Notifications in Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-18T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/18/pipline-notifications/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="notifications"></category>
<category term="slack"></category>
<category term="hipchat"></category>
<category term="emailext"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Rather than sitting and watching Jenkins for job status, I want Jenkins to send
notifications when events occur.  There are Jenkins plugins for
Slack,
HipChat,
or even email
among others.


Note: Something is happening!

I think we can all agree getting notified when events occur is preferable to
having to constantly monitor them just in case.  I&#8217;m going to continue from
where I left off in my
previous post with the
hermann project.  I added a Jenkins
Pipeline with an HTML publisher for code coverage. This week, I&#8217;d like to make
Jenkins to notify me when builds start and when...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rather than sitting and watching Jenkins for job status, I want Jenkins to send
notifications when events occur.  There are Jenkins plugins for
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Slack+Plugin&quot;&gt;Slack&lt;/a&gt;,
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HipChat+Plugin&quot;&gt;HipChat&lt;/a&gt;,
or even &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin&quot;&gt;email&lt;/a&gt;
among others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;note-something-is-happening&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#note-something-is-happening&quot;&gt;&lt;/a&gt;Note: Something is happening!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think we can all agree getting notified when events occur is preferable to
having to constantly monitor them just in case.  I’m going to continue from
where I left off in my
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/07/01/html-publisher-plugin/&quot;&gt;previous post&lt;/a&gt; with the
&lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;hermann&lt;/a&gt; project.  I added a Jenkins
Pipeline with an HTML publisher for code coverage. This week, I’d like to make
Jenkins to notify me when builds start and when they succeed or fail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setup-and-configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setup-and-configuration&quot;&gt;&lt;/a&gt;Setup and Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, I select targets for my notifications. For this blog post, I’ll use sample
targets that I control.  I’ve created Slack and HipChat organizations called
&quot;bitwiseman&quot;, each with one member - me.  And for email I’m running a Ruby SMTP server called
&lt;a href=&quot;https://mailcatcher.me/&quot;&gt;mailcatcher&lt;/a&gt;, that is perfect for local testing
such as this.  Aside for these concessions, configuration would be much the
same in a non-demo situation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, I install and add server-wide configuration for the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Slack+Plugin&quot;&gt;Slack&lt;/a&gt;,
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HipChat+Plugin&quot;&gt;HipChat&lt;/a&gt;,
and &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin&quot;&gt;Email-ext&lt;/a&gt;
plugins.  Slack and HipChat use API tokens - both products have integration
points on their side that generate tokens which I copy into my Jenkins
configuration. Mailcatcher SMTP runs locally. I just point Jenkins
at it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s what the Jenkins configuration section for each of these looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/slack-config.png&quot; alt=&quot;Slack Configuration&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/hipchat-config.png&quot; alt=&quot;HipChat Configuration&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/email-config.png&quot; alt=&quot;Email Configuration&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;original-pipeline&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#original-pipeline&quot;&gt;&lt;/a&gt;Original Pipeline&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I can start adding notification steps. The same as
&lt;a href=&quot;blog/2016/07/01/html-publisher-plugin/&quot;&gt;last week&lt;/a&gt;, I’ll use the
&lt;a href=&quot;blog/2016/05/31/pipeline-snippetizer/&quot;&gt;Jenkins Pipeline Snippet Generator&lt;/a&gt;
to explore the step syntax for the notification plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s the base pipeline before I start making changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

node {
  &lt;span style=&quot;color:#777&quot;&gt;// Checkout&lt;/span&gt;
  checkout scm

  &lt;span style=&quot;color:#777&quot;&gt;// install required bundles&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// build and run tests with coverage&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
  archive (&lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

  &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;// snippet generator doesn't include &quot;target:&quot;&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;// https://issues.jenkins-ci.org/browse/JENKINS-29711.&lt;/span&gt;
  publishHTML (&lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
      &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    ])
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline expects to be run from a &lt;code&gt;Jenkinsfile&lt;/code&gt; in SCM.
To copy and paste it directly into a Jenkins Pipeline job, replace the &lt;code&gt;checkout scm&lt;/code&gt; step with
&lt;code&gt;git 'https://github.com/reiseburo/hermann.git'&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;job-started-notification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#job-started-notification&quot;&gt;&lt;/a&gt;Job Started Notification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the first change, I decide to add a &quot;Job Started&quot; notification.  The
snippet generator and then reformatting makes this straightforward:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {

  notifyStarted()

  &lt;span style=&quot;color:#777&quot;&gt;/* ... existing build steps ... */&lt;/span&gt;
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifyStarted&lt;/span&gt;() {
  &lt;span style=&quot;color:#777&quot;&gt;// send to Slack&lt;/span&gt;
  slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FFFF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

  &lt;span style=&quot;color:#777&quot;&gt;// send to HipChat&lt;/span&gt;
  hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YELLOW&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    )

  &lt;span style=&quot;color:#777&quot;&gt;// send to email&lt;/span&gt;
  emailext (
      &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Pipeline is a Groovy-based DSL, I can use
&lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/index.html#_string_interpolation&quot;&gt;string interpolation&lt;/a&gt;
and variables to add exactly the details I want in my notification messages. When
I run this I get the following notifications:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/notify-started.png&quot; alt=&quot;Started Notifications&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/notify-started-email.png&quot; alt=&quot;Started Email Notification&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;job-successful-notification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#job-successful-notification&quot;&gt;&lt;/a&gt;Job Successful Notification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next logical choice is to get notifications when a job succeeds.  I’ll
copy and paste based on the &lt;code&gt;notifyStarted&lt;/code&gt; method for now and do some refactoring
later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {

  notifyStarted()

  &lt;span style=&quot;color:#777&quot;&gt;/* ... existing build steps ... */&lt;/span&gt;

  notifySuccessful()
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifyStarted&lt;/span&gt;() { &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt; }

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifySuccessful&lt;/span&gt;() {
  slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#00FF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

  hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GREEN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    )

  emailext (
      &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;SUCCESSFUL: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, I get notifications, as expected.  This build is fast enough,
some of them are even on the screen at the same time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/notify-successful.png&quot; alt=&quot;Multiple Notifications&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;job-failed-notification&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#job-failed-notification&quot;&gt;&lt;/a&gt;Job Failed Notification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next I want to add failure notification.  Here’s where we really start to see the power
and expressiveness of Jenkins pipeline.  A Pipeline is a Groovy script, so as we’d
expect in any Groovy script, we can handle errors using &lt;code&gt;try-catch&lt;/code&gt; blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
    notifyStarted()

    &lt;span style=&quot;color:#777&quot;&gt;/* ... existing build steps ... */&lt;/span&gt;

    notifySuccessful()
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (e) {
    currentBuild.result = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    notifyFailed()
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;throw&lt;/span&gt; e
  }
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifyStarted&lt;/span&gt;() { &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt; }

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifySuccessful&lt;/span&gt;() { &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt; }

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifyFailed&lt;/span&gt;() {
  slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

  hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]' (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    )

  emailext (
      &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;FAILED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/notify-failed.png&quot; alt=&quot;Failed Notifications&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code-cleanup&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#code-cleanup&quot;&gt;&lt;/a&gt;Code Cleanup&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, now that I have it all working, I’ll do some refactoring. I’ll unify
all the notifications in one method and move the final success/failure notification
into a &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

node {
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
    notifyBuild(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

    &lt;span style=&quot;color:#777&quot;&gt;/* ... existing build steps ... */&lt;/span&gt;

  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (e) {
    &lt;span style=&quot;color:#777&quot;&gt;// If there was an exception thrown, the build failed&lt;/span&gt;
    currentBuild.result = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FAILED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;throw&lt;/span&gt; e
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt; {
    &lt;span style=&quot;color:#777&quot;&gt;// Success or failure, always send notifications&lt;/span&gt;
    notifyBuild(currentBuild.result)
  }
}

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;notifyBuild&lt;/span&gt;(&lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;String&lt;/span&gt; buildStatus = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
  &lt;span style=&quot;color:#777&quot;&gt;// build status of null means successful&lt;/span&gt;
  buildStatus =  buildStatus ?: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Default values&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; colorName = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; subject = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;buildStatus&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]'&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; summary = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;subject&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; (&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; details = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;p&amp;gt;STARTED: Job '&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]':&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Check console output at &amp;amp;QUOT;&amp;lt;a href='&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_URL&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;'&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.JOB_NAME&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; [&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;env.BUILD_NUMBER&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;]&amp;lt;/a&amp;gt;&amp;amp;QUOT;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Override default values based on build status&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (buildStatus == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;STARTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YELLOW&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FFFF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (buildStatus == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SUCCESSFUL&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GREEN&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#00FF00&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
    color = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    colorCode = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#FF0000&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  }

  &lt;span style=&quot;color:#777&quot;&gt;// Send notifications&lt;/span&gt;
  slackSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: colorCode, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: summary)

  hipchatSend (&lt;span style=&quot;color:#606&quot;&gt;color&lt;/span&gt;: color, &lt;span style=&quot;color:#606&quot;&gt;notify&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;message&lt;/span&gt;: summary)

  emailext (
      &lt;span style=&quot;color:#606&quot;&gt;subject&lt;/span&gt;: subject,
      &lt;span style=&quot;color:#606&quot;&gt;body&lt;/span&gt;: details,
      &lt;span style=&quot;color:#606&quot;&gt;recipientProviders&lt;/span&gt;: [[&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DevelopersRecipientProvider&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;you-have-been-notified&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#you-have-been-notified&quot;&gt;&lt;/a&gt;You have been notified!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now get notified twice per build on three different channels.  I’m not sure I
need to get notified this much for such a short build.  However, for a longer
or complex CD pipeline, I might want exactly that.  If needed, I could even
improve this to handle other status strings and call it as needed throughout
my pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-07-15/final.png&quot; alt=&quot;Final View of Notifications&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Slack+Plugin&quot;&gt;Slack Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HipChat+Plugin&quot;&gt;HipChat Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin&quot;&gt;Email-ext Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/31/pipeline-snippetizer/&quot;&gt;Jenkins Pipeline Snippet Generator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/14/2-7-1-re-release/</id>
<title>New packages for Jenkins 2.7.1</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-14T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/14/2-7-1-re-release/" />
<author>
<name>daniel-beck</name>
</author>
<category term="jenkins2"></category>
<category term="lts"></category>
<summary>
We created new native packages for Jenkins 2.7.1 today. These replace the existing packages. Due to a release process issue, the packaging (RPM, etc.) was created the same way as Jenkins 1.x LTS, resulting in problems starting Jenkins on some platforms: While we dropped support for AJP in Jenkins 2.0, some 1.x packages had it enabled by default, resulting in an exception during startup.

These new packages for Jenkins 2.7.1, dated July 14, have the same scripts and parameters as Jenkins 2.x and should allow starting up Jenkins without problems. If you notice any further problems with the packaging, please report...
</summary>
<content type="html">

&lt;p&gt;We created new native packages for Jenkins 2.7.1 today. These replace the existing packages. Due to a release process issue, the packaging (RPM, etc.) was created the same way as Jenkins 1.x LTS, resulting in problems starting Jenkins on some platforms: While we dropped support for AJP in Jenkins 2.0, some 1.x packages had it enabled by default, resulting in an exception during startup.&lt;/p&gt;

&lt;p&gt;These new packages for Jenkins 2.7.1, dated July 14, have the same scripts and parameters as Jenkins 2.x and should allow starting up Jenkins without problems. If you notice any further problems with the packaging, please &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/How+to+report+an+issue&quot;&gt;report&lt;/a&gt; them in the &lt;code&gt;packaging&lt;/code&gt; component.&lt;/p&gt;

</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/07/jenkins-2/</id>
<title>Jenkins 2 hits LTS</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-07T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/07/jenkins-2/" />
<author>
<name>kohsuke</name>
</author>
<category term="lts"></category>
<category term="jenkins2"></category>
<summary>
It’s been almost three months since we’ve released Jenkins 2.0, the first ever major version upgrade for this 10 year old project. The 2.x versions since then has been adopted by more than 20% of the users, but one segment of users who haven’t seen the benefits of Jenkins 2 is those who has been running LTS releases.


But that is no more! The new version of Jenkins LTS release we just released is 2.7.1, and now LTS users get to finally enjoy Jenkins 2.


This release also officially marks the end-of-life for Jenkins 1.x. There won’t be any future release of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It’s been almost three months since we’ve released &lt;a href=&quot;https://jenkins.io/2.0/&quot;&gt;Jenkins 2.0&lt;/a&gt;, the first ever major version upgrade for this 10 year old project. The 2.x versions since then has been adopted by more than 20% of the users, but one segment of users who haven’t seen the benefits of Jenkins 2 is those who has been running LTS releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But that is no more! The new version of Jenkins LTS release we just released is 2.7.1, and now LTS users get to finally enjoy Jenkins 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also officially marks the end-of-life for Jenkins 1.x. There won’t be any future release of Jenkins 1.x beyond this point. If you are worried about the upgrade, don’t be! The core of Jenkins is still the same, and all the plugins &amp;amp; existing configuration will just work.&lt;/p&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/07/01/html-publisher-plugin/</id>
<title>Publishing HTML Reports in Pipeline</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-07-01T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/07/01/html-publisher-plugin/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="ruby"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





Most projects need more that just JUnit result reporting.  Rather than writing a
custom plugin for each type of report, we can use the
HTML Publisher Plugin.


Let&#8217;s Make This Quick

I&#8217;ve found a Ruby project,
hermann, I&#8217;d like to build using Jenkins Pipeline. I&#8217;d
also like to have the code coverage results published with each build job.  I could
write a plugin to publish this data, but I&#8217;m in a bit of hurry and
the build already creates an HTML report file using SimpleCov
when the unit tests run.



Simple Build

I&#8217;m going to use the
HTML Publisher Plugin
to...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most projects need more that just JUnit result reporting.  Rather than writing a
custom plugin for each type of report, we can use the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin&quot;&gt;HTML Publisher Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;let-s-make-this-quick&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#let-s-make-this-quick&quot;&gt;&lt;/a&gt;Let’s Make This Quick&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ve found a Ruby project,
&lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;hermann&lt;/a&gt;, I’d like to build using Jenkins Pipeline. I’d
also like to have the code coverage results published with each build job.  I could
write a plugin to publish this data, but I’m in a bit of hurry and
the build already creates an HTML report file using &lt;a href=&quot;https://github.com/colszowka/simplecov&quot;&gt;SimpleCov&lt;/a&gt;
when the unit tests run.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;simple-build&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#simple-build&quot;&gt;&lt;/a&gt;Simple Build&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’m going to use the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin&quot;&gt;HTML Publisher Plugin&lt;/a&gt;
to add the HTML-formatted code coverage report to my builds.  Here’s a simple
pipeline for building the &lt;a href=&quot;https://github.com/reiseburo/hermann&quot;&gt;hermann&lt;/a&gt;
project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

node {
  &lt;span style=&quot;color:#777&quot;&gt;// Checkout&lt;/span&gt;
  checkout scm

  &lt;span style=&quot;color:#777&quot;&gt;// install required bundles&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle install&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// build and run tests with coverage&lt;/span&gt;
  sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bundle exec rake build spec&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
  archive (&lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline expects to be run from a &lt;code&gt;Jenkinsfile&lt;/code&gt; in SCM.
To copy and paste it directly into a Jenkins Pipeline job, replace the &lt;code&gt;checkout scm&lt;/code&gt; step with
&lt;code&gt;git 'https://github.com/reiseburo/hermann.git'&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simple enough, it builds, runs tests, and archives the package.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-30/run-1.png&quot; alt=&quot;Job Run Without Report Link&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now I just need to add the step to publish the code coverage report.
I know that &lt;code&gt;rake spec&lt;/code&gt; creates an &lt;code&gt;index.html&lt;/code&gt; file in the &lt;code&gt;coverage&lt;/code&gt; directory.
I’ve already installed the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin&quot;&gt;HTML Publisher Plugin&lt;/a&gt;.
How do I add the HTML publishing step to the pipeline?  The plugin page doesn’t
say anything about it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;snippet-generator-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#snippet-generator-to-the-rescue&quot;&gt;&lt;/a&gt;Snippet Generator to the Rescue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Documentation is hard to maintain and easy to miss, even more so in a system
like Jenkins with hundreds of plugins the each potential have one or more
groovy fixtures to add to the Pipeline.  The Pipeline Syntax
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/31/pipeline-snippetizer/&quot;&gt;Snippet Generator&lt;/a&gt; helps users
navigate this jungle by providing a way to generate a code snippet for any step using
provided inputs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It offers a dynamically generated list of steps, based on the installed plugins.
From that list I select the &lt;code&gt;publishHTML&lt;/code&gt; step:&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-30/snippet-generator-1.png&quot; alt=&quot;Snippet Generator Menu&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then it shows me a UI similar to the one used in job configuration.  I fill in
the fields, click &quot;generate&quot;, and it shows me snippet of groovy generated from
that input.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-30/snippet-generator-2.png&quot; alt=&quot;Snippet Generator Output&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;html-published&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#html-published&quot;&gt;&lt;/a&gt;HTML Published&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can use that snippet directly or as a template for further customization.
In this case, I’ll just reformat and copy it in at the end of my
pipeline.  (I ran into a &lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-29711&quot;&gt;minor bug&lt;/a&gt;
in the snippet generated for this plugin step. Typing
error string in my search bar immediately found the bug and a workaround.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;  &lt;span style=&quot;color:#777&quot;&gt;/* ...unchanged... */&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;// Archive the built artifacts&lt;/span&gt;
  archive (&lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pkg/*.gem&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

  &lt;span style=&quot;color:#777&quot;&gt;// publish html&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;// snippet generator doesn't include &quot;target:&quot;&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;// https://issues.jenkins-ci.org/browse/JENKINS-29711.&lt;/span&gt;
  publishHTML (&lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: [
      &lt;span style=&quot;color:#606&quot;&gt;allowMissing&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;alwaysLinkToLastBuild&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;keepAll&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportDir&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;coverage&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportFiles&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
      &lt;span style=&quot;color:#606&quot;&gt;reportName&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;RCov Report&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    ])

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I run this new pipeline I am rewarded with an &lt;code&gt;RCov Report&lt;/code&gt; link on left side,
which I can follow to show the HTML report.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-30/run-2.png&quot; alt=&quot;Job Run With Report Link&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-30/rcov.png&quot; alt=&quot;RCov Report&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I even added the &lt;code&gt;keepAll&lt;/code&gt; setting to let I can also go back an look at reports on old jobs as
more come in.  As I said to to begin with, this is not as slick as what I
could do with a custom plugin, but it is much easier and works with any static
HTML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin&quot;&gt;HTML Publisher Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/31/pipeline-snippetizer/&quot;&gt;Jenkins Pipeline Snippet Generator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/06/30/ewm-alpha-version/</id>
<title>GSoC: External Workspace Manager Plugin alpha version</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-06-30T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/06/30/ewm-alpha-version/" />
<author>
<name>alexsomai</name>
</author>
<category term="pipeline"></category>
<category term="plugins"></category>
<category term="external-workspace-manager"></category>
<category term="gsoc"></category>
<summary>
Currently it&#8217;s quite difficult to share and reuse the same workspace between multiple jobs and across nodes.
There are some possible workarounds for achieving this, but each of them has its own drawback,
e.g. stash/unstash pre-made artifacts, Copy Artifacts plugin or advanced job settings.
A viable solution for this problem is the External Workspace Manager plugin, which facilitates workspace share and
reuse across multiple Jenkins jobs and nodes.
It also eliminates the need to copy, archive or move files.
You can learn more about the design and goals of the External Workspace Manager project in
this introductory blog post.


I&#8217;d like to announce that an alpha version of...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently it’s quite difficult to share and reuse the same workspace between multiple jobs and across nodes.
There are some possible workarounds for achieving this, but each of them has its own drawback,
e.g. stash/unstash pre-made artifacts, Copy Artifacts plugin or advanced job settings.
A viable solution for this problem is the External Workspace Manager plugin, which facilitates workspace share and
reuse across multiple Jenkins jobs and nodes.
It also eliminates the need to copy, archive or move files.
You can learn more about the design and goals of the External Workspace Manager project in
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin/&quot;&gt;this introductory blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’d like to announce that an alpha version of the External Manager Plugin has been released!
It’s now public available for testing.
To be able to install this plugin, you must follow the steps from the Experimental Plugins Update Center
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2013/09/23/experimental-plugins-update-center/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Please be aware that it’s not recommended to use the Experimental Update Center in production installations of
Jenkins, since it may break it.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin’s wiki page may be accessed
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/External+Workspace+Manager+Plugin&quot;&gt;here&lt;/a&gt;.
The documentation that helps you get started with this plugin may be found on the
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin/blob/master/README.md&quot;&gt;README&lt;/a&gt; page.
To get an idea of what this plugin does, which are the features implemented so far and to see a working demo of it,
you can watch my mid-term presentation that is available &lt;a href=&quot;https://youtu.be/u4zhxfUT8P4?t=22m7s&quot;&gt;here&lt;/a&gt;.
The slides for the presentation are shared on
&lt;a href=&quot;https://docs.google.com/presentation/d/1ZCYSIR2Tg466Ij1ghH5LSc8DLBCxWjIaD9IJcOyMZwU/edit?usp=sharing&quot;&gt;Google Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My mentors, &lt;a href=&quot;https://github.com/martinda&quot;&gt;Martin&lt;/a&gt; and &lt;a href=&quot;https://github.com/oleg-nenashev&quot;&gt;Oleg&lt;/a&gt;,
and I have set up public meetings related to this plugin.
You are invited to join our discussions if you’d like to get more insight about the project.
The meetings are taking place twice a week on the &lt;a href=&quot;https://rtyler.github.io/jenkins.io/hangout&quot;&gt;Jenkins hangout&lt;/a&gt;,
every Monday at
&lt;a href=&quot;http://www.timeanddate.com/worldclock/fixedtime.html?msg=External+Workspace+Manager+Plugin+(Mondays+weekly+recurring)&amp;amp;iso=20160606T12&amp;amp;p1=1440&amp;amp;ah=1&quot;&gt;12 PM UTC&lt;/a&gt;
and every Thursday at
&lt;a href=&quot;http://www.timeanddate.com/worldclock/fixedtime.html?msg=External+Workspace+Manager+Plugin+(Thursdays+weekly+recurring)&amp;amp;iso=20160609T05&amp;amp;p1=1440&amp;amp;ah=1&quot;&gt;5 PM UTC&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have any issues in setting up or using the plugin, please feel free to ask me on the plugin’s Gitter
&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin&quot;&gt;chat&lt;/a&gt;.
The plugin is open-source, having the repository on
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;GitHub&lt;/a&gt;, and you may contribute to it.
Any feedback is welcome, and you may provide it either on the Gitter chat, or on
&lt;a href=&quot;https://issues.jenkins-ci.org&quot;&gt;Jira&lt;/a&gt; by using the &lt;em&gt;external-workspace-manager-plugin&lt;/em&gt; component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://gitter.im/jenkinsci/external-workspace-manager-plugin?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&quot;&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/jenkinsci/external-workspace-manager-plugin.svg&quot; alt=&quot;title: &quot; Gitter=&quot;&quot; /&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;Project repository&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/External+Workspace+Manager+Plugin&quot;&gt;Plugin wiki page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/u4zhxfUT8P4?t=22m7s&quot;&gt;Mid-term presentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin/&quot;&gt;Project intro blog post&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/projects/gsoc/&quot;&gt;Jenkins GSoC Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/06/29/from-freestyle-to-pipeline/</id>
<title>Migrating from chained Freestyle jobs to Pipelines</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-06-29T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/06/29/from-freestyle-to-pipeline/" />
<author>
<name>rtyler</name>
</author>
<category term="pipeline"></category>
<category term="infra"></category>
<summary>
This is a guest post by R. Tyler Croy, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
CloudBees, Inc.






For ages I have used the "Build After" feature in Jenkins to cobble together
what one might refer to as a "pipeline" of sorts. The Jenkins project itself, a
major consumer of Jenkins, has used these daisy-chained Freestyle jobs to drive
a myriad of delivery pipelines in our infrastructure.


One such "pipeline" helped drive the complex process of generating the pretty
blue charts on
stats.jenkins-ci.org.
This statistics generation process primarily performs two major tasks, on rather
large sets of...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a guest post by &lt;a href=&quot;https;//github.com/rtyler&quot;&gt;R. Tyler Croy&lt;/a&gt;, who is a
long-time contributor to Jenkins and the primary contact for Jenkins project
infrastructure. He is also a Jenkins Evangelist at
&lt;a href=&quot;http://cloudbees.com&quot;&gt;CloudBees, Inc.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For ages I have used the &quot;Build After&quot; feature in Jenkins to cobble together
what one might refer to as a &quot;pipeline&quot; of sorts. The Jenkins project itself, a
major consumer of Jenkins, has used these daisy-chained Freestyle jobs to drive
a myriad of delivery pipelines in our infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One such &quot;pipeline&quot; helped drive the complex process of generating the pretty
blue charts on
&lt;a href=&quot;http://stats.jenkins-ci.org/jenkins-stats/svg/svgs.html&quot;&gt;stats.jenkins-ci.org&lt;/a&gt;.
This statistics generation process primarily performs two major tasks, on rather
large sets of data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Generate aggregate monthly &quot;census data.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process the census data and create trend charts&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The chained jobs allowed us to resume the independent stages of the pipeline,
and allowed us to run different stages on different hardware (different
capabilities) as needed. Below is a diagram of what this looked like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/freestyle-to-pipeline-2016/freestyle-pipeline.png&quot; alt=&quot;freestyle pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;infra_generate_monthly_json&lt;/code&gt; would run periodically creating the
aggregated census data, which would then be picked up by &lt;code&gt;infra_census_push&lt;/code&gt;
whose sole responsibility was to take census data and publish it to the
necessary hosts inside the project’s infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second, semi-independent, &quot;pipeline&quot; would also run periodically. The
&lt;code&gt;infra_statistics&lt;/code&gt; job’s responsibility was to use the census data, pushed
earlier by &lt;code&gt;infra_census_push&lt;/code&gt;, to generate the myriad of pretty blue charts
before triggering the
&lt;code&gt;infra_checkout_stats&lt;/code&gt; job which would make sure &lt;code&gt;stats.jenkins-ci.org&lt;/code&gt; was
properly updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suffice it to say, this &quot;pipeline&quot; had grown organically over a period time when
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;more advanced tools&lt;/a&gt; weren’t quite available.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we migrated to newer infrastructure for
&lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt; earlier this year I took the
opportunity to do some cleaning up. Instead of migrating jobs verbatim, I pruned
stale jobs and refactored a number of others into proper
&lt;a href=&quot;https://rtyler.github.io/jenkins.io/solutions/pipeline&quot;&gt;Pipelines&lt;/a&gt;, statistics generation being an obvious
target!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our requirements for statistics generation, in their most basic form, are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enable a sequence of dependent tasks to be executed as a logical group (a
pipeline)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable executing those dependent tasks on various pieces of infrastructure
which support different requirements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actually generate those pretty blue charts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you wish to skip ahead, you can jump straight to the
&lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/blob/a6dcaa29fca9a4f61143954fb9e1300c2f995a89/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;
which implements our new Pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first iteration of the &lt;code&gt;Jenkinsfile&lt;/code&gt; simply defined the conceptual stages we
would need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Sync raw data and census files&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Process raw logs&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Generate census data&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Generate stats&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Publish census&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

    stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Publish stats&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How exciting! Although not terrifically useful. When I began actually
implementing the first couple stages, I noticed that the Pipeline might sync
&lt;em&gt;dozens&lt;/em&gt; of gigabytes of data every time it ran on a new agent in the cluster.
While this problem will soon be solved by the
&lt;a href=&quot;https://github.com/jenkinsci/external-workspace-manager-plugin&quot;&gt;External
Workspace Manager plugin&lt;/a&gt;, which is currently being developed. Until it’s ready,
I chose to mitigate the issue by pinning the execution to a consistent agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#777&quot;&gt;/* `census` is a node label for a single machine, ideally, which will be
 * consistently used for processing usage statistics and generating census data
 */&lt;/span&gt;
node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;census &amp;amp;&amp;amp; docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restricting a workload which previously used multiple agents to a single one
introduced the next challenge. As an infrastructure administrator, technically
speaking, I &lt;em&gt;could&lt;/em&gt; just install all the system dependencies that I want on this
one special Jenkins agent. But what kind of example would that be setting!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The statistics generation process requires:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JDK8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.groovy-lang.org&quot;&gt;Groovy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A running &lt;a href=&quot;https://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; instance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fortunately, with Pipeline we have a couple of useful features at our disposal:
tool auto-installers and the
&lt;a href=&quot;https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/chapter-docker-workflow.html&quot;&gt;CloudBees
Docker Pipeline plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tool-auto-installers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tool-auto-installers&quot;&gt;&lt;/a&gt;Tool Auto-Installers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tool Auto-Installers are exposed in Pipeline through the &lt;code&gt;tool&lt;/code&gt; step and on
&lt;a href=&quot;https://ci.jenkins.io&quot;&gt;ci.jenkins.io&lt;/a&gt; we already had JDK8 and Groovy
available. This meant that the &lt;code&gt;Jenkinsfile&lt;/code&gt; would invoke &lt;code&gt;tool&lt;/code&gt; and Pipeline
would automatically install the desired tool on the agent executing the current
Pipeline steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;tool&lt;/code&gt; step does not modify the &lt;code&gt;PATH&lt;/code&gt; environment variable, so it’s usually
used in conjunction with the &lt;code&gt;withEnv&lt;/code&gt; step, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;census &amp;amp;&amp;amp; docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt;

    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; javaHome = tool(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;jdk8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; groovyHome = tool(&lt;span style=&quot;color:#606&quot;&gt;name&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;groovy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

    &lt;span style=&quot;color:#777&quot;&gt;/* Set up environment variables for re-using our auto-installed tools */&lt;/span&gt;
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; customEnv = [
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+JDK=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;javaHome&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PATH+GROOVY=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;groovyHome&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/bin&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JAVA_HOME=&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;javaHome&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    ]

    &lt;span style=&quot;color:#777&quot;&gt;/* use our auto-installed tools */&lt;/span&gt;
    withEnv(customEnv) {
        sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;java --version&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    }

    &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cloudbees-docker-pipeline-plugin&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cloudbees-docker-pipeline-plugin&quot;&gt;&lt;/a&gt;CloudBees Docker Pipeline plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Satisfying the MongoDB dependency would still be tricky. If I caved in and installed
MongoDB on a single unicorn agent in the cluster, what could I say the next time
somebody asked for a special, one-off, piece of software installed on our
Jenkins build agents?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After doing my usual complaining and whining, I discovered that the CloudBees
Docker Pipeline plugin provides the ability to &lt;strong&gt;run containers&lt;/strong&gt; inside of a
&lt;code&gt;Jenkinsfile&lt;/code&gt;. To make things even better, there are
&lt;a href=&quot;https://hub.docker.com/_/mongo/&quot;&gt;official MongoDB docker images&lt;/a&gt; readily
available on DockerHub!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature requires that the machine has a running Docker daemon which is
accessible to the user running the Jenkins agent. After that, running a
container in the background is easy, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;census &amp;amp;&amp;amp; docker&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {
    &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt;

    &lt;span style=&quot;color:#777&quot;&gt;/* Run MongoDB in the background, mapping its port 27017 to our host's port
     * 27017 so our script can talk to it, then execute our Groovy script with
     * tools from our `customEnv`
     */&lt;/span&gt;
    docker.image(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mongo:2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;).withRun(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-p 27017:27017&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) { container -&amp;gt;
        withEnv(customEnv) {
            sh &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;groovy parseUsage.groovy --logs &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;usagestats_dir&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; --output &lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;census_dir&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; --incremental&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }
    }

    &lt;span style=&quot;color:#777&quot;&gt;/* .. */&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The beauty, to me, of this example is that you can pass a
&lt;a href=&quot;http://www.groovy-lang.org/Closures&quot;&gt;closure&lt;/a&gt; to &lt;code&gt;withRun&lt;/code&gt; which will
execute &lt;em&gt;while&lt;/em&gt; the container is running. When the closure is finished executin,
just the &lt;code&gt;sh&lt;/code&gt; step in this case, the container is destroyed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that system requirement satisfied, the rest of the stages of the Pipeline
fell into place. We now have a single source of truth, the
&lt;a href=&quot;https://github.com/jenkins-infra/infra-statistics/blob/master/Jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;,
for the sequence of dependent tasks which need to be executed, accounting for
variations in systems requirements, and it actually generates
&lt;a href=&quot;http://stats.jenkins-ci.org/jenkins-stats/svg/svgs.html&quot;&gt;those pretty
blue charts&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, a nice added bonus is the beautiful visualization of our
&lt;a href=&quot;https://ci.jenkins.io/job/Infrastructure/job/statistics/&quot;&gt;new Pipeline&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/freestyle-to-pipeline-2016/stats-pipeline.png&quot; alt=&quot;The New and Improved Statistics Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/doc/pipeline&quot;&gt;Pipeline documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/chapter-docker-workflow.html&quot;&gt;CloudBees Docker Pipeline plugin documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Live &lt;a href=&quot;https://ci.jenkins.io/job/Infrastructure/job/statistics/&quot;&gt;statistics Pipeline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/06/21/gsoc-midterm-presentations-ann/</id>
<title>GSoC: Mid-term presentations by students on June 23 and 24</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-06-21T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/06/21/gsoc-midterm-presentations-ann/" />
<author>
<name>oleg_nenashev</name>
</author>
<category term="core"></category>
<category term="gsoc"></category>
<category term="plugin"></category>
<category term="general"></category>
<summary>
As you probably know, on this year Jenkins projects participates in
Google Summer of Code 2016.
You can find more information about the accepted projects on the GSoC subproject page and in the
Jenkins Developer mailing list.


On this week GSoC students are going to present their projects as a part of mid-term evaluation,
which covers one month of community bonding and one month of coding.


We would like to invite Jenkins developers to attend these meetings.
There are two additional months of coding ahead for successful students, so any feedback from Jenkins contributors and users will be appreciated.


Meeting #1 - June 23, 7:00 PM UTC -...
</summary>
<content type="html">
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you probably know, on this year Jenkins projects participates in
&lt;a href=&quot;https://developers.google.com/open-source/gsoc/&quot;&gt;Google Summer of Code 2016&lt;/a&gt;.
You can find more information about the accepted projects &lt;a href=&quot;https://rtyler.github.io/jenkins.io/projects/gsoc/&quot;&gt;on the GSoC subproject page&lt;/a&gt; and in the
&lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev&quot;&gt;Jenkins Developer&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On &lt;strong&gt;this week&lt;/strong&gt; GSoC students are going to present their projects as a part of mid-term evaluation,
which covers one month of community bonding and one month of coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We would like to invite Jenkins developers to attend these meetings.
There are two additional months of coding ahead for successful students, so any feedback from Jenkins contributors and users will be appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;meeting-1-june-23-a-href-http-www-google-com-url-q-http-3a-2f-2fwww-timeanddate-com-2fworldclock-2ffixedtime-html-3fmsg-3dgoogle-2bsummer-2bof-2bcode-2bmid-term-2bevaluation-2bpresentations-2b-25231-26iso-3d20160623t19-26p1-3d-253a-26ah-3d2-sa-d-sntz-1-usg-afqjcnguzwpgrftutijdw9tyd5gi6ljn0g-7-00-pm-utc-9-00-pm-utc-a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meeting-1-june-23-a-href-http-www-google-com-url-q-http-3a-2f-2fwww-timeanddate-com-2fworldclock-2ffixedtime-html-3fmsg-3dgoogle-2bsummer-2bof-2bcode-2bmid-term-2bevaluation-2bpresentations-2b-25231-26iso-3d20160623t19-26p1-3d-253a-26ah-3d2-sa-d-sntz-1-usg-afqjcnguzwpgrftutijdw9tyd5gi6ljn0g-7-00-pm-utc-9-00-pm-utc-a&quot;&gt;&lt;/a&gt;Meeting #1 - June 23, &lt;a href=&quot;http://www.google.com/url?q=http%3A%2F%2Fwww.timeanddate.com%2Fworldclock%2Ffixedtime.html%3Fmsg%3DGoogle%2BSummer%2Bof%2BCode.%2BMid-term%2BEvaluation%2BPresentations%2B%25231%26iso%3D20160623T19%26p1%3D%253A%26ah%3D2&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNGUZwPgrFTUtIJdw9tyD5gi6Ljn0g&quot;&gt;7:00 PM UTC - 9:00 PM UTC&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support Core plugin improvements by &lt;a href=&quot;https://github.com/minudika&quot;&gt;Minudika Malshan&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/06/14/gsoc-jenkins-support-core-plugin-improvements&quot;&gt;Intro blogpost&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External Workspace Manager by &lt;a href=&quot;https://github.com/alexsomai&quot;&gt;Alex Somai&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/23/external-workspace-manager-plugin&quot;&gt;Intro blogpost&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugin documentation publishing to jenkins.io by &lt;a href=&quot;https://github.com/anyangocynthia&quot;&gt;Cynthia Anyango&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/06/01/gsoc-automatic-plugin-documentation&quot;&gt;Intro blogpost&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q&amp;amp;A session&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://plus.google.com/events/cic4c57cd4of7bauc5blmcr59p4&quot;&gt;Meeting link&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;meeting-2-june-24-a-href-http-www-google-com-url-q-http-3a-2f-2fwww-timeanddate-com-2fworldclock-2ffixedtime-html-3fmsg-3dgoogle-2bsummer-2bof-2bcode-2bmid-term-2bevaluation-2bpresentations-2b-25232-26iso-3d20160624t08-26p1-3d-253a-26ah-3d1-sa-d-sntz-1-usg-afqjcnhc36yi3bwpo_w5fikjarteye918w-8am-utc-9-am-utc-a&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#meeting-2-june-24-a-href-http-www-google-com-url-q-http-3a-2f-2fwww-timeanddate-com-2fworldclock-2ffixedtime-html-3fmsg-3dgoogle-2bsummer-2bof-2bcode-2bmid-term-2bevaluation-2bpresentations-2b-25232-26iso-3d20160624t08-26p1-3d-253a-26ah-3d1-sa-d-sntz-1-usg-afqjcnhc36yi3bwpo_w5fikjarteye918w-8am-utc-9-am-utc-a&quot;&gt;&lt;/a&gt;Meeting #2 - June 24, &lt;a href=&quot;http://www.google.com/url?q=http%3A%2F%2Fwww.timeanddate.com%2Fworldclock%2Ffixedtime.html%3Fmsg%3DGoogle%2BSummer%2Bof%2BCode.%2BMid-term%2BEvaluation%2BPresentations%2B%25232%26iso%3D20160624T08%26p1%3D%253A%26ah%3D1&amp;amp;sa=D&amp;amp;sntz=1&amp;amp;usg=AFQjCNHC36YI3bwpO_W5FIkjaRTeye918w&quot;&gt;8AM UTC - 9 AM UTC&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jenkins WebUI: Improving Job Creation/Configuration by &lt;a href=&quot;https://github.com/samatdav&quot;&gt;Samat Davletshin&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://rtyler.github.io/jenkins.io/blog/2016/05/26/gsoc-jenkins-web-ui-project&quot;&gt;Intro blogpost&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q&amp;amp;A session&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://plus.google.com/events/cj09ur9ikphda1r5dmqu1cse9q8&quot;&gt;Meeting link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both meetings will be conducted and recorded via &lt;strong&gt;Hangouts on Air&lt;/strong&gt;.
The recorded sessions will be made public after the meetup.
The agenda may change a bit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://groups.google.com/forum/#!topic/jenkinsci-dev/OX1ZdRVqS24&quot;&gt;Mid-term presentations announcement on Jenkins Developer mailing list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Google+Summer+Of+Code+2016&quot;&gt;Jenkins GSoC 2016 Wiki Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/5668199471251456/&quot;&gt;Jenkins project page on the GSoC2016 website&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
<entry>
<id>https://rtyler.github.io/jenkins.io/blog/2016/06/16/parallel-test-executor-plugin/</id>
<title>Faster Pipelines with the Parallel Test Executor Plugin</title>
<updated>2016-12-20T16:39:41-08:00</updated>
<published>2016-06-16T00:00:00+00:00</published>
<link rel="alternate" type="text/html" href="https://rtyler.github.io/jenkins.io/blog/2016/06/16/parallel-test-executor-plugin/" />
<author>
<name>lnewman</name>
</author>
<category term="tutorial"></category>
<category term="pipeline"></category>
<category term="plugins"></category>
<summary>
This is a guest post by Liam Newman,
Technical Evangelist at CloudBees.





In this blog post, I’ll show you how to speed up your pipeline by using the
Parallel Test Executor Plugin.


So much to do, so little time&#8230;&#8203;

In my career, I&#8217;ve helped many teams move to continuous integration and delivery. One problem
we always encounter is how to run all the tests needed to ensure high-quality
changes while still keeping pipeline times reasonable and changes flowing
smoothly. More tests mean greater confidence, but also longer wait times.
Build systems may or may not support running tests in parallel, but they still only use one
machine even while other...
</summary>
<content type="html">
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a guest post by &lt;a href=&quot;https://github.com/bitwiseman&quot;&gt;Liam Newman&lt;/a&gt;,
Technical Evangelist at &lt;a href=&quot;https://cloudbees.com&quot;&gt;CloudBees&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog post, I’ll show you how to speed up your pipeline by using the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin&quot;&gt;Parallel Test Executor Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;so-much-to-do-so-little-time&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#so-much-to-do-so-little-time&quot;&gt;&lt;/a&gt;So much to do, so little time…​&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my career, I’ve helped many teams move to continuous integration and delivery. One problem
we always encounter is how to run all the tests needed to ensure high-quality
changes while still keeping pipeline times reasonable and changes flowing
smoothly. More tests mean greater confidence, but also longer wait times.
Build systems may or may not support running tests in parallel, but they still only use one
machine even while other lab machines sit idle. In these cases, parallelizing
test execution across multiple machines is a great way to speed up pipelines.
The Parallel Test Executor plugin lets us leverage Jenkins do just that with no
disruption to the rest of the build system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;serial-test-execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#serial-test-execution&quot;&gt;&lt;/a&gt;Serial Test Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this post, I’ll be running a pipeline based on the
&lt;a href=&quot;https://github.com/jenkinsci/git-plugin&quot;&gt;Jenkins Git Plugin&lt;/a&gt;. I’ve modified
the Jenkinsfile from that project to allow us to compare execution times to our
later changes, and I’ve truncated the &quot;mvn&quot; utility method since it remains
unchanged.  You can find the original file
&lt;a href=&quot;https://github.com/jenkinsci/git-plugin/blob/7a31858e61d2ca2e752b0e4f1285bddcb7a75c4d/Jenkinsfile&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node {
  stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Checkout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  checkout scm

  stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Build&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;/* Call the Maven build without tests. */&lt;/span&gt;
  mvn &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;clean install -DskipTests&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

  stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
  runTests()

  &lt;span style=&quot;color:#777&quot;&gt;/* Save Results. */&lt;/span&gt;
  stage &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Results&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;/* Archive the build artifacts */&lt;/span&gt;
  archive &lt;span style=&quot;color:#606&quot;&gt;includes&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/*.hpi,target/*.jpi&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
}

&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; runTests(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; args) {
  &lt;span style=&quot;color:#777&quot;&gt;/* Call the Maven build with tests. */&lt;/span&gt;
  mvn &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;install -Dmaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;/* Archive the test results */&lt;/span&gt;
  step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitResultArchiver&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;testResults&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;**/target/surefire-reports/TEST-*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
}

&lt;span style=&quot;color:#777&quot;&gt;/* Run Maven */&lt;/span&gt;
&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; mvn(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; args) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This pipeline expects to be run from a &lt;code&gt;Jenkinsfile&lt;/code&gt; in SCM.
To copy and paste it directly into a Jenkins Pipeline job, replace the &lt;code&gt;checkout scm&lt;/code&gt; step with
&lt;code&gt;git 'https://github.com/jenkinsci/git-plugin.git'&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a Maven project, so the Jenkinsfile is pretty simple.
I’ve split the Maven build into separate “Build” and “Test”
stages. Maven doesn’t support this split very well, it wants to run all
the steps of the lifecycle in order every time. So, I have to call Maven twice:
first using the “skipTests” property to do only build steps in the first call,
and then a second time with out that property to run tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On my quad-core machine, executing this pipeline takes about 13 minutes and 30
seconds.  Of that time, it takes 13 minutes to run about 2.7 thousand tests in
serial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-16/serial.png&quot; alt=&quot;Serial Test Pipeline&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;parallel-test-execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel-test-execution&quot;&gt;&lt;/a&gt;Parallel Test Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This looks like an ideal project for parallel test execution: a short build
followed by a large number of serially executed tests that consume the most of
the pipeline time. There are a number of things I could try to speed this up.
For example, I could modify test harness to look for ways to parallelize
the test execution on this single machine. Or I could try speed up the tests
themselves. Both of those can be time-consuming and both risk destabilizing the
tests. I’d need to know more about the project to do it well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I’ll avoid that risk by using Jenkins and the
&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin&quot;&gt;Parallel Test Executor Plugin&lt;/a&gt; to
parallelize the tests across multiple nodes instead. This will isolate the tests
from each other, while still giving us speed gains from parallel execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The plugin reads the list of tests from the results archived in the previous execution of this
job and splits that list into a specified number of sublists. I can then use
those sublists to execute the tests in parallel, passing a different sublist to
each node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s look at how this changes the pipeline:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight nowrap&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;node { &lt;span style=&quot;color:#777&quot;&gt;/* ...unchanged... */&lt;/span&gt; }

&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; runTests(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; args) {
  &lt;span style=&quot;color:#777&quot;&gt;/* Request the test groupings.  Based on previous test results. */&lt;/span&gt;
  &lt;span style=&quot;color:#777&quot;&gt;/* see https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin and demo on github
  /* Using arbitrary parallelism of 4 and &quot;generateInclusions&quot; feature added in v1.8. */&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; splits = splitTests &lt;span style=&quot;color:#606&quot;&gt;parallelism&lt;/span&gt;: [&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CountDrivenParallelism&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;size&lt;/span&gt;: &lt;span style=&quot;color:#00D&quot;&gt;4&lt;/span&gt;], &lt;span style=&quot;color:#606&quot;&gt;generateInclusions&lt;/span&gt;: &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;

  &lt;span style=&quot;color:#777&quot;&gt;/* Create dictionary to hold set of parallel test executions. */&lt;/span&gt;
  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; testGroups = [:]

  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;; i &amp;lt; splits.size(); i++) {
    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; split = splits[i]

    &lt;span style=&quot;color:#777&quot;&gt;/* Loop over each record in splits to prepare the testGroups that we'll run in parallel. */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* Split records returned from splitTests contain { includes: boolean, list: List&amp;lt;String&amp;gt; }. */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/*     includes = whether list specifies tests to include (true) or tests to exclude (false). */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/*     list = list of tests for inclusion or exclusion. */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* The list of inclusions is constructed based on results gathered from */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* the previous successfully completed job. One additional record will exclude */&lt;/span&gt;
    &lt;span style=&quot;color:#777&quot;&gt;/* all known tests to run any tests not seen during the previous run.  */&lt;/span&gt;
    testGroups[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;split-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;i&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;] = {  &lt;span style=&quot;color:#777&quot;&gt;// example, &quot;split3&quot;&lt;/span&gt;
      node {
        checkout scm

        &lt;span style=&quot;color:#777&quot;&gt;/* Clean each test node to start. */&lt;/span&gt;
        mvn &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;clean&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; mavenInstall = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;install -DMaven.test.failure.ignore=true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

        &lt;span style=&quot;color:#777&quot;&gt;/* Write includesFile or excludesFile for tests.  Split record provided by splitTests. */&lt;/span&gt;
        &lt;span style=&quot;color:#777&quot;&gt;/* Tell Maven to read the appropriate file. */&lt;/span&gt;
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (split.includes) {
          writeFile &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/parallel-test-includes-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;i&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;text&lt;/span&gt;: split.list.join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
          mavenInstall += &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; -Dsurefire.includesFile=target/parallel-test-includes-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;i&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
          writeFile &lt;span style=&quot;color:#606&quot;&gt;file&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;target/parallel-test-excludes-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;i&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#606&quot;&gt;text&lt;/span&gt;: split.list.join(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
          mavenInstall += &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt; -Dsurefire.excludesFile=target/parallel-test-excludes-&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;${&lt;/span&gt;i&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;.txt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
        }

        &lt;span style=&quot;color:#777&quot;&gt;/* Call the Maven build with tests. */&lt;/span&gt;
        mvn mavenInstall

        &lt;span style=&quot;color:#777&quot;&gt;/* Archive the test results */&lt;/span&gt;
        step([&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;$&lt;/span&gt;&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;JUnitResultArchiver&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;testResults&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;**/target/surefire-reports/TEST-*.xml&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;])
      }
    }
  }
  parallel testGroups
}

&lt;span style=&quot;color:#777&quot;&gt;/* Run Maven */&lt;/span&gt;
&lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; mvn(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; args) { &lt;span style=&quot;color:#777&quot;&gt;/* ... */&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That’s it!  The change is significant but it is all encapsulated in this one
method in the &lt;code&gt;Jenkinsfile&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;great-ish-success&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#great-ish-success&quot;&gt;&lt;/a&gt;Great (ish) Success!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here’s the results for the new pipeline with parallel test execution:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://rtyler.github.io/jenkins.io/images/post-images/2016-06-16/serial-vs-parallel.png&quot; alt=&quot;Pipeline Duration Comparison&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The tests ran almost twice as fast, without changes outside pipeline.  Great!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, I used 4 test executors, so why am I not seeing a 4x? improvement.
A quick review of the logs shows the problem: A small number of tests are taking up
to 5 minutes each to complete! This is actually good news. It means that I
should be able to see further improvement in pipeline throughput just by refactoring
those few long running tests into smaller parts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While I would like to have seen closer to a 4x improvement to match to number
of executors, 2x is still perfectly respectable. If I were working on a group of projects
with similar pipelines, I’d be completely comfortable reusing these same changes
on my other project and I’d expect to similar improvement without any disruption to
other tools or processes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin&quot; class=&quot;bare&quot;&gt;https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
</entry>
</feed>
